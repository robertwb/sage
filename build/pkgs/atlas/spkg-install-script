#!/usr/bin/env bash

###########################################
## ATLAS
###########################################


# we need to disable parallel builds
MAKE=make; export MAKE

FCOMPILER="$SAGE_LOCAL"/bin/sage_fortran
bitwidth=`python ./bitwidth.py`
echo "Platform detected to be $bitwidth bits"

python system_atlas.py
output=$?

#system_atlas script exits with status
# 0: if the user SAGE_ATLAS_LIB worked
# 1: if SAGE_ATLAS_LIB was not set
# 2: if SAGE_ATLAS_LIB is set but does not contain the correct libraries

if [ $output = 0 ]; then
  exit 0
fi

if [ $output = 2 ]; then
  exit 1
fi

config()
{
        if [ -d ATLAS-build ]; then
            rm -rf ATLAS-build
        fi
        mkdir ATLAS-build
	cd ATLAS-build
	# -Si cputhrchk 0: Ignore/heed CPU throttle probe
	# -Fa alg -fPIC: set flags so we can build dynamic libraries
	# -t 0: disable threading for now.
        # -A: select arch where 21 is Hammer
        # -V: select SIMD extensions, i.e. 24 is SSE1 + SSE2
        SIMD_FLAGS=""
	if [ "$SAGE_FAT_BINARY" = "yes" ]; then
           if [ "`uname -p`" = "i386" -o "`uname -p`" = "x86_64" ]; then
              # Currently in fat mode we just fall back to SSE2.  In the long run, we will build
              # both an sse2 and sse3, and install them somewhere, and switch to the best one
              # at runtime.
              echo "Sage 'fat' binary mode set"
              echo "Building SSE2 only Hammer binary"
              echo "NOTE: This can result in a Sage that is significantly slower at certain numerical linear algebra"
              echo "since full FAT binary support has not been implemented yet."
              SIMD_FLAGS="-V 24 -A 21"
           fi
        fi
	../src/configure --prefix="$SAGE_LOCAL" --with-netlib-lapack="$SAGE_LOCAL"/lib/liblapack.a  \
	-Si cputhrchk 0 -Fa alg -fPIC -t 0 -C if $FCOMPILER -b $bitwidth $SIMD_FLAGS
}


build()
{
	# build library
	cd $CUR/ATLAS-build
	make
        if [ $? -ne 0 ]; then
            echo "Failed to build ATLAS."
            exit 1
        fi
        echo "Finished building ATLAS core"

	# now build the shared libraries
	cd lib
        # If the Sun linker is used, alter the Makefile to be suitable for the"
        # Sun linker.
        if [ `uname` = "SunOS" ]; then
          if [ "`ld  --version  2>&1  | grep GNU`" = "" ]; then
             echo "The Makefile generated in ATLAS for building shared libraries"
             echo "assumes the linker is the GNU linker, which it not true in"
             echo "your setup. (It is generally considered better to use the"
             echo "Sun linker in /usr/ccs/bin rather than the GNU linker from binutils)"
             echo "The linker flags in `pwd`/Makefile will be changed. "
             echo "'-shared' will be changed to '-G'"
             echo "'-soname' will be changed to '-h'"
             echo "'--whole-archive' will be changed to '-zallextract'"
             echo "'--no-whole-archive' will be changed to '-zdefaultextract'"
             echo "A copy of the original Makefile will be copied to Makefile.orig"
             cp Makefile Makefile.orig
             sed 's/-shared/-G/g' Makefile > makefile.tmp
             sed 's/-soname/-h/g' makefile.tmp > Makefile
             sed 's/--whole-archive/-z allextract/g' Makefile > makefile.tmp
             sed 's/--no-whole-archive/-z defaultextract/g' makefile.tmp > Makefile
             rm makefile.tmp
             if [ "x$SAGE64" = xyes ] && [ "x`uname -m`" = xi86pc ] ; then
                # Solaris or OpenSolaris on x86/x64 on a 64-bit build
                echo "Change ldflag -melf_x86_64 to -64 as needed for Sun ld"
                echo "on 64-bit builds of ATLAS on x64 hardware"
                sed 's/-melf_x86_64/-64/g' Make.inc > makeinc
                mv makeinc Make.inc
             fi
             if [ "x$SAGE64" != xyes ] && [ "x`uname -m`" = xi86pc ] ; then
                # Solaris or OpenSolaris on x86/x64 on a 32-bit build
                echo "Remove the linker flag -melf_i386 as needed for Sun ld"
                echo "on 32-bit builds of ATLAS on x86/x64 hardware"
                sed 's/-melf_i386//g' Make.inc > makeinc
                mv makeinc Make.inc
             fi
          else
             echo "WARNING You are using the GNU linker from 'binutils'"
             echo "Generally it is considered better to use the Sun linker"
             echo "but Sage has been built on Solaris using the GNU linker"
             echo "although that was a very old version of Sage, which"
             echo "never passes all the Sage test-suite."
          fi
        fi

	make shared cshared
        if [ $? -ne 0 ]; then
            echo "Building shared ATLAS libraries failed"
            exit 1
        fi

	# and now install
	cd ..
	make install
        if [ $? -ne 0 ]; then
            echo "Make install for ATLAS failed"
            exit 1
        fi
}

if [ `uname` = "Darwin" ]; then
    exit 0
fi


CUR=`pwd`
echo $CUR
if [ `uname` = "FreeBSD" ]; then
    echo Patching SpewMakeInc.c for FreeBSD-specific build
    cp patches/SpewMakeInc.c src/CONFIG/src/SpewMakeInc.c
fi
# add PPC4 7447 CPU and better Itanium2 detection:
echo Deal with PPC4 7447 model and Itanium 2
cp patches/archinfo_linux.c src/CONFIG/src/backend/archinfo_linux.c
# add Pentium D and E as well as Core2Duo and Dunnington CPUids
echo Updating archinfo_x86.c
cp patches/archinfo_x86.c src/CONFIG/src/backend/archinfo_x86.c
# work around "-m64" cflag issue on Itanium
echo Updating probe_comp.c
cp patches/probe_comp.c src/CONFIG/src/probe_comp.c
# add dynamic libs make install targets
echo Updating Make.top
cp patches/Make.top src
# add K7, Pentium M and non-AltiVec G4 profiles
cp patches/*tgz src/CONFIG/ARCHS

config

build

cd $CUR/ATLAS-build
if [ -f error* ]; then
    echo "ATLAS failed to build because your system is too heavily loaded to obtain accurate timing."
    echo "Please restart the build by typing make, when the load on your system has decreased."
    exit 1
fi

cd $CUR
sh ./make_correct_shared.sh
