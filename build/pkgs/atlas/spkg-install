#!/usr/bin/env python

import os, random, sys, time

######################################################################
# On Cygwin we simply require that the system-wide lapack is installed.
# This includes BLAS and is enough to build the rest of Sage.
######################################################################
if os.environ['UNAME'] == "CYGWIN":
    if not os.path.exists('/usr/lib/libblas.a'):
        print "*"*75
        print "On Cygwin you must install the standard LAPACK Cygwin package"
        print "via the Cygwin setup.exe program in the 'Math' category."
        print "*"*75
        sys.exit(1)
    sys.exit(0)

##############################################
# Apply a TEMPORARY fix to allow ATLAS to build with
# gcc 4.4.0 on Solaris. Implemented 16th June 2009, by David Kirkby.
# One would expect to remove this within a couple of months,
# once the underlying issue in ATLAS is resolved. The patch
# forces GuessSmallNB() in src/tune/blas/gemm/mmsearch.c
# to return 28 as suggested by Clint Whaley.

# Changed on July 19th 2009 (see trac 6558) to be more selective and only
# apply the fix on sun4v machines which are based on the Sun T1, T2 and T2+
# processors (codenamed Niagra). This is because there are no known problems
# on other Sun architectures such as sun4u, or any x86 based Solaris system.

import shutil
if os.uname()[0] == 'SunOS' and os.uname()[4] == 'sun4v':
   shutil.copy2('patches/mmsearch-with-temp-Solaris-fix.c','src/tune/blas/gemm/mmsearch.c')
##############################################

##############################################
## Build ATLAS repeatedly up to 5 times until
## it works. Pause a random amount of time
## between each build attempt.
##
## AUTHOR: William Stein, 2009-02-20
##############################################

max_tries = 5

for i in range(max_tries):
    # e = shift by 8 to get correct exit code, which could be needed
    # for better error handling later.
    e = os.system('./spkg-install-script') >> 8
    if e == 0:
        # build success
        sys.exit(0)
    if os.path.exists('ATLAS-build') and \
           len([x for x in os.listdir('ATLAS-build') if x.startswith('error')]) > 0:
        if i == max_tries - 1:
            print "Too many failures to build ATLAS.  Giving up!"
            sys.exit(1)
        print "ATLAS failed to build for the %s-th time, possibly because of a"%(i+1)
        print "loaded system, so we will automatically try again up to %s more times."%(max_tries-i-1)
        s = random.randint(300,900)
        print "Waiting %s minutes..."%(s//60)
        time.sleep(s)
    else:
        print "Failed to build ATLAS."
        sys.exit(1)
