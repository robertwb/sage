#!/usr/bin/env bash

if [ "$SAGE_LOCAL" = "" ]; then
   echo "SAGE_LOCAL undefined ... exiting";
   echo "Maybe run 'sage -sh'?"
   exit 1
fi

./test_gcc_version.pl
if [ $? -ne 0 ]; then
   echo "GCC version less than 3.4.0"
   echo "Flint will not be able to compile successfully"
   exit 1
fi

if [ "`uname`" = "Linux" -a "`uname -m`" = "x86_64" ]; then
   # This line causes *MAJOR* Illegal Instruction problems on
   # 64-bit Pentium 4's.  Do *not* do that!!  Only enable the
   # opteron stuff with a surefire way of detecting that a
   # machine is really an opteron.
   #FLINT_TUNE="-mtune=opteron -march=opteron -fPIC -funroll-loops "

   FLINT_TUNE="-fPIC -funroll-loops "

elif [ "`uname`" = "Darwin" -a "`uname -m`" = "Power Macintosh" ]; then
   FLINT_TUNE=" -fPIC -funroll-loops "
elif [ "`uname -m`" = "ia64" ]; then
   # -funroll-loops crashes the build on itanium under GCC-4.2.1, as reported by
   # Kate Minola.
   echo "Turning off loop unrolling on Linux/Itanium"
   FLINT_TUNE=" -fPIC "
elif [ "`uname`" = "SunOS" -a "`uname -p`" = "sparc" ]; then
   # -funroll-loops crashes the build on an US IIIi under GCC-4.3.2, as reported by
   # Michael Abshoff
   echo "Turning off loop unrolling on Solaris/Sparc"
   FLINT_TUNE=" -fPIC "
else
   FLINT_TUNE=" -fPIC -funroll-loops  "
fi

if [ `uname` = "Darwin" -a "$SAGE64" = "yes" ]; then
   echo "64 bit MacIntel"
   FLINT_TUNE=" -fPIC -m64 -funroll-loops"
fi

export FLINT_TUNE

FLINT_GMP_INCLUDE_DIR="$SAGE_LOCAL"/include/
FLINT_GMP_LIB_DIR="$SAGE_LOCAL"/lib/

FLINT_NTL_INCLUDE_DIR="$SAGE_LOCAL"/include
FLINT_NTL_LIB_DIR="$SAGE_LOCAL"/lib/

# What is QD??
FLINT_QD_LIB_DIR="$SAGE_LOCAL"/include
FLINT_QD_INCLUDE_DIR="$SAGE_LOCAL"/include

export FLINT_GMP_INCLUDE_DIR
export FLINT_GMP_LIB_DIR
export FLINT_QD_INCLUDE_DIR
export FLINT_QD_LIB_DIR
export FLINT_NTL_INCLUDE_DIR
export FLINT_NTL_LIB_DIR

###
FLINT_LINK_OPTIONS=""
export FLINT_LINK_OPTIONS

cp patches/makefile src/
cp patches/fmpz.c src/

cd src

# UNIX
if [ $UNAME != "Darwin" ]; then
    $MAKE libflint.so
    if [ $? -ne 0 ]; then
        echo "Error building flint shared library."
        exit 1
    fi
    echo "Deleting old FLINT"
    rm -f $SAGE_LOCAL/lib/libflint*
    echo "Installing new library file"
    $CP -a libflint* "$SAGE_LOCAL/lib/"
fi

# OS X
if [ $UNAME = "Darwin" ]; then
    if [ "$SAGE64" = "yes" ]; then
       $MAKE libflint.dylib64
    else
       $MAKE libflint.dylib
    fi
    if [ ! -f libflint.dylib ]; then
        echo "Failed to build FLINT dylib."
        exit 1
    fi
    echo "Deleting old FLINT"
    rm -f $SAGE_LOCAL/lib/libflint*
    echo "Installing new library file"
    $CP libflint.dylib "$SAGE_LOCAL/lib/"
fi


# Copy the header files

rm -rf "$SAGE_LOCAL"/include/FLINT

for i in {FLINT/,FLINT/zn_poly/src/}; do
	mkdir -p "$SAGE_LOCAL"/include/$i
	if [ $? -ne 0 ]; then
	    echo "Error building FLINT"
	    exit 1
	fi

	$CP ${i/FLINT\//}*.h "$SAGE_LOCAL"/include/$i
	if [ $? -ne 0 ]; then
	    echo "Error building FLINT"
	    exit 1
	fi
done

#uncomment the line below to avoid running the test suite.
#this should be done in all final releases
#exit 0
cd ..; ./spkg-check
