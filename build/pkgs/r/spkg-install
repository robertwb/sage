#!/bin/sh

CUR=`pwd`


# Hack to get around dumb hardcoding.
cp patches/R.sh.in src/src/scripts/


# I have problems with this on OSX Intel 10.5.1 -- for now just turn it off.
# It will be good to get something fully working before worrying about X.
if [ -f /usr/include/X11/Xwindows.h ]; then
    XSUPPORT=yes
else
    XSUPPORT=no
fi


rm -rf "$SAGE_LOCAL"/lib/r
mv src "$SAGE_LOCAL"/lib/r
ln -s "$SAGE_LOCAL"/lib/r src

cd "$SAGE_LOCAL"/lib/r/

FC=sage_fortran; export FC
F77=sage_fortran; export F77

# These flags are *critical* so that R will be built against Sage's copy of readline.
CFLAGS="-I$SAGE_LOCAL/include -L$SAGE_LOCAL/lib/ "$CFLAGS; export CFLAGS
LDFLAGS="-L$SAGE_LOCAL/lib/ "$LDFLAGS; export LDFLAGS

./configure --prefix="$SAGE_LOCAL" --enable-R-shlib --with-x=$XSUPPORT --with-readline="$SAGE_LOCAL"

if [ $? -ne 0 ]; then
    echo "Error configuring R."
    exit 1
fi

$MAKE R
if [ $? -ne 0 ]; then
    echo "Error building R."
    exit 1
fi

make install
if [ $? -ne 0 ]; then
    echo "Error installing R."
    exit 1
fi

# For some reason make install sucks -- it doesn't copy the libraries or R bin over ??

cp lib/* "$SAGE_LOCAL"/lib/
cp bin/R "$SAGE_LOCAL"/bin/


# Remove the src from the build.

if [ $FORCE = "" ]; then
   rm -rf src
fi

# Some linux only hackery.

echo "Now install rpy"

cd "$CUR"

sage -f rpy-1.0.1.spkg
