#!/usr/bin/env bash

if [ "$SAGE_LOCAL" = "" ]; then
   echo "SAGE_LOCAL undefined ... exiting";
   echo "Maybe run 'sage -sh'?"
   exit 1
fi

if [ `uname` = "Darwin" -a "$SAGE64" = "yes" ]; then
   echo "64 bit MacIntel"
   CFLAGS="-O2 -g -m64 "; export CFLAGS
   LDFLAGS="-m64 "; export LDFLAGS
fi

CUR=`pwd`

if [ "$SAGE_LOCAL" = "" ]; then
    echo "SAGE_LOCAL undefined ... exiting";
    exit 1
fi

# Hack to get around dumb hardcoding.
cp patches/R.sh.in src/src/scripts/


# I have problems with this on OSX Intel 10.5.1 -- for now just turn it off.
# It will be good to get something fully working before worrying about X.
if [ -f /usr/include/X11/Xwindows.h ]; then
    XSUPPORT=yes
else
    XSUPPORT=no
fi

if [ `uname` = "Darwin" ]; then
    OSXFW="--enable-R-framework=no"; export OSXFW
    if [ "$SAGE64" = "yes" ]; then
       echo "Disabling iconv and aqua support on 64 bit OSX"
       OSXFW="--enable-R-framework=no --with-iconv=no --with-aqua=no"; export OSXFW
    fi
else
    OSXFW=""; export OSXFW
fi

# let's remove old install, even the wrongly installed ones
rm -rf "$SAGE_LOCAL"/lib/r
rm -rf "$SAGE_LOCAL"/lib/R
rm -rf "$SAGE_LOCAL"/lib64/R
rm -rf "$SAGE_LOCAL"/lib64/r
# and let's also nuke some leftovers on SAGE_LOCAL/lib
rm -rf "$SAGE_LOCAL"/lib/libRblas.so "$SAGE_LOCAL"/lib/libRlapack.so "$SAGE_LOCAL"/lib/libR.so
rm -rf "$SAGE_LOCAL"/lib/libRblas.dylib "$SAGE_LOCAL"/lib/libRlapack.dylib "$SAGE_LOCAL"/lib/libR.dylib

cd src

# make sure the prefix is always lib, not lib64 on 64 bit linux
LIBnn="lib"; export LIBnn

FC=sage_fortran; export FC
F77=sage_fortran; export F77

# These flags are *critical* so that R will be built against Sage's
# copy of readline and ATLAS.
CFLAGS="-I$SAGE_LOCAL/include -L$SAGE_LOCAL/lib/ "$CFLAGS; export CFLAGS
LDFLAGS="-L$SAGE_LOCAL/lib/ "$LDFLAGS; export LDFLAGS

# do not build recommended packages for now, for speed.

if [ `uname` = "Darwin" ]; then
     echo "Configuring R for OSX"
    ./configure --prefix="$SAGE_LOCAL" --with-recommended-packages=no --enable-R-shlib --with-x=$XSUPPORT --with-readline="$SAGE_LOCAL" $OSXFW
else
     echo "Configuring R with ATLAS"
    ./configure --prefix="$SAGE_LOCAL" --with-recommended-packages=no --enable-R-shlib --with-x=$XSUPPORT --with-readline="$SAGE_LOCAL" --with-blas="-L$SAGE_LOCAL/lib -lf77blas -latlas" --with-lapack="-L$SAGE_LOCAL/lib -llapack -lcblas"
fi

if [ $? -ne 0 ]; then
     echo "Configuring R with fallback options"
    ./configure --prefix="$SAGE_LOCAL" --with-recommended-packages=no --enable-R-shlib --with-x=no --with-readline="$SAGE_LOCAL" $OSXFW
fi

if [ $? -ne 0 ]; then
    echo "Error configuring R."
    exit 1
fi

$MAKE R
if [ $? -ne 0 ]; then
    echo "Error building R."
    exit 1
fi

#parallel make install is broken
export MAKE=make
$MAKE vignettes #needed for help system
$MAKE install
if [ $? -ne 0 ]; then
    echo "Error installing R."
    exit 1
fi

#$MAKE install-libR
#if [ $? -ne 0 ]; then
#    echo "Error installing libR."
#    exit 1
#fi

# Fix hardcoding problems.
cd "$CUR"/patches
python fix_hardcode

echo "Now install rpy"

cd "$CUR"

RPY_VER=rpy-1.0.1.p1

sage -f "$RPY_VER".spkg
if [ ! -f "$SAGE_ROOT"/spkg/installed/"$RPY_VER" ]; then
    echo "Error installing rpy."
    exit 1
fi
