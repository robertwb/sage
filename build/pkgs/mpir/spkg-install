#!/usr/bin/env bash

if [ "$SAGE_LOCAL" = "" ]; then
   echo "SAGE_LOCAL undefined ... exiting";
   echo "Maybe run 'sage -sh'?"
   exit 1
fi

# The Yasm build uses PYTHON from env to find python, so unset it
# since the version from newest_version confuses it
unset PYTHON

remove_pic_osx_32_bit()
{
    echo "Deleting assembly files which depend on PIC assembly working or 32 bit OSX on Intel hardware"
    rm mpn/x86/dive_1.asm
    rm mpn/x86/diveby3.asm
    rm mpn/x86/pentium4/sse2/dive_1.asm
    rm mpn/x86/pentium4/sse2/mode1o.asm
    rm mpn/x86/pentium4/sse2/diveby3.asm
    rm mpn/x86/pentium4/mmx/popham.asm
    rm mpn/x86/pentium4/mmx/rshift.asm
    rm mpn/x86/p6/mode1o.asm
    rm mpn/x86/p6/dive_1.asm
    rm mpn/x86/pentium/hamdist.asm
    rm mpn/x86/pentium/mod_1.asm
    rm mpn/x86/pentium/popcount.asm
    rm mpn/x86/pentium/mode1o.asm
    rm mpn/x86/pentium/dive_1.asm
}


build()
{

    SAGE_CONF_OPTS="--enable-shared --disable-static"
    case $UNAME in

    SunOS)
        if [ "$SAGE64" = "yes" ]; then
            echo "Building 64 bit Solaris version"
            ABI=64
        else
            ABI=32
        fi;;

    Darwin)
        if [ "$SAGE64" = "yes" ]; then
            echo "Building 64 bit OSX version"
            ABI=64
        else
            ABI=32
            if [ "`uname -m`" = "i386" ]; then
                remove_pic_osx_32_bit
            fi
        fi;;

    Linux)
        if [ "$SAGE_FAT_BINARY" = "yes" ]; then
           # For now we do the same thing -- namely "--enable-fat" --
           # on both 64-bit and 32-bit, though this is likely to
           # change.
           if [ "`uname -m`" = "i386" ]; then
                echo "** Building with FAT Binary Support (32-bit) **"
                SAGE_CONF_OPTS=$SAGE_CONF_OPTS" --enable-fat"
           fi
           if [ "`uname -m`" = "x86_64" ]; then
                echo "** Building with FAT Binary Support (64-bit) **"
                SAGE_CONF_OPTS=$SAGE_CONF_OPTS" --enable-fat"
           fi
        fi

    esac

    export ABI CFLAGS CXXFLAGS

    ./configure --prefix="$SAGE_LOCAL" --enable-gmpcompat --enable-cxx=yes  $SAGE_CONF_OPTS
    if [ $? -ne 0 ]; then
        echo "Failed to configure."
	exit 1
    fi

    $MAKE
    if [ $? -ne 0 ]; then
        echo "Error building MPIR."
        exit 1
    fi

    echo "Removing old headers and libraries"
    rm -f "$SAGE_LOCAL"/include/mpir*.h "$SAGE_LOCAL"/include/gmp*.h
    rm -f "$SAGE_LOCAL"/lib/libmpir* "$SAGE_LOCAL"/lib/libgmp*

    $MAKE install
    if [ $? -ne 0 ]; then
        if [ "$UNAME" != "CYGWIN" ]; then  # on cygwin error is not fatal.
            echo "Error installing MPIR."
            exit 1
        fi
    fi

    # to install the gmpcompat bits fully we need to run a second install target
    $MAKE install-gmpcompat
    if [ $? -ne 0 ]; then
        if [ "$UNAME" != "CYGWIN" ]; then  # on cygwin error is not fatal.
            echo "Error installing MPIR."
            exit 1
        fi
    fi

}

cd src

build

if ! [ $? -eq 0 ]; then
    echo "Failed to build shared MPIR library."
    exit 1
fi

# comment out the line below to avoid running the test suite, which
# should be done in all final releases
cd ..; ./spkg-check
