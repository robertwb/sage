#!/usr/bin/env bash

###############################################################################
# IMPORTANT: WHEN EDITING THIS FILE, MAKE SURE YOUR EDITOR DOES NOT REPLACE
#            TABS BY SPACES.
###############################################################################

if [ -z "$SAGE_LOCAL" ]; then
    echo >&2 "Error: SAGE_LOCAL undefined - exiting..."
    echo >&2 "Maybe run 'sage -sh'?"
    exit 1
fi

CUR=`pwd`

cd src/

###############################################################################
# Apply patches (if any):
###############################################################################

# Add a patch which allows MPIR to build with Sun Studio:
# (This only adds some includes if __SUNPRO_CC is defined, so is a completely
# harmless change that doesn't depend on the actual compiler used.)
if [ "$UNAME" = SunOS ]; then
    # TODO: Use 'patch' instead of copying over a patched version, which
    #       has to be refreshed on each new release, since gmp-h.in also
    #       contains the full version number.
    echo "Copying a version of gmp-h.in which is patched for Sun Studio..."
    cp ../patches/gmp-h.in . # We are in src/.
    if [ $? -ne 0 ]; then
        echo >&2 "Error: Failed to patch MPIR for Sun Studio."
        exit 1
    fi
fi

echo "Applying further patches (if any) to upstream sources..."
for patch in ../patches/*.patch; do
    patch -p1 <"$patch"
    if [ $? -ne 0 ]; then
        echo >&2 "Error: '$patch' failed to apply."
        exit 1
    fi
done

###############################################################################
# Previous MPIR installations are only removed after a *successful* (re)build,
# before installing the new one. (Done below.)
###############################################################################

###############################################################################
# Helper functions:
###############################################################################

remove_32_bit_assembly_code() # MacOS X 10.4 and 10.5 on Intel (x86) only.
{
    # We could actually do this by using 'patch', at the expense of
    # a larger Mercurial repository, and the need to rebase the patches
    # whenever these files change, so better just delete them with 'rm'.
    echo "Deleting assembly files which depend on PIC assembly" \
        "working on 32-bit MacOS X on Intel hardware..."
    saved=`pwd`
    cd "$CUR/src/"
    rm mpn/x86/dive_1.asm
    rm mpn/x86/diveby3.asm
    rm mpn/x86/pentium4/sse2/dive_1.asm
    rm mpn/x86/pentium4/sse2/mode1o.asm
    rm mpn/x86/pentium4/sse2/diveby3.asm
    rm mpn/x86/pentium4/mmx/popham.asm
    rm mpn/x86/pentium4/mmx/rshift.asm
    rm mpn/x86/p6/mode1o.asm
    rm mpn/x86/p6/dive_1.asm
    rm mpn/x86/pentium/hamdist.asm
    rm mpn/x86/pentium/mod_1.asm
    rm mpn/x86/pentium/popcount.asm
    rm mpn/x86/pentium/mode1o.asm
    rm mpn/x86/pentium/dive_1.asm
    cd "$saved"
}

get_upstream_selected_cflags() # Get MPIR's choice on empty CFLAGS (or system GMP's).
{
    # Internal sanity check:
    if [ $# -ne 1 ]; then
        echo >&2 "Error: get_upstream_selected_cflags() requires 'file' parameter."
        exit 1
    fi
    header_file=$1
    if ! [ -f "$header_file" ]; then
        upstream_cc=""
        upstream_cflags=""
        return 1
    fi
    # The following patterns only extract the contents of (double-quoted) strings:
    gmp_cc_pat='/^[ 	]*#[ 	]*define[ 	]\{1,\}__GMP_CC[ 	]\{1,\}/s/.*"\([^"]*\)"/\1/p'
    gmp_cflags_pat='/^[ 	]*#[ 	]*define[ 	]\{1,\}__GMP_CFLAGS[ 	]\{1,\}/s/.*"\([^"]*\)"/\1/p'
    # Extract preprocessor definitions of __GMP_CC and __GMP_CFLAGS:
    upstream_cc=`sed -n -e "$gmp_cc_pat" "$header_file"`
    upstream_cflags=`sed -n -e "$gmp_cflags_pat" "$header_file"`
    # At least /some/ newer versions of MPIR define __GMP_CC and __GMP_CFLAGS
    # (also in gmp.h! -- how compatible is that?) to (literally) __MPIR_CC and
    # __MPIR_CFLAGS, respectively, i.e., to preprocessor variables, so we might
    # have to get the real strings from their definitions:
    # (Since we currently only match string literals above, both variables would
    # be empty in that case, and not contain the names of preprocessor variables.
    # We could change the patterns to actually match any definition / "value".)
    case "$upstream_cc" in __MPIR_CC|"")
        upstream_cc=`sed -n -e "${gmp_cc_pat/GMP/MPIR}" "$header_file"`
    esac
    case "$upstream_cflags" in __MPIR_CFLAGS|"")
        upstream_cflags=`sed -n -e "${gmp_cflags_pat/GMP/MPIR}" "$header_file"`
    esac
    # Upstream-selected CFLAGS may be empty, CC shouldn't:
    if [ -z "$upstream_cc" ]; then
        return 1
    fi
    return 0
}

get_processor_specific_cflags() # Extract some processor-specific CFLAGS.
{
    # Internal sanity check:
    if [ $# -lt 1 ]; then
        echo >&2 "Error: get_processor_specific_cflags() requires 'CFLAGS' parameter."
        exit 1
    fi
    flags=$@
    arch_flags=""
    for opt in $flags; do
        case $opt in
            -march=*|-mcpu=*|-mtune=*)
                arch_flags="$arch_flags $opt"
                ;;
            # We could add further '-m' or '-f' options here, but note that
            # this function is also used to determine if the user specified
            # some, which we don't want to override.
            # AFAIK, MPIR currently uses / defines at most '-m{arch,cpu,tune}',
            # not more specific / additional ones like e.g. '-mavx' or '-mvsx'.
            # (-leif, 04/2012)
        esac
    done
    echo $arch_flags
}

native_build_cflags_if_supported() # Give option for a native build if supported.
{
    # Some GCC 4.0.x versions don't support '-march=native', and it's currently
    # not supported on all platforms supported by Sage.
    # (Compilers other than 'gcc' might support it as well, in which case the
    # following also works. Other flavours could be added, too.)
    if touch foo.c && $CC -march=native -c foo.c &>/dev/null; then
        # Ok, the compiler (presumably GCC) understands '-march=native', which
        # doesn't yet mean the *assembler* will know the fancy instructions
        # the compiler emits with that option.
        # For example, Apple's assembler on Mac OS X 10.7.1 apparently doesn't
        # yet support AVX, which could also cause MPIR's 'configure' to fail.
        cat >foo.c <<-"EOF"
		double d;
		unsigned long fancy_insns() { return (unsigned long) d; }
		int main () { return 0; }
	EOF
        if $CC -march=native -o foo foo.c &>/dev/null && ./foo >/dev/null; then
            echo "-march=native"
        else
            echo >&2 "Warning: Your assembler apparently doesn't understand the instructions"
            echo >&2 "         your compiler ($CC) generates with '-march=native'."
            echo >&2 "         You might also try to compile MPIR with (e.g.)"
            echo >&2 "             CFLAGS=\"-march=native -mno-avx\""
            echo >&2 "         to disable specific instruction set extension (in this case, AVX)."
        fi
    fi
    rm -f foo foo.* >/dev/null
}

###############################################################################
# Set up environment variables:
###############################################################################

# The Yasm build uses PYTHON from the environment to find the Python interpreter,
# so unset it in case it apparently contains nothing useful (like it did in Sage
# versions prior to 5.0.beta10; cf. #10492), to not break Yasm's 'configure':
if ! $PYTHON --version &>/dev/null; then
    # Only issue a warning if it was really non-empty, to not confuse users:
    if [ -n "$PYTHON" ]; then
        echo >&2 "Warning: Unsetting PYTHON (=\"$PYTHON\"), since it doesn't seem"
        echo >&2 "         to contain the name of / path to a Python interpreter."
    fi
    unset PYTHON
fi

user_cflags=$CFLAGS # Save them. 'sage-env' sets CC, but not CFLAGS.
required_cflags=""  # Additional mandatory settings required by Sage, accumulated below.
default_cflags=""   # Spkg defaults that can and might get overridden.
user_ldflags=$LDFLAGS # Save them.
required_ldflags=""   # Additional mandatory settings required by Sage, accumulated below.
user_abi=$ABI # Just save it.
# In case we changed CPPFLAGS or CXXFLAGS, too, we should save the user's here as well.
# We don't have to add (e.g.) '-m64' to CFLAGS/CPPFLAGS/CXXFLAGS/LDFLAGS, since
# MPIR's 'configure' is smart enough to add it if necessary or appropriate.

SAGE_CONF_OPTS="" # Clear them. (Further options to `configure` are added below.)


if [ -z "$CFLAG32" ]; then
    CFLAG32="-m32" # Only used in this script, no need to export it.
fi
if [ -z "$CFLAG64" ]; then
    CFLAG64="-m64" # Only used in this script, no need to export it.
fi


if [ "$SAGE_DEBUG" = yes ]; then
    # Disable optimization, add debug symbols:
    required_cflags="$required_cflags -g -O0"
    echo >&2 "Warning: Building MPIR with SAGE_DEBUG=yes disables optimization."
else
    # Add debug symbols by default, enable optimization, but do not (yet)
    # add processor-specific flags (these are eventually added later):
    default_cflags="$default_cflags -g -O3"
fi


case "$UNAME" in
    SunOS)
        if [ "$SAGE64" = yes ]; then
            echo "Building a 64-bit version of MPIR."
            ABI=64
        else
            echo "Building a 32-bit version of MPIR."
            ABI=32
        fi;;
    Darwin)
        if [ "$SAGE64" = yes ]; then
            # Note that we do not support 64-bit builds on MacOS X PPC at all,
            # so we don't special-case on the architecture here.
            echo "Building a 64-bit version of MPIR."
            ABI=64
        else
            # Do not set ABI=32 on MacOS X 10.6 (Darwin 10) and later, since
            # there everything defaults to 64-bit:
            if [ "`uname -r | sed 's/\..*//'`" -lt 10 ]; then
                # Assume MacOS X 10.4 or 10.5 (Darwin 8 or 9); also, PPC CPUs
                # are only supported by these, not later versions.
                echo "Building a 32-bit version of MPIR, which is the only supported option."
                ABI=32
                case "`uname -m`" in
                    i[3456]86)
                        # Remove x86 assembly code that breaks PIC on MacOS X:
                        remove_32_bit_assembly_code
                        ;;
                    ppc|ppc64|[Pp]ower*) # Apple's 'uname' returns strange strings
                        # The Darwin assembler rejects code using an
                        # extended instruction set by default (cf. #8664):
                        required_cflags="$required_cflags -Wa,-force_cpusubtype_ALL"
                        ;;
                esac
            else
                # Darwin 10 (MacOS X 10.6) or later, SAGE64 not "yes"
                # We don't have to set ABI here.
                echo "Building a 64-bit version of MPIR, which is the default."
            fi
        fi
        ;; # Darwin
    Linux)
        # Work around (erroneously) set "executable stack" attributes,
        # causing runtime errors on Fedora 14 and other SELinux-enabled
        # systems:
        required_ldflags="$required_ldflags -Wl,-z,noexecstack"

        if [ "$SAGE_FAT_BINARY" = "yes" ]; then
            # For now we do the same thing -- namely "--enable-fat" --
            # on both 64-bit and 32-bit, though this is likely to change.
            case "`uname -m`" in
            i[3456]86)
                echo "** Building with \"fat binary\" support for 32-bit CPUs **"
                SAGE_CONF_OPTS="$SAGE_CONF_OPTS --enable-fat"
                ;;
            x86_64|amd64)
                echo "** Building with \"fat binary\" support for 64-bit CPUs **"
                SAGE_CONF_OPTS="$SAGE_CONF_OPTS --enable-fat"
                ;;
            *) # e.g. ia64 (Itanium) or PPC (ppc, ppc64)
                echo >&2 "Warning: A \"fat binary\" build is currently not" \
                    "supported on this CPU architecture."
                # XXX exit 1 ?
            esac
        fi

        # MPIR fails to build on 32-bit operating systems running on
        # 64-bit CPUs if CFLAGS happen to contain '-m32' and ABI is
        # *not* set, so we set it here if necessary:
        # (Cf. http://groups.google.com/group/mpir-devel/browse_thread/thread/46ccdc5dfc3485cd#)
        # Note: This code snippet could in principle be moved out of the
        #       Linux branch, but since we already set ABI for other
        #       OSs above (and print an according message), it's here.
        if [ -z "$ABI" ]; then
            echo "int main(){return 0;}" > foo.c
            # Try building and running a 64-bit executable:
            # (Building usually succeeds even on 32-bit systems, unless e.g. a 32-bit
	    # CPU is explicitly selected by CFLAGS, while running does not.)
            if $CC $CFLAGS $CFLAG64 -o foo foo.c 2>/dev/null && ./foo 2>/dev/null; then
                # We can run 64-bit executables.
                # Setting ABI=64 shouldn't be necessary, but shouldn't hurt either.
                echo "Building a 64-bit version of MPIR."
                case "`uname -m`" in
                    ppc64) ABI=mode64;;
                    *)     ABI=64
                esac
            elif $CC $CFLAGS $CFLAG32 -o foo foo.c 2>/dev/null && ./foo 2>/dev/null; then
                # We're on a 32-bit OS which cannot run 64-bit executables.
                echo "Building a 32-bit version of MPIR."
                ABI=32
            else
                # It seems the compiler does not support -m32 nor -m64 (e.g.
                # GCC on Itanium rejects both); do not set ABI at all.
                echo "Your compiler does not support '$CFLAG32' nor '$CFLAG64'.  Leaving ABI unset."
            fi
            rm -f foo foo.c
        fi

        # Work around a bug in GCC 4.7.0 which breaks the build on Itanium CPUs:
        # (Cf. #12765, #12751, and bug URL below.)
        case "`uname -m`-`$CC -dumpversion 2>/dev/null`" in ia64-4.7.*)
            # It's quite unlikely we match other compilers than GCC (e.g. clang) here.
            required_cflags="$required_cflags -O0 -finline-functions -fschedule-insns"
            echo >&2 "Warning: Disabling almost all optimization due to a bug in (at least)"
            echo >&2 "         GCC 4.7.0 on Itanium, which otherwise would break the build."
            echo >&2 "         See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48496"
            echo >&2 "         for current status and further details."
            echo >&2 "         (And please report to e.g. sage-devel in case you feel this bug"
            echo >&2 "          should already be fixed in GCC `$CC -dumpversion`.)"
        esac
        ;; # Linux
    CYGWIN)
        # Nothing special performed (yet).
        ;;
    *) # e.g. AIX or HP-UX
        echo >&2 "Warning: Your platform ($UNAME) isn't yet explicitly supported" \
            "by this MPIR spkg, i.e., by Sage's part of it."
esac

export ABI CFLAGS CXXFLAGS # Partially redundant, but safe(r).
# We don't export CPPFLAGS here, since we don't (have to) modify them.
if [ -n "$required_ldflags" ]; then
    export LDFLAGS # Probably redundant, but safe(r).
fi

###############################################################################
# Now configure MPIR, eventually modifying CFLAGS [further]:
###############################################################################

SAGE_CONF_OPTS="--enable-gmpcompat --enable-shared $SAGE_CONF_OPTS"

# If we're bootstrapping GCC from the GCC spkg, don't build the C++ interface
# and static libraries in the first place (cf. #12782):
if [ "$SAGE_BUILD_TOOLCHAIN" = yes ]; then
    echo "Building a reduced version of MPIR to bootstrap GCC."
    echo "MPIR will later get rebuilt (with the C++ interface and static libraries"
    echo "enabled) using the new compiler."
    SAGE_CONF_OPTS="--disable-cxx --disable-static $SAGE_CONF_OPTS"
else
    # Also build the static library to be used by e.g. ECM:
    echo "Building MPIR with the C++ interface and (also) static libraries."
    SAGE_CONF_OPTS="--enable-cxx --enable-static $SAGE_CONF_OPTS"
fi
# (Further options to 'configure' are added below.)


# Pre-configure MPIR to get the settings it would use if CFLAGS were empty:
echo "Checking what CFLAGS MPIR would use if they were empty..."
if (unset CFLAGS CPPFLAGS CXXFLAGS &&
    ./configure $SAGE_CONF_OPTS $MPIR_EXTRA_OPTS) &>/dev/null;
then
    if get_upstream_selected_cflags mpir.h; then
        mpir_cflags=$upstream_cflags
        mpir_cc=$upstream_cc
        echo "Settings chosen by MPIR when configuring with CFLAGS unset:"
        echo "  CC:      $mpir_cc"
        echo "  CFLAGS:  $mpir_cflags"
    else
        echo >&2 "Warning: Couldn't determine MPIR-selected CFLAGS from 'mpir.h'"
    fi
else
    # We ignore errors in the first place, since we redirected all
    # messages to /dev/null. (The messages can be found in the 'config.log'
    # files if someone really wants to read them.)
    :;
fi
find . -name config.cache -o -name config.status -exec rm -f {} \;

for header in /usr/include/gmp.h /usr/local/include/gmp.h; do
    if get_upstream_selected_cflags $header; then
        system_cflags=upstream_cflags
        system_cc=upstream_cc
        echo "Settings found in $header:"
        echo "  CC:      $upstream_cc"
        echo "  CFLAGS:  $upstream_cflags"
    fi
done

echo "Settings required to properly build MPIR, taking into account SAGE_DEBUG etc.:"
echo "  CFLAGS:  $required_cflags"  # Might be empty.
echo "  LDFLAGS: $required_ldflags" # Might be empty.
echo "  ABI:     $ABI" # Might be empty, or the one specified by the user.
echo "Settings from the \"global\" environment:"
echo "  CC:      $CC" # Set by Sage, maybe overridden by the user.
echo "  CFLAGS:  $user_cflags"
echo "  LDFLAGS: $user_ldflags"
echo "  ABI:     $user_abi"
echo "  (CPP, CPPFLAGS, CXX and CXXFLAGS are listed below; these don't get modified.)"

if [ -z "$user_cflags" ]; then
    # No CFLAGS specified by user => Use either MPIR's, GMP's or our default
    # ones, plus those required by Sage for the package to build properly:
    if [ -n "$mpir_cflags" ]; then
        # Fine. Use upstream settings. MPIR honors '--enable-fat'.
        echo "Using MPIR's settings (plus mandatory ones)."
        CFLAGS="$mpir_cflags $required_cflags"
    elif [ -n "$system_cflags" ] && [ "$system_cc" = "$CC" ] &&
        [ "$SAGE_FAT_BINARY" != yes ];
    then
        # Use system-wide GMP's settings (since compilers match).
        echo "Using the settings from the system-wide GMP installation (plus mandatory ones.)"
        CFLAGS="$system_cflags $required_cflags"
    else # Use spkg's defaults, and add '-march=native' if supported and appropriate.
        echo "Using the spkg's (i.e. Sage's) default (plus mandatory) settings."
        CFLAGS="$default_cflags $required_cflags"
        if [ "$SAGE_FAT_BINARY" != yes ]; then
            CFLAGS="`native_build_cflags_if_supported` $CFLAGS"
        fi
    fi
else
    # CFLAGS were specified by the user, so don't override them (unless
    # necessary) and only add some useful ones to improve code generation:
    echo "Using user-specified settings (overriding defaults), with some additions."
    CFLAGS="$default_cflags $user_cflags $required_cflags"

    # Now add processor-specific flags if appropriate:
    if [ -z "`get_processor_specific_cflags $CFLAGS`" ]; then
        # User didn't specify specific architecture, so try to add such flag(s):
        if [ -n "$mpir_cflags" ]; then
            # Add MPIR's. Honors '--enable-fat'.
            echo "Adding processor-specific options from MPIR."
            CFLAGS="`get_processor_specific_cflags $mpir_cflags` $CFLAGS"
        elif [ -n "$system_cflags" ] && [ "$system_cc" = "$CC" ] &&
            [ "$SAGE_FAT_BINARY" != yes ];
        then
            # Add system-wide GMP's processor-specific settings (since compilers match).
            echo "Adding processor-specific options from the system-wide GMP."
            CFLAGS="`get_processor_specific_cflags $system_cflags` $CFLAGS"
        elif [ "$SAGE_FAT_BINARY" != yes ]; then
            CFLAGS="`native_build_cflags_if_supported` $CFLAGS"
        fi
    else
        # User did specify some processor-specific CFLAGS.
        # We *might* prepend all of MPIR's CFLAGS here in addition,
        # but doing so could raise a conflict.
        # (I'm not aware of any processor-specific flags MPIR uses / writes
        # to gmp.h other than -mcpu, -mtune / -march.)
        :;
    fi
fi

LDFLAGS="$required_ldflags $user_ldflags"

echo "Finally using the following settings:"
echo "  CC=$CC"
echo "  CFLAGS=$CFLAGS"
echo "  CPP=$CPP"
echo "  CPPFLAGS=$CPPFLAGS"
echo "  CXX=$CXX"
echo "  CXXFLAGS=$CXXFLAGS"
echo "  LDFLAGS=$LDFLAGS"
echo "  ABI=$ABI"
echo "(These settings may still get overridden by 'configure' or Makefiles.)"

###############################################################################
# Now really configure MPIR with proper settings:
###############################################################################

# We also add '--libdir="$SAGE_LOCAL/lib"' below, since newer autotools may
# otherwise put the libraries into .../lib64 on 64-bit systems (cf. #12131).

if [ -z "$MPIR_EXTRA_OPTS" ]; then
    echo "Configuring MPIR with the following options:"
    echo "    --prefix=\"$SAGE_LOCAL\" --libdir=\"$SAGE_LOCAL/lib\" $SAGE_CONF_OPTS"
    echo "You can set MPIR_EXTRA_OPTS to pass additional parameters."
else
    echo "Using additional 'configure' options as specified through" \
        "MPIR_EXTRA_OPTS:"
    echo "    $MPIR_EXTRA_OPTS"
    echo "Configuring MPIR with the following options:"
    echo "    --prefix=\"$SAGE_LOCAL\" --libdir=\"$SAGE_LOCAL/lib\" $SAGE_CONF_OPTS $MPIR_EXTRA_OPTS"
fi

./configure --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib" $SAGE_CONF_OPTS $MPIR_EXTRA_OPTS
if [ $? -ne 0 ]; then
    echo >&2 "Error configuring MPIR. (See above for the options passed to it.)"
    exit 1
fi

###############################################################################
# Now build MPIR:
###############################################################################

echo "Now building MPIR..."
$MAKE
if [ $? -ne 0 ]; then
    echo >&2 "Error building MPIR."
    exit 1
fi

echo "Build succeeded."

###############################################################################
# Remove previous installation (if any), *after* a successful build:
###############################################################################

echo "Removing old GMP/MPIR headers..."
rm -f "$SAGE_LOCAL"/include/{gmp,mpir}*.h

# Do NOT delete old GMP/MPIR shared libraries as Sage's versions of libraries
# used by GCC might still refer to them, such that their deletion would break
# GCC inside Sage. (We could perhaps remove libmpir* though.)
if false; then
    echo "Removing old GMP/MPIR libraries..."
    rm -f "$SAGE_LOCAL"/lib/lib{gmp,mpir}*
else
    echo "Not removing old GMP/MPIR shared libraries, as other libraries"
    echo "and executables might still refer to them:"
    ls -l "$SAGE_LOCAL"/lib/lib{gmp,mpir}*.so.*
    echo "(Libraries with the same version number will get updated though.)"
fi

###############################################################################
# Now install MPIR:
###############################################################################

echo "Now installing MPIR..."
# The potential race condition in `make install` was fixed in MPIR 2.1.4.
$MAKE install
if [ $? -ne 0 ]; then
    echo >&2 "Error installing MPIR."
    if [ "$UNAME" != "CYGWIN" ]; then  # On Cygwin an error is not fatal.
        exit 1
    fi
fi

echo
echo "Remember to rebuild the Sage library ('./sage -b') such that it"
echo "will use the new MPIR."
echo "You may also have to (or want to) rebuild other Sage packages"
echo "that use MPIR.  Provided that this MPIR spkg is in 'spkg/standard/',"
echo "you can rebuild all packages depending on MPIR by typing:"
echo "    cd $SAGE_ROOT"
echo "    env SAGE_UPGRADING=yes make"
echo "but note that this will usually take quite a lot of time."
echo
