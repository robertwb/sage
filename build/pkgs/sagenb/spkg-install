#!/usr/bin/env bash
# This file is no longer autogenerated.

# Begin boilerplate

CUR=$PWD

die () {
    echo >&2 "$@"
    exit 1
}

[ -n "$SAGE_LOCAL" ] || die 'Error: $SAGE_LOCAL not set. Source sage-env or run this script from `sage -sh`.'

[ -z "$CPATH" ] || CPATH="$CPATH":
[ -z "$LIBRARY_PATH" ] || LIBRARY_PATH="$LIBRARY_PATH":
export CPATH="$CPATH""$SAGE_LOCAL"/include
export LIBRARY_PATH="$LIBRARY_PATH""$SAGE_LOCAL"/lib

# note: the -D_XOPEN_SOURCE=500 is to fix build errors in Twisted 12.1 on
# Solaris. See http://trac.sagemath.org/sage_trac/ticket/11080#comment:314 and
# the subsequent few comments.
export CPPFLAGS="-I$SAGE_LOCAL/include -D_XOPEN_SOURCE=500 $CPPFLAGS"
export LDFLAGS="-L$SAGE_LOCAL/lib $LDFLAGS"

if [ $SAGE64 = "yes" ]; then
    echo "Building with extra 64-bit flags for MacOS X and Open Solaris."
    if [ -z $CFLAG64 ]; then
        CFLAG64=-m64
    fi
    export CFLAGS="$CFLAGS $CFLAG64"
    export CPPFLAGS="$CPPFLAGS $CFLAG64"
    export CXXFLAGS="$CXXFLAGS $CFLAG64"
    export LDFLAGS="$LDFLAGS $CFLAG64"
fi

# End boilerplate



# Install dependencies
for PKG in $(cat src/install_order); do
    easy_install -H None "src/$PKG" || die "Error installing $PKG !"
done
BASENAME=$(ls -1 src | grep sagenb-)
BASENAME=${BASENAME%.tar.gz}

# Install sagenb into $SAGE_ROOT/devel/
#
# TODO: let sagenb sit in site_packages like any other component of Sage other
# than the Sage library; if the user wants to develop sagenb, they should set
# it up in an accessible directory themselves:
#easy_install -H None -f src "sagenb" || die "Error installing sagenb !"

# Extract sagenb into $SAGE_ROOT/devel and set up the symlink
mkdir -p "$SAGE_ROOT/devel"
cd "$SAGE_ROOT/devel"
if [ -d "$SAGE_ROOT/devel/sagenb-main" ]; then
    echo "Moving old SageNB package to '$SAGE_ROOT/devel/sagenb-main-old'..."
    rm -rf "$SAGE_ROOT/devel/sagenb-main-old"
    mv "$SAGE_ROOT/devel/sagenb-main" "$SAGE_ROOT/devel/sagenb-main-old" ||
        die "Error moving the old 'sagenb-main' directory."
fi
tar xzf "$CUR/src/$BASENAME.tar.gz" || die "Error: cannot extract $BASENAME.tar.gz"
mv $BASENAME sagenb-main
rm -f "$SAGE_ROOT/devel/sagenb"
ln -s sagenb-main "$SAGE_ROOT/devel/sagenb"

# Install sagenb git repo, if it has been packaged
if [ -d "$CUR/src/sagenb.git" ]; then
    mv "$CUR/src/sagenb.git" ./sagenb/.git
fi

# Install sagenb into Sage's Python
# Note: We use --egg-path for relocatability
cd sagenb
python setup.py develop --egg-path '../../../../devel/sagenb' ||
    die "Error installing sagenb via setup.py develop"

# Fix some relocatability issues - see #10176, possibly other tickets
cd "$SAGE_ROOT/local/lib/python/site-packages"
# Use >/dev/null instead of grep -q (which doesn't work on Solaris)
if ! grep sagenb easy-install.pth > /dev/null ; then
    # Ugly work-around, we haven't found the real cause yet (see #10176):
    echo "No sagenb path found in 'easy-install.pth'"'!'
    echo "Adding relative sagenb path to 'easy-install.pth'..."
    sed -e '$ i \../../../../devel/sagenb' easy-install.pth > easy-install.pth.$$ ||
        die "Error adding relative sagenb path to 'easy-install.pth'."
else
    echo "Making sagenb path in 'easy-install.pth' relative..."
    sed 's/^.*sagenb.*$/..\/..\/..\/..\/devel\/sagenb/' easy-install.pth > easy-install.pth.$$ ||
        die "Error patching 'easy-install.pth' to have relative path to SageNB."
fi
mv -f easy-install.pth.$$ easy-install.pth ||
    die "Error overwriting original 'easy-install.pth'."

# Remove old reference manual to fix upgrading from sage-5.1 or
# earlier.  Some old .rst files might try to import modules which no
# longer exist, see #13405.
rm -rf "$SAGE_ROOT/devel/sage/doc/en/reference/sagenb"
