#!/usr/bin/env bash

###########################################
## Singular
###########################################

SRC=`pwd`/src
SHARED=`pwd`/shared

if [ "$SAGE_LOCAL" = "" ]; then
   echo "SAGE_LOCAL undefined ... exiting";
   echo "Maybe run 'sage -sh'?"
   exit 1
fi

# we set LD=ld which is troublesome on OSX. Singular figures out LD by
# itself pretty well so we unset it here.
unset LD

# see track ticket #48 -- do this to avoid subtle bug that Rob Gross
# found in build process
unset TMPDIR

# disable the dynamic kernel, except on Linux
if [ "$UNAME" = "Linux" ]; then
     DYNAMIC_KERNEL=""
else
     DYNAMIC_KERNEL="--without-dynamic-kernel"
fi

if [ "$UNAME" = "Darwin" ]; then
     MACOSX_DEPLOYMENT_TARGET=10.4
     export MACOSX_DEPLOYMENT_TARGET
fi

if [ "x$SAGE_DEBUG" = "xyes" ]; then
    ENABLE_DEBUG="--enable-debug"
    CXXFLAGS="$CXXFLAGS -O0 -g"
    CFLAGS="$CFLAGS -O0 -g"
else
    ENABLE_DEBUG="--disable-debug"

    # By default, parts of Singular are compiled with -O2 and parts
    # with -O3.  If we do set any CFLAGS, this always overrides the
    # default CFLAGS set by upstream.  In order to be compatible, we
    # set the optimization to -O2.
    # Increasing the optimization level to -O3 has caused various
    # problems in the past either with specific compilers or on specific
    # platforms.
    OPTIMIZATION_FLAGS="-O2"

    # To work around problems with old (4.0.x) gcc versions on older
    # Mac OS X systems, we actually use -O3 for such versions of gcc.
    # When compiling with -O1 or -O2, we get linker errors related to
    # restFP/saveFP, see Sage Trac #11278.
    if [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = xGCC ] ; then
        if $CC -dumpversion 2>/dev/null |grep >/dev/null '^4\.0\.' ; then
            OPTIMIZATION_FLAGS="-O3"
        fi
    fi

    CXXFLAGS="$CXXFLAGS $OPTIMIZATION_FLAGS -g"
    CFLAGS="$CFLAGS $OPTIMIZATION_FLAGS -g"
fi

if [ "x$SAGE64" = xyes ]; then
    echo "Building a 64-bit version of Singular"
    CFLAGS="$CFLAGS -m64 "
    CXXFLAGS="$CXXFLAGS -m64"
    CPPFLAGS="$CPPFLAGS -m64"
    LDFLAGS="$LDFLAGS -m64 "; export LDFLAGS
    if [ "x`uname`" = xSunOS ] ; then
      CC="$CC -m64"
      export CC
      CXX="$CXX -m64"
      export CXX
    fi
fi

CPPFLAGS="-I$SAGE_LOCAL/include $CPPFLAGS"

# we are building everything fPIC, this might impose a slight
# performance hit, need to evaluate:

CXXFLAGS="$CXXFLAGS -fPIC"
CFLAGS="$CFLAGS -fPIC"


export CXXFLAGS
export CFLAGS
export CPPFLAGS

clean_headers()
{
    rm -rf $SAGE_LOCAL/include/singular
}

apply_patches()
{
    pushd $SRC

    patches="assert.h.diff sing_win.cc.diff Minor.h.patch os_x_ppc.patch Singular.configure.patch make_parallel.patch Singular.Makefile.in.shared.patch"

    if [ "$UNAME" = "CYGWIN" ]; then
        patches="$patches IntegerProgramming-Makefile.in.diff"
    fi

    if [ "x$SAGE_DEBUG" = "xyes" ]; then
        patches="$patches kernel.Makefile.in.debug.patch Singular.Makefile.in.debug.patch"
    fi

    for patch in $patches; do
        if ! patch -p1 <../patches/$patch; then
            echo >&2 "Error: patch $patch failed to apply."
            exit 1
        fi
    done

    popd
}

distclean()
{
    cd $SRC
    $MAKE distclean
    rm $SAGE_LOCAL/bin/Singular*
    find . -name *.dl_o -exec rm \{\} \;
    find . -name *.o -exec rm \{\} \;
    find . -name *.og -exec rm \{\} \;
    find . -name *.so -exec rm \{\} \;
    find . -name *.a -exec rm \{\} \;
    rm -f $SAGE_LOCAL/include/factory.h
    rm -f $SAGE_LOCAL/include/factoryconf.h
}

config()
{
    cd $SRC
    ./configure --prefix="$SAGE_LOCAL" \
                --exec-prefix="$SAGE_LOCAL" \
                --bindir="$SAGE_LOCAL"/bin \
                --libdir="$SAGE_LOCAL"/lib \
                --libexecdir="$SAGE_LOCAL"/lib \
                --with-apint=gmp \
                --with-gmp="$SAGE_LOCAL" \
                --with-ntl="$SAGE_LOCAL" \
                --with-NTL \
                --without-MP \
                --without-lex \
                --without-bison \
                --without-Boost \
                --enable-gmp="$SAGE_LOCAL" \
                --enable-Singular \
                --enable-factory \
                --enable-libfac \
                --enable-IntegerProgramming \
                --disable-doc  \
                $DYNAMIC_KERNEL \
                --with-malloc=system \
                $ENABLE_DEBUG

    if [ $? -ne 0 ]; then
        echo "Unable to configure Singular."
        exit 1
    fi
}

build_singular()
{
    cd $SRC

    $MAKE # Singular + rest

    if [ $? -ne 0 ]; then
        echo "Unable to build Singular."
        exit 1
    fi

    cd "$SAGE_LOCAL"
    if [ -d LIB -a ! -h LIB ]; then
        echo "skipping since filenames not case sensitive."
    else
        rm -f LIB
        if [ "$UNAME" != "Darwin" ]; then
            $LN -sf lib LIB
        fi
    fi

    cd $SRC
    if [ $? -ne 0 ]; then
        echo "Unable to change to directory $SRC"
        exit 1
    fi

    $MAKE slibdir="$SAGE_LOCAL/share/singular" install-nolns

    if [ $? -ne 0 ]; then
        echo "Unable to install Singular."
        exit 1
    fi

}


create_singular_script()
{
    # The Singular build annoyingly puts an absolute link to the Singular
    # script in $SAGE_LOCAL/bin/.  So we delete it and make it relative.
    cd $SAGE_LOCAL/bin
    rm -f Singular singular

    # The singular executable is called somewhat randomly depending
    # on platform.  Also, making a symlink doesn't work, since on
    # Windows XP symlinks are sometimes (?) forced to be absolute,
    # so this would break relocatability.
    # (In any case, "ln -s Singular-* Singular" in Cygwin makes an
    #  absolute symlink.  Somehow the gap symlink is relative though...)
    /bin/ls Singular-*
    if [ $? -ne 0 ]; then
        echo "The Singular binary was not installed in $SAGE_ROOT/local/bin/ as it should have been."
        exit 1
    fi

    echo "#!/bin/sh" > Singular
    echo "`/bin/ls Singular-* | tail -1` \$*" >> Singular
    $CHMOD +x Singular

    # Lower case version is convenient.
    $CP -p -f Singular singular

    $LN -sf Singular sage_singular
}

build_libsingular()
{
    cd $SRC
    if [ $? -ne 0 ]; then
        echo "Unable to change to directory $SRC"
        exit 1
    fi

    # we really need DLIBSINGULAR, so we have to rebuild

    OLD_CFLAGS=$CFLAGS
    export CFLAGS="$CFLAGS -DLIBSINGULAR"
    OLD_CXXFLAGS=$CXXFLAGS
    export CXXFLAGS="$CXXFLAGS -DLIBSINGULAR"

    config

    $MAKE clean
    $MAKE install-libsingular

    if [ $? -ne 0 ]; then
        echo "Unable to install libsingular."
        exit 1
    fi
    export CFLAGS="$OLD_CFLAGS"
    export CXXFLAGS="$OLD_CXXFLAGS"
}

build_factory()
{
    cd $SRC/factory

    $MAKE distclean

    ./configure --prefix="$SAGE_LOCAL" \
                --includedir="$SAGE_LOCAL/include/factory" \
                --exec-prefix="$SAGE_LOCAL" \
                --bindir="$SAGE_LOCAL"/bin \
                --libdir="$SAGE_LOCAL"/lib \
                --libexecdir="$SAGE_LOCAL"/lib \
                --with-apint=gmp \
                --with-gmp="$SAGE_LOCAL" \
                --with-ntl="$SAGE_LOCAL" \
                --with-NTL \
                --enable-gmp="$SAGE_LOCAL" \
                "$ENABLE_DEBUG"

    if [ $? -ne 0 ]; then
        echo "Error configuring the standalone factory."
        exit 1
    fi

    $MAKE
    if [ $? -ne 0 ]; then
        echo "Error building the standalone factory."
        exit 1
    fi

    $MAKE install
    if [ $? -ne 0 ]; then
        echo "Error installing the standalone factory."
        exit 1
    fi

    $CP -p factoryconf.h "$SAGE_LOCAL"/include/
    if [ $? -ne 0 ]; then
        echo "Error copying factory/factoryconf.h to include directory."
    fi
}

build_libfac()
{
    cd $SRC/libfac
    if [ $? -ne 0 ]; then
        echo "Error changing to directory $SRC/libfac"
        exit 1
    fi

    $MAKE distclean

    ./configure --prefix="$SAGE_LOCAL" \
                --exec-prefix="$SAGE_LOCAL" \
                --bindir="$SAGE_LOCAL"/bin \
                --libdir="$SAGE_LOCAL"/lib \
                --libexecdir="$SAGE_LOCAL"/lib \
                --with-apint=gmp \
                --with-gmp="$SAGE_LOCAL" \
                --with-ntl="$SAGE_LOCAL" \
                --with-NTL \
                --enable-factory \
                --enable-libfac \
                --enable-omalloc \
                --enable-gmp="$SAGE_LOCAL" \
                "$ENABLE_DEBUG"

    if [ $? -ne 0 ]; then
        echo "Error configuring libfac."
        exit 1
    fi

    make

    if [ $? -ne 0 ]; then
        echo "Error building libfac."
        exit 1
    fi

    $MAKE install

    if [ $? -ne 0 ]; then
        echo "Error installing libfac."
        exit 1
    fi
}

install_docs()
{
    $CP -p "$SHARED/singular.hlp" "$SHARED/singular.idx" "$SAGE_LOCAL/share/singular/"
    if [ $? -ne 0 ]; then
        echo "Error installing documentation"
        exit 1
    fi
}

build()
{
    for i in clean_headers apply_patches distclean config build_singular build_libsingular build_factory build_libfac create_singular_script install_docs ; do
    $i
    if [ $? -ne 0 ]; then
        echo "Error building Singular at stage '$i'."
        exit 1
    fi
    done
}
build
