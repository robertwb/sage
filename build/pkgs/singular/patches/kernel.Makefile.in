#################################################################
###
### Makefile for Singular
###
#################################################################

SHELL		= /bin/sh

##
## version
##
SINGULAR_VERSION	= @SINGULAR_VERSION@
SINGULAR		= @SINGULAR@
SINGUNAME		= @SINGUNAME@
##
## various paths
##
srcdir		= @srcdir@
prefix 		= @prefix@
exec_prefix 	= @exec_prefix@
libdir 		= @libdir@
# program executable goes here
bindir		= @bindir@
# includes are taken from here
includedir	= @includedir@
install_bindir  = ${install_prefix}/${SINGUNAME}

##
## various programs
##
@SET_MAKE@
CC		= @CC@
LD              = @LD@
CXX		= @CXX@
LEX		= @LEX@
PERL		= @PERL@
BISON		= bison
INSTALL		= @INSTALL@
INSTALL_PROGRAM	= @INSTALL_PROGRAM@
INSTALL_DATA	= @INSTALL_DATA@
MKINSTALLDIRS   = ./mkinstalldirs
LN_S		= @LN_S@

##
## compiler and linker options
##
PIPE		= @PIPE@
CFLAGS		= @CFLAGS@ ${PIPE}
CXXFLAGS	= @CXXFLAGS@ ${PIPE}
CXXTEMPLFLAGS	= @CXXTEMPLFLAGS@
CPPFLAGS	= -I${srcdir} -I../omalloc @CPPFLAGS@
DEFS		= -DNDEBUG -DOM_NDEBUG -D@SING_UNAME@ @DEFS@
LDFLAGS		= @LDFLAGS@
LD_DYN_FLAGS	= @LD_DYN_FLAGS@
SFLAGS		= @SFLAGS@
SLDFLAGS	= @SLDFLAGS@

LD_LIBC	        = -lc
STATIC_LDFLAGS	= @STATIC_LDFLAGS@
# under cygwin, do not explicitly link against -lm, for it is the cygwin
# lib -- if you really want to do this, use -lm as the _last_ thing on the
# arguments to link
ifneq ($(SINGUNAME),ix86-Win)
LIBS		= -lm @NEED_LIBS@
else
# for the 2-0-* versions under Windows, we don't need gdbm, readline and ncurses
LIBS		= -lsingfac -lsingcf -lntl -lgmp -lreadline -lncurses -lomalloc_ndebug
#LIBS		= -lsingfac -lsingcf -lgmp
endif
MP_LIBS		= @MP_LIBS@

ifdef LD_STATIC
LDFLAGS  := ${STATIC_LDFLAGS} ${LDFLAGS}
LIBS := ${MP_LIBS} ${LIBS}
DL_KERNEL =
else
LDFLAGS  := ${LD_DYN_FLAGS} ${LDFLAGS}
DL_KERNEL	= @DL_KERNEL@
endif

# CXXFLAGS =  -g -Wall -Wno-unused
# CFLAGS =  -g -Wall -Wno-unused
##
## End configuration dependend stuff
#################################################################

###
### file sets
###

# normal C++ source files
CXXSOURCES=clapconv.cc \
    clapsing.cc mminit.cc\
    febase.cc feread.cc feResource.cc \
    ffields.cc hdegree.cc hilb.cc hutil.cc \
    sca.cc gring.cc gr_kstd2.cc\
    ideals.cc intvec.cc int64vec.cc \
    khstd.cc kstdfac.cc \
    kstd1.cc kstd2.cc kutil.cc \
    longalg.cc longrat.cc longrat0.cc \
    maps.cc matpol.cc misc.cc gnumpfl.cc gnumpc.cc \
    rmodulo2m.cc rmodulon.cc rintegers.cc \
    modulop.cc mpr_complex.cc sparsmat.cc fast_maps.cc \
    fglmzero.cc fglmvec.cc fglmgauss.cc fglmhom.cc fglmcomb.cc \
    numbers.cc polys.cc p_polys.cc polys0.cc polys1.cc polys-impl.cc \
    ring.cc shortfl.cc kspoly.cc \
    syz.cc syz0.cc syz1.cc syz2.cc syz3.cc\
    timer.cc weight.cc \
    GMPrat.cc multicnt.cc npolygon.cc semic.cc spectrum.cc splist.cc \
    mod_raw.cc walkProc.cc walkMain.cc walkSupport.cc\
    eigenval.cc units.cc kbuckets.cc sbuckets.cc\
    mpr_inout.cc mpr_base.cc mpr_numeric.cc \
    prCopy.cc p_Mult_q.cc \
    pDebug.cc pInline2.cc pInline1.cc pInline0.cc \
    pShallowCopyDelete.cc fast_mult.cc digitech.cc\
    tgb.cc tgbgauss.cc ringgb.cc ratgring.cc shiftgb.cc

# normal C source files
CSOURCES=weight0.c fegetopt.c fereadl.c dError.c mmstd.c

# C++ sources which are used if part of the kernel are dynamically linked
ifeq ($(DL_KERNEL),1)
DL_KERNEL_SOURCES=p_Procs_Dynamic.cc
else
DL_KERNEL_SOURCES=
endif

# C++ sources which are used for dynamic libraries if part of the kernel is
# dynamically linked
DL_LIB_SOURCES=p_Procs_Lib.cc

# C++ sources which are used if no parts of the kernel are dynamically linked
STATIC_SOURCES=p_Procs_Static.cc

# special C++ source files (need extra compiling and/or linking), for which
# dependencies should be generated
ESOURCES=mmalloc.cc $(DL_KERNEL_SOURCES) $(DL_LIB_SOURCES) $(STATIC_SOURCES)

SOURCES=${CSOURCES} ${CXXSOURCES} \
	prCopyTemplate.cc \
        p_Delete__T.cc p_ShallowCopyDelete__T.cc \
        p_Copy__T.cc p_Mult_nn__T.cc  pp_Mult_nn__T.cc \
        pp_Mult_mm__T.cc p_Mult_mm__T.cc \
        p_Minus_mm_Mult_qq__T.cc p_Add_q__T.cc \
	p_Neg__T.cc pp_Mult_Coeff_mm_DivSelect__T.cc \
	pp_Mult_Coeff_mm_DivSelectMult__T.cc \
	p_Merge_q__T.cc pp_Mult_mm_Noether__T.cc\
	p_kBucketSetLm__T.cc \
	kInline.cc

HEADERS=hutil.h stairc.h ideals.h \
	longalg.h structs.h intvec.h int64vec.h longrat.h \
	numbers.h stype.h clapconv.h maps.h \
	clapsing.h matpol.h polys.h p_polys.h syz.h \
	ring.h timer.h dError.h fast_maps.h \
	febase.h shortfl.h mpr_complex.h mpr_global.h \
	sca.h gring.h walkProc.h walkMain.h walkSupport.h\
	ffields.h khstd.h sparsmat.h gnumpfl.h gnumpc.h \
	fglm.h kstd1.h \
	rmodulo2m.h rmodulon.h rintegers.h \
        modulop.h sing_dbm.h weight.h \
	fglmgauss.h fglmvec.h \
	kstdfac.h kmatrix.h\
	kutil.h \
	dbm_sl.h polys-impl.h \
        GMPrat.h multicnt.h npolygon.h semic.h spectrum.h splist.h multicnt.h \
	eigenval.h units.h mod_raw.h kbuckets.h sbuckets.h\
	mpr_global.h mpr_inout.h mpr_base.h mpr_numeric.h \
	fegetopt.h distrib.h \
	ratgring.h shiftgb.h prCopy.h prCopyMacros.h \
        p_MemAdd.h p_MemCopy.h p_MemCmp.h p_Numbers.h \
        pInline2.h pInline1.h pInline0.h mmalloc.h \
        omSingularConfig.h pShallowCopyDelete.h \
	p_Procs_Dynamic.h p_Procs_Impl.h p_Procs_Set.h \
	p_Procs.h p_Procs_Static.h p_Mult_q.h

DISTFILES=${SOURCES} ${HEADERS} ${ESOURCES} \
        Makefile.in configure.in configure \
	mod2.h.in testgh install-sh mkinstalldirs \
	check_aso.pl prCopy.pl

OBJS := $(CXXSOURCES:.cc=.o) $(CSOURCES:.c=.o)
OBJS2 := $(ESOURCES:.cc=.o)
OBJSG2 := $(ESOURCES:.cc=.og)

P_PROCS_MODULES = FieldZp FieldIndep FieldQ FieldGeneral

ifeq ($(DL_KERNEL),1)
OBJS 	:= $(OBJS) $(DL_KERNEL_SOURCES:.cc=.o)
DL_LIBS := $(P_PROCS_MODULES:%=p_Procs_%.so)
else
ifndef LD_STATIC
LIBS := $(MP_LIBS) $(LIBS)
endif
OBJS := $(OBJS) $(STATIC_SOURCES:.cc=.o)
DL_LIBS=
endif

#
# Singular libraries which go into distribution
# MAKE SURE THAT THIS IS UP_TO_DATE
#
SLIBS = COPYING \
	ainvar.lib   algebra.lib   all.lib       brnoeth.lib    classify.lib \
        deform.lib   elim.lib      equising.lib  finvar.lib     gaussman.lib \
        general.lib  graphics.lib  groups.lib    hnoether.lib   homolog.lib  \
	inout.lib    intprog.lib   latex.lib     linalg.lib     makedbm.lib  \
	matrix.lib   mondromy.lib  mprimdec.lib \
        mregular.lib normal.lib    ntsolve.lib   paramet.lib \
        poly.lib     presolve.lib  primdec.lib   primitiv.lib   qhmoduli.lib \
        random.lib   reesclos.lib  ring.lib      rinvar.lib     sing.lib \
        solve.lib    spcurve.lib   spectrum.lib  standard.lib   stratify.lib \
        surf.lib     teachstd.lib  template.lib  toric.lib      triang.lib \
	weierst.lib  zeroset.lib   help.cnf

SLIBS_FILES = $(addprefix LIB/,${SLIBS})

GFTABLES = $(wildcard LIB/gftables/[1-9]*)

##
## Build Targets
##
.cc.o:
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} -c $<
.c.o:
	${CC} ${CFLAGS} ${CPPFLAGS} ${DEFS} -c $<

# building objects for shared libraries
p_Procs_Lib_%.dl_o : p_Procs_Lib.cc p_Procs_Dynamic.o
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_o : %.cc
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -c $< -o $@

DL_TAILG=\"sog\"
DL_TAILP=\"sop\"
DL_TAILB=\"sob\"
DL_TAILT=\"sot\"
DL_TAILA=\"soa\"


ifeq ($(DL_KERNEL),1)

OBJG := $(OBJG) $(DL_KERNEL_SOURCES:.cc=.og)
DL_LIBSG := $(P_PROCS_MODULES:%=p_Procs_%.sog)

OBJP := $(OBJP) $(DL_KERNEL_SOURCES:.cc=.op)
DL_LIBSP := $(P_PROCS_MODULES:%=p_Procs_%.sop)

OBJB := $(OBJB) $(DL_KERNEL_SOURCES:.cc=.ob)
DL_LIBSB := $(P_PROCS_MODULES:%=p_Procs_%.sob)

OBJT := $(OBJT) $(DL_KERNEL_SOURCES:.cc=.ot)
DL_LIBST := $(P_PROCS_MODULES:%=p_Procs_%.sot)

OBJA := $(OBJA) $(DL_KERNEL_SOURCES:.cc=.oa)
DL_LIBSA := $(P_PROCS_MODULES:%=p_Procs_%.soa)

else

OBJG := $(OBJG) $(STATIC_SOURCES:.cc=.og)
DL_LIBSG=

OBJP := $(OBJP) $(STATIC_SOURCES:.cc=.op)
DL_LIBSP=

OBJB := $(OBJB) $(STATIC_SOURCES:.cc=.ob)
DL_LIBSB=

OBJT := $(OBJT) $(STATIC_SOURCES:.cc=.ot)
DL_LIBST=

OBJA := $(OBJA) $(STATIC_SOURCES:.cc=.oa)
DL_LIBST=

endif

all:	kversion.h libkernel.a libkernel-g.a ${DL_LIBS} ${DL_LIBSG} ${OBJS2} ${OBJSG2}

libkernel.a: ${OBJS}
	-rm -f libkernel.a
	ar cr $@ $^

p_Procs_Lib.o: p_Procs_Lib.inc

kversion.h: ${SOURCES} ${HEADERS} Makefile.in mod2.h.in \
           configure.in
	echo "#define feVersionId0 "  `date '+%Y%m%d%H'` >kversion.h

# Hmm compiling with -fomit-frame-pointer resulted in access violation
# under cygwin
prCopy.o: prCopy.inc

prCopy.inc : prCopyMacros.h prCopyTemplate.cc prCopy.pl
	$(PERL) prCopy.pl > prCopy.inc

# additional dependencies for p_Procs_[Static|Dynamic|Lib].cc
p_Procs_Static.o: p_Procs_Static.inc
p_Procs_Static.inc: p_Procs_Static.h
p_Procs_Dynamic.o p_Procs_Lib.o: p_Procs_Dynamic.inc
p_Procs_Dynamic.inc p_Procs_Lib.inc: p_Procs_Dynamic.h

# here is how p_Procs_[Static|Dynamic].inc is generated
p_Procs_%.inc: p_Procs_Generate.cc p_Procs_Impl.h mod2.h
	$(CXX) -g -Dp_Procs_$* p_Procs_Generate.cc -o p_Procs_$*
	./p_Procs_$* > p_Procs_$*.inc
	-rm -f p_Procs_$* p_Procs_$*.exe

p_Procs_%.so: p_Procs_Lib_%.dl_o
	$(LD) ${SLDFLAGS} -o $@ $^

##
## install targets
##
install-nolns: install

install-libsingular:
	${MKINSTALLDIRS} ${includedir}/singular
	${INSTALL} *.h ${includedir}/singular

install: all installbin

installbin: ${DL_LIBS} ${DL_LIBSG}
	${MKINSTALLDIRS} ${bindir}
	- ranlib libkernel.a
	- ranlib libkernel-g.a
ifeq (,${DL_LIBS})
else

ifeq (,${DL_LIBSG})
else
	-${INSTALL_PROGRAM} ${DL_LIBS} ${DL_LIBSG} ${bindir}
	-${INSTALL_PROGRAM} ${DL_LIBS} ${DL_LIBSG} ../Singular
endif
endif


install-bindist: ${DL_LIBS} libkernel.a
	${MKINSTALLDIRS} ${bindir}
ifeq (,${DL_LIBS})
else
	-${INSTALL_PROGRAM} ${DL_LIBS} ${bindir}
endif

# compatibility

install-bindist-plural: install-bindist

##
## clean targest
##
mostlyclean:
	-rm -f p_Procs_*.inc
	-rm -f *.o *.og core *.op *.ob *.ot *.od p_Procs *.oa *.dl_o* *.so*

clean: mostlyclean
	-rm -f *.bak *.d *.dd depend

distclean: clean
	-rm -f *~ .\#* kversion.h
	-rm -f mod2.h Makefile TAGS* tags config.status config.cache config.log

srcclean:
	@echo "This command is intended for maintainers to use;"
	@echo "Rebuilding the deleted files requires flex"
	@echo "bison, perl"

maintainer-clean: distclean srcclean
	@echo "This command is intended for maintainers to use;"
	@echo "Rebuilding the deleted files requires flex"
	@echo "bison, perl and autoconf"
	-rm configure

##
## miscellanous targets
##

TAGS:   ${SOURCES} ${ESOURCES} ${HEADERS}
	etags ${SOURCES} ${ESOURCES} ${HEADERS}

tags:
	ctags *.y *.l *.c *.h *.cc *.inc

echoLIBS:
	@echo ${SLIBS}

##
## Below here is stuff for developpers
#################################################################


##
## .og files for having -O and -g object versions available at the same time
##

OBJG1 := $(CXXSOURCES:.cc=.og)
OBJG2 := $(CSOURCES:.c=.og)

OBJP1 := $(CXXSOURCES:.cc=.op)
OBJP2 := $(CSOURCES:.c=.op)

OBJB1 := $(CXXSOURCES:.cc=.ob)
OBJB2 := $(CSOURCES:.c=.ob)

OBJT1 := $(CXXSOURCES:.cc=.ot)
OBJT2 := $(CSOURCES:.c=.ot)

OBJA1 := $(CXXSOURCES:.cc=.oa)
OBJA2 := $(CSOURCES:.c=.oa)


OBJG=$(OBJG1) $(OBJG2)
OBJP=$(OBJP1) $(OBJP2)
OBJB=$(OBJB1) $(OBJB2)
OBJT=$(OBJT1) $(OBJT2)
OBJA=$(OBJA1) $(OBJA2)

ifeq ($(DL_KERNEL),1)
OBJG 	:= $(OBJG) $(DL_KERNEL_SOURCES:.cc=.og)
else
OBJG := $(OBJG) $(STATIC_SOURCES:.cc=.og)
endif

##
## compiler and linker options for debug version
##

CCG		= ${CC}
CXXG		= ${CXX}
CXXM		= gcc -MM -MG -DGENERATE_DEPEND
CCM		= gcc -MM -MG -DGENERATE_DEPEND

CFLAGSG		= -g ${PIPE}
CXXFLAGSG	= -g ${PIPE}
CXXTEMPLFLAGSG	= -fno-implicit-templates
DEFSG		= -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILG)

##
## Debug Targets
##

p_Procs_%.sog: p_Procs_Lib_%.dl_og
	${CXXG} ${CXXFLAGSG} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_og : p_Procs_Lib.cc  p_Procs_Dynamic.og
	${CXXG} ${CXXFLAGSG} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSG} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_og: %.cc
	${CXXG} ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} ${SFLAGS} -c $< -o $@

%.og: %.cc
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

$(OBJG2) : %.og: %.c
	$(CCG)  ${CFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

libkernel-g.a: ${OBJG}
	-rm -f libkernel-g.a
	ar cr $@ $^

##
## compiler and linker options for profile version
##

CCP		= gcc
CXXP		= gcc

CFLAGSP		= -pg -O3 ${PIPE}
CXXFLAGSP	= -pg -O3 ${PIPE}
CXXTEMPLFLAGSP	= -fno-implicit-templates
DEFSP		= -DNDEBUG -DOM_NDEBUG -DDO_PROFILE -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILP)
LDFLAGSP	= -static @LDFLAGS@

CFLAGSB		= -g -O3 ${PIPE}
CXXFLAGSB	= -g -O3 ${PIPE}
CXXTEMPLFLAGSB	= -fno-implicit-templates
DEFSB		= -D@SING_UNAME@ -DOM_NDEBUG -DNDEBUG @DEFS@ -DDL_TAIL=$(DL_TAILB)
LDFLAGSB	= -static @LDFLAGS@

# bprof object  file to link with
BPROFOBJ	= /usr/local/lib/bmon.o

DEFST           = -DNO_INLINE -DNDEBUG -D@SING_UNAME@ -DOM_TRACK=2 -DOM_CHECK=0 @DEFS@ -DDL_TAIL=$(DL_TAILT)
LDFLAGST        = @LDFLAGS@
CFLAGST		= -g  -O2 -w ${PIPE}
CXXFLAGST	= -g  -O2 -w ${PIPE}

##
## op and ob files for gprof and bprof, ot for mtrack, oc for OMCHECK=1
##


##
## profile targets
##

## for gprof
p_Procs_%.sop: p_Procs_Lib_%.dl_op
	${CXXP} ${CXXFLAGSP} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_op : p_Procs_Lib.cc p_Procs_Dynamic.op
	${CXXP} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_op: %.cc
	${CXXP} ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSP} ${SFLAGS} -c $< -o $@


%.op: %.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGSP} ${CPPFLAGS} ${DEFSP} -c $< -o $@

$(OBJP2) : %.op: %.c
	$(CCP)  ${CFLAGSP} ${CPPFLAGS} ${DEFSP} -c $< -o $@

## for bprof
p_Procs_%.sob: p_Procs_Lib_%.dl_ob
	${CXXP} ${CXXFLAGSB} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_ob : p_Procs_Lib.cc  p_Procs_Dynamic.ob
	${CXXP} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_ob: %.cc
	${CXXP} ${CXXFLAGSB} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} ${SFLAGS} -c $< -o $@

%.ob: %.cc
	$(CXXP) ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} -c $< -o $@

$(OBJB2) : %.ob: %.c
	$(CCP)  ${CFLAGSP} ${CPPFLAGS} ${DEFSB} -c $< -o $@

iparith.ob: iparith.inc iparith.cc
	$(CXXP)  ${CXXFLAGSP} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSB} -c iparith.cc -o iparith.ob

#
# for mtrack
#
p_Procs_%.sot: p_Procs_Lib_%.dl_ot
	${CXXP} ${CXXFLAGST} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_ot : p_Procs_Lib.cc p_Procs_Dynamic.ot
	${CXXP} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_ot: %.cc
	${CXXP} ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} ${SFLAGS} -c $< -o $@

%.ot: %.cc
	$(CXXP) ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} -c $< -o $@

$(OBJT2) : %.ot: %.c
	$(CCP)  ${CFLAGST} ${CPPFLAGS} ${DEFST} -c $< -o $@

iparith.ot: iparith.inc iparith.cc
	$(CXXP)  ${CXXFLAGST} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFST} -c iparith.cc -o iparith.ot

#
# for Singulara
#
DEFSA = -DOM_CHECK=1 -DHAVE_ASSUME -DNDEBUG -D@SING_UNAME@ @DEFS@ -DDL_TAIL=$(DL_TAILA)
CFLAGSA		= -g  -O -Wall -Wno-unused ${PIPE}
CXXFLAGSA	= -g  -O -Wall -Wno-unused ${PIPE}

p_Procs_%.soa: p_Procs_Lib_%.dl_oa
	${CXX} ${CXXFLAGSA} ${SFLAGS} ${SLDFLAGS} $< -o $@

p_Procs_Lib_%.dl_oa : p_Procs_Lib.cc p_Procs_Dynamic.oa
	${CXX} ${CXXFLAGS} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFS} ${SFLAGS} -Dp_Procs_$* -c $< -o $@

%.dl_oa: %.cc
	${CXX} ${CXXFLAGSA} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSA} ${SFLAGS} -c $< -o $@

%.oa: %.cc
	$(CXX) ${CXXFLAGSA} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSA} -c $< -o $@

$(OBJA2) : %.oa: %.c
	$(CC)  ${CFLAGSA} ${CPPFLAGS} ${DEFSA} -c $< -o $@

iparith.oa: iparith.inc iparith.cc
	$(CXX)  ${CXXFLAGSA} ${CXXTEMPLFLAGS} ${CPPFLAGS} ${DEFSA} -c iparith.cc -o iparith.oa

#
# for Macro expansion
#
CXXSOURCESD := $(CXXSOURCES:%.cc=%_d.cc) $(STATIC_SOURCES:%.cc=%_d.cc)
CSOURCESD := $(CSOURCES:%.c=%_d.c)
OBJD1 := $(CXXSOURCESD:.cc=.od)
OBJD2 := $(CSOURCESD:.c=.od)

%_d.c : %.c
	$(CCG) $(CFLAGSG) ${CPPFLAGS} ${DEFS}-E -P $< | $(PERL) -p -e 's/;/;\n/g' | $(PERL) -p -e 's/\{/\n\{/g' | $(PERL) -p -e 's/\}/\n\}/g' > $@

%_d.cc : %.cc
	$(CCG) $(CXXFLAGS) ${CPPFLAGS} ${DEFS} -E -P $< | $(PERL) -p -e 's/;/;\n/g' | $(PERL) -p -e 's/\{/\n\{/g' | $(PERL) -p -e 's/\}/\n\}/g' > $@

.PRECIOUS: %_d.cc %_d.c

%.od : %.c
	$(CCG)  ${CFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

%.od : %.cc
	$(CXXG) ${CXXFLAGSG} ${CXXTEMPLFLAGSG} ${CPPFLAGS} ${DEFSG} -c $< -o $@

##
## check_aso
##
check_aso:
	${PERL} check_aso.pl $(SOURCES)
##
## dependencies
##

%.dd: %.cc mod2.h
	echo $(@:.dd=.og) $(@:.dd=.op) $(@:.dd=_d.cc) $(@:.dd=.od) $(@:.dd=.ob) $(@:.dd=.ot) $(@:.dd=.oa) $(@:.dd=.dl_o) $(@:.dd=.dl_og) $(@:.dd=.dl_op) $(@:.dd=.dl_od) $(@:.dd=.dl_ob) $(@:.dd=.dl_ot) $(@:.dd=.dl_oa)" " \\ > $@
	$(CXXM) -DGENTABLE ${CPPFLAGS} ${DEFSG} $< >> $@

%.d: %.c mod2.h
	echo $(@:.d=.og) $(@:.d=.od) $(@:.dd=_d.c) $(@:.d=.op) $(@:.d=.ob) $(@:.d=.ot) $(@:.d=.oa)" " \\ > $@
	$(CCM) ${CPPFLAGS} ${DEFSG} $< >> $@

depend:   $(CXXSOURCES:.cc=.dd) $(ESOURCES:.cc=.dd) $(CSOURCES:.c=.d) mod2.h
	cat *.d *.dd >depend

ifeq (depend,$(wildcard depend))
include depend
endif
