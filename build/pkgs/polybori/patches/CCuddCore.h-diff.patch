--- src/polybori-0.3/polybori/include/CCuddCore.h	2008-03-13 07:32:54.000000000 -0700
+++ patches/CCuddCore.h	2008-04-10 22:41:56.000000000 -0700
@@ -11,13 +11,13 @@
  *   (c) 2007 by The PolyBoRi Team
  *
  * @internal 
- * @version \$Id: CCuddCore.h,v 1.6 2008/03/13 14:32:54 alexanderdreyer Exp $
+ * @version \$Id: CCuddCore.h,v 1.8 2008/04/10 12:45:01 dreyer Exp $
  *
  * @par History:
  * @verbatim
  * $Log: CCuddCore.h,v $
- * Revision 1.6  2008/03/13 14:32:54  alexanderdreyer
- * Merge: from developer's repository
+ * Revision 1.8  2008/04/10 12:45:01  dreyer
+ * Fix: memory leak
  *
  * Revision 1.7  2007/12/19 10:40:34  dreyer
  * CHANGE: make Cudd-related globals initialization static
@@ -110,6 +110,7 @@
 
   std::vector<node_type> m_vars;
 
+
   /// Initialize raw decision diagram management
   CCuddCore(size_type numVars = 0,
             size_type numVarsZ = 0,
@@ -129,13 +130,13 @@
   }
 
   /// Destructor
-  ~CCuddCore(){ release(); }
+           //  ~CCuddCore(){ release(); }
 
   /// Increment reference count
   void addRef(){ ++ref; }
 
   /// Release this by decrementing reference counting
-  void release() {
+  int release() {
     if (--(ref) == 0){
       for (std::vector<node_type>::iterator iter = m_vars.begin();  iter !=
              m_vars.end(); ++iter) {
@@ -152,6 +153,7 @@
       }
       Cudd_Quit(manager);
     }
+    return ref;
   }
 };
 
@@ -166,7 +168,9 @@
 /// Release current pointer by decrementing reference counting
 inline void 
 intrusive_ptr_release(CCuddCore* pCore) {
-  pCore->release();
+  if (!(pCore->release())) {
+    delete pCore;
+  }
 }
 //@}
 
