--- SConstruct	Thu Sep  9 06:02:49 2010
+++ ../src/polybori-0.6.4/SConstruct	Fri Jan 29 01:02:02 2010
@@ -104,23 +104,21 @@
 if defaultenv['PLATFORM'] == "darwin":
     defaultenv['SHCCFLAGS'] += ["-fvisibility=hidden"]
     
-# See also: http://trac.sagemath.org/sage_trac/ticket/9872 and #6437
-def detect_linker(env):
-    import re
-    if re.search("Binutils|GNU",  shell_output(env['CC'], '-Wl,-v', '2>&1')):
-        return "gnu"
+# See also:  http://trac.sagemath.org/sage_trac/ticket/6437
+def sun_linker_detected():
+    if os.system('ld --version > /dev/null 2>&1 ') == 0:
+        print ("GNU linker detected!")
+        return False
+    else:
+        print ("Sun linker detected.")
+        return True
+    
 
-    # Non-gnu linker or linux (could be Sun or Intel linker) will return 'posix'.
-    return env['PLATFORM']
-
 def sonameprefix(env):
-    linker = detect_linker(env)
-    print linker, "linker detected!"
     if env['PLATFORM']=="darwin":
         return "-Wl,-dylib_install_name -Wl,"
 
-    elif (env['PLATFORM'] == "sunos") and (linker == 'sunos'):
-        print "Sun linker detected!"
+    elif (env['PLATFORM']=="sunos") and sun_linker_detected():
         return '-Wl,-h'
 
     else:
@@ -166,14 +164,7 @@
     else:
         print "Flags", flag, "not in default environment!"        
     
-#The following linker flags causes the build to fail on OSX 10.4, but works on 10.5
-# opts.Add('LINKFLAGS', "Linker flags", ['-s'], converter = Split)
-# Instead we add "-m64" in case we build on multiarch in  64 bit mode (OSX now, Solaris later)
-if os.environ['SAGE64'] == "yes":
-         opts.Add('LINKFLAGS', "Linker flags", ['-m64'], converter = Split)
-#End modifications
-
-#opts.Add('LINKFLAGS', "Linker flags", ['-s'], converter = Split)
+opts.Add('LINKFLAGS', "Linker flags", ['-s'], converter = Split)
 opts.Add('LIBS', 'custom libraries needed for build', [], converter = Split)
 
 opts.Add('PREFIX', 'installation prefix directory', '/usr/local')
@@ -357,7 +348,7 @@
 if not env.GetOption('clean'):
     conf = Configure(env)
     if conf.CheckCHeader("gd.h") and conf.CheckLib("gd"):
-        env.Append(LIBS=["gd", "png12", "z"])
+        env.Append(LIBS=["gd"])
         env.Append(CPPDEFINES=["HAVE_GD"])
 
     if env['FORCE_HASH_MAP']:
@@ -410,7 +401,7 @@
                 print "Tutorial will not be installed"
     external_m4ri = conf.CheckLib('m4ri')
     if conf.CheckCHeader("gd.h") and conf.CheckLib("gd"):
-        env.Append(LIBS=["gd", "png12", "z"])
+        env.Append(LIBS=["gd"])
         env.Append(CPPDEFINES=["HAVE_GD"])
     if external_m4ri:
        env['LIBS'] += ['m4ri']
@@ -418,7 +409,7 @@
        env['CPPPATH'] += ['M4RI']
 
        # generate M4RI/m4ri, to allow canonical #include <m4ri/m4ri.h>
-       if not (external_m4ri) and not (path.exists(m4ri_inc)):
+       if not path.exists(m4ri_inc):
            print "Symlinking to", m4ri_inc, "..."
            os.symlink('.', m4ri_inc)
 
@@ -539,11 +530,8 @@
 slib = env.SharedLibrary
 if env['SHLIBVERSIONING']:
     slib = VersionatedSharedLibrary
-# since "slib = VersionatedSharedLibrary" is broken on OSX 10.4 we use the 
-# following. We are currently not using shared libraries anyway due to
-# bugs in the deallocation of the various PolyBoRi libraries
-if env['PLATFORM']=="darwin":
-    slib=env.LoadableModule
+#if env['PLATFORM']=="darwin":
+#    slib=env.LoadableModule
 
 
 libCuddShared = slib(CuddPath(cudd_name), list(shared_resources))
@@ -1260,11 +1248,6 @@
     env.AlwaysBuild(ipboribin)   
     env.Alias('install', ipboribin)
 
-    # we dump the flags for reuse by Sage
-    if not path.exists(InstPath()):
-        Execute(Mkdir(InstPath())) 
-    opts.Save(InstPath("flags.conf"), env)
-
 env.Alias('prepare-devel', devellibs + readabledevellibs)
 env.Alias('prepare-install', [pyroot, DocPath()])
 
