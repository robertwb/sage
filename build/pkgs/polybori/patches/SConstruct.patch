--- ../src/polybori-0.7/SConstruct	2011-04-27 13:00:31.000000000 +0200
+++ SConstruct	2011-08-29 00:38:19.310267441 +0200
@@ -169,6 +169,8 @@
 opts.Add('CXXFLAGS', "C++ compiler flags", "-std=c++98 -ftemplate-depth-100",
          converter = Split)
 
+opts.Add('M4RI_CFLAGS', "C compiler flags for M4RI", converter = Split) 
+
 opts.Add('LINKFLAGS', "Linker flags", defaultenv['LINKFLAGS'] + ['-s'])
 opts.Add('LIBS', 'custom libraries needed for build', [], converter = Split)
 
@@ -370,9 +372,39 @@
 external_m4ri = False
 
 if not env.GetOption('clean'):
-    conf = Configure(env)
+    def GuessM4RIFlags(context):
+        context.Message('Guessing m4ri compile flags... ')
+        test_src =  """
+        #include <m4ri/%s>
+        #include <stdio.h>
+        int main(int argc, char **argv) {
+          /* we test for some possible current and future configurations */
+          %s
+          return 0;
+        }
+        """  %  \
+        ("%s", ''.join(["""
+        #if defined(__M4RI_HAVE_%(macro)s) || defined(HAVE_%(macro)s )
+          printf("-m%(option)s ");
+        #endif""" % \
+        dict(macro=opt.replace('.','_').upper(), option=opt) for opt in \
+            Split("sse sse2 sse3 sse4 sse4.1 sse4.2 sse4a ssse3 mmx 3dnow") ]) )
+        (result, values) = context.TryRun(test_src % "m4ri_config.h", '.c')
+	if result != 1:
+            (result, values) = context.TryRun(test_src % "config.h", '.c')
+
+        result = (result == 1)
+        if result:
+            context.Display(values)
+            env.Append(M4RI_CFLAGS=Split(values))
+
+        context.Result(result)
+        return result
+
+    conf = Configure(env, custom_tests = {'GuessM4RIFlags': GuessM4RIFlags})
+
     if conf.CheckCHeader("gd.h") and conf.CheckLib("gd"):
-        env.Append(LIBS=["gd"])
+        env.Append(LIBS=["gd","png12","z"])
         env.Append(CPPDEFINES=["HAVE_GD"])
 
     if env['FORCE_HASH_MAP']:
@@ -436,7 +468,7 @@
                 print "Tutorial will not be installed"
     external_m4ri = conf.CheckLib('m4ri')
     if conf.CheckCHeader("gd.h") and conf.CheckLib("gd"):
-        env.Append(LIBS=["gd"])
+        env.Append(LIBS=["gd","png12","z"])
         env.Append(CPPDEFINES=["HAVE_GD"])
     if external_m4ri:
        env['LIBS'] += ['m4ri']
@@ -448,6 +480,8 @@
            print "Symlinking to", m4ri_inc, "..."
            os.symlink('.', m4ri_inc)
 
+    conf.GuessM4RIFlags()
+
     env = conf.Finish()
 
 
@@ -493,6 +527,8 @@
 
 env.Append(BUILDERS={'SymLink' : symlinkbld})
 
+env.Append(CCFLAGS=["$M4RI_CFLAGS"])
+
 ######################################################################
 # Stuff for building Cudd library
 ######################################################################
@@ -505,8 +541,7 @@
 
 env.Append(LIBPATH=[CuddPath()])
 
-cudd_resources = [CuddPath('obj/cuddObj.cc')]
-cudd_resources += glob(CuddPath('util/*.c'))
+cudd_resources = glob(CuddPath('util/*.c'))
 
 cudd_headers = [ CuddPath(fname) for fname in ['obj/cuddObj.hh', 'util/util.h',
                                                'cudd/cuddInt.h'] ] 
@@ -565,9 +600,11 @@
 slib = env.SharedLibrary
 if env['SHLIBVERSIONING']:
     slib = VersionatedSharedLibrary
-#if env['PLATFORM']=="darwin":
-#    slib=env.LoadableModule
-
+# since "slib = VersionatedSharedLibrary" is broken on OSX 10.4 we use the 
+# following. We are currently not using shared libraries anyway due to
+# bugs in the deallocation of the various PolyBoRi libraries
+if env['PLATFORM']=="darwin":
+    slib=env.LoadableModule
 
 libCuddShared = slib(CuddPath(cudd_name), list(shared_resources))
 
@@ -1319,7 +1356,7 @@
 
     if HAVE_PYTHON_EXTENSION or extern_python_ext:
         cmdline = """$PYTHON -c "import compileall; compileall.compile_dir('"""
-        cmdline += InstPyPath() + """', ddir = ''); """ 
+        cmdline += InstPyPath('polybori') + """', ddir = ''); """ 
         cmdline += """compileall.compile_dir('"""+ InstPath(GUIPath())
         cmdline += """', ddir='')" """
         FinalizeNonExecs(env.Command([file.path + 'c' for file in pyfiles],
