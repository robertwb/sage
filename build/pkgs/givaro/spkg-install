#!/usr/bin/env bash

if [[ -z "$SAGE_LOCAL" ]]; then
    echo >&2 "Error: SAGE_LOCAL undefined - exiting..."
    echo >&2 "Maybe run 'sage -sh'?"
    exit 1
fi

#################################
# Set up environment variables: #
#################################

if [[ -z $CFLAG64 ]]; then
    CFLAG64=-m64
fi
if [[ -z $CXXFLAG64 ]]; then
    CXXFLAG64="$CFLAG64"
fi
if [[ "$SAGE64" = yes ]]; then
    echo "Building a 64-bit version of Givaro."
    CFLAGS="$CFLAGS $CFLAG64"
    CPPFLAGS="$CPPFLAGS $CFLAG64"
    CXXFLAGS="$CXXFLAGS $CXXFLAG64"
    LDFLAGS="$LDFLAGS $CFLAG64"
fi

# It shouldn't be necessary to add Sage's include directory here,
# since we configure with '--with-gmp=...'.
# Also, '-I...' should normally be added to (just) CPPFLAGS.
CFLAGS="$CFLAGS -fPIC -I\"$SAGE_LOCAL/include\""
CXXFLAGS="$CXXFLAGS -fPIC -I\"$SAGE_LOCAL/include\""

export CFLAGS CPPFLAGS CXXFLAGS LDFLAGS


cd src/

##################################################
# Apply patches (or copy over prepatched files): #
##################################################

echo "Copying updated gmp++ headers..."
cp ../patches/{gmp++.h,gmp++_int.inl} src/kernel/gmp++/
if [[ $? -ne 0 ]]; then
    echo >&2 "Error copying updated gmp++ headers."
    exit 1
fi

if [[ "$UNAME" = CYGWIN ]]; then
    echo "Patching givtablelimits.h for Cygwin (because of missing logb())..."
    cp ../patches/givtablelimits.h src/kernel/zpz/givtablelimits.h
    if [[ $? -ne 0 ]]; then
        echo >&2 "Error copying patched header file for Cygwin."
        exit 1
    fi
fi

echo "Applying further patches (if any)..."
for patch in ../patches/*.patch; do
    patch -p1 <"$patch"
    if [[ $? -ne 0 ]]; then
        echo >&2 "Error: '$patch' failed to apply."
        exit 1
    fi
done

########################################
# Configure, build and install Givaro: #
########################################

echo "Now configuring Givaro..."
./configure --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib" \
            --with-gmp="$SAGE_LOCAL" --enable-shared
if [[ $? -ne 0 ]]; then
    echo >&2 "Error configuring Givaro."
    exit 1
fi

echo "Now building Givaro..."
$MAKE
if [[ $? -ne 0 ]]; then
    echo >&2 "Error building Givaro."
    exit 1
fi

echo "Now installing Givaro..."
$MAKE install
if [[ $? -ne 0 ]]; then
    echo >&2 "Error installing Givaro."
    exit 1
fi

############################################################
# Make sure dependent extension modules later get rebuilt: #
############################################################

echo "Touching Python extension modules linked against Givaro..."
for pyx in rings/finite_field_givaro.pyx \
           libs/linbox/linbox.pyx \
           libs/singular/singular.pyx \
           matrix/matrix_mpolynomial_dense.pyx \
           rings/polynomial/multi_polynomial_libsingular.pyx \
           rings/polynomial/multi_polynomial_ideal_libsingular.pyx ;
do
    f="$SAGE_ROOT/devel/sage/sage/$pyx"
    if [[ -f "$f" ]]; then
        echo "  $f"
        touch "$f"
    fi
done
