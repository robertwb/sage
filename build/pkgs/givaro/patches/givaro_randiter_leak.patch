--- src/kernel/integer/givintrsa.h.orig	2008-01-10 00:28:32.000000000 +0100
+++ src/kernel/integer/givintrsa.h	2008-01-10 00:29:13.000000000 +0100
@@ -40,9 +40,9 @@
 // =================================================================== //
 // Constructors
 // =================================================================== //
-    IntRSADom(bool fi = false, RandIter& g = *(new RandIter()) ) : IntFactorDom<RandIter>(g), _fast_impl(fi) { keys_gen(IntFactorDom<RandIter>::_g, 257, 255, _m, _k, _u); _lm = log(_m,1<<(8*sizeof(unsigned char))); }
-    IntRSADom(const long s, bool fi = false, RandIter& g = *(new RandIter()) ) : IntFactorDom<RandIter>(g), _fast_impl(fi)  { keys_gen(IntFactorDom<RandIter>::_g, (s>>1)-1, (s>>1)+1, _m, _k, _u); _lm = log(_m,1<<(8*sizeof(unsigned char))); }
-    IntRSADom(const long p, const long q, bool fi = false, RandIter& g = *(new RandIter()) ) : IntFactorDom<RandIter>(g), _fast_impl(fi)  { keys_gen(IntFactorDom<RandIter>::_g, p, q, _m, _k, _u); _lm = log(_m,1<<(8*sizeof(unsigned char))); }
+    IntRSADom(bool fi = false, RandIter g = RandIter() ) : IntFactorDom<RandIter>(g), _fast_impl(fi) { keys_gen(IntFactorDom<RandIter>::_g, 257, 255, _m, _k, _u); _lm = log(_m,1<<(8*sizeof(unsigned char))); }
+    IntRSADom(const long s, bool fi = false, RandIter g = RandIter() ) : IntFactorDom<RandIter>(g), _fast_impl(fi)  { keys_gen(IntFactorDom<RandIter>::_g, (s>>1)-1, (s>>1)+1, _m, _k, _u); _lm = log(_m,1<<(8*sizeof(unsigned char))); }
+    IntRSADom(const long p, const long q, bool fi = false, RandIter g = RandIter() ) : IntFactorDom<RandIter>(g), _fast_impl(fi)  { keys_gen(IntFactorDom<RandIter>::_g, p, q, _m, _k, _u); _lm = log(_m,1<<(8*sizeof(unsigned char))); }
     IntRSADom(const Element& m, const Element& k, const Element& u) : _m(m), _k(k), _u(u), _lm(log(m,1<<(8*sizeof(unsigned char)))), _fast_impl( k == SIMPLE_EXPONENT )  {}
     IntRSADom(const Element& m, const Element& k) : _m(m), _k(k), _u(0), _lm(log(m,1<<(8*sizeof(unsigned char)))), _fast_impl( k == SIMPLE_EXPONENT )  {}
         

--- src/kernel/integer/givintfactor.h.orig	2008-01-10 00:28:38.000000000 +0100
+++ src/kernel/integer/givintfactor.h	2008-01-10 00:29:26.000000000 +0100
@@ -38,7 +38,7 @@
 public:
     typedef RandIter random_generator;
 
-    IntFactorDom(RandIter& g = *(new RandIter())) :  IntPrimeDom(),PROD_first_primes(223092870), PROD_second_primes("10334565887047481278774629361"), _g(g) {
+    IntFactorDom(RandIter g = RandIter()) :  IntPrimeDom(),PROD_first_primes(223092870), PROD_second_primes("10334565887047481278774629361"), _g(g) {
 #ifdef __GMP_PLUSPLUS__
 	    seeding( _g.seed() );
 #endif

--- src/kernel/integer/givintnumtheo.h.orig	2008-01-10 00:28:43.000000000 +0100
+++ src/kernel/integer/givintnumtheo.h	2008-01-10 00:29:39.000000000 +0100
@@ -18,7 +18,7 @@
 class IntNumTheoDom : public IntFactorDom<RandIter> {
 public:
     typedef typename IntFactorDom<RandIter>::Rep Rep;
-    IntNumTheoDom(RandIter& g = *(new RandIter())) 
+    IntNumTheoDom(RandIter g = RandIter()) 
             :  IntFactorDom<RandIter>(g) {}
 // =================================================================== //
 // Euler's phi function
