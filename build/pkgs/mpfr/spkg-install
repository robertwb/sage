#!/usr/bin/env bash

if [ -z "$SAGE_LOCAL" ]; then
    echo "Error: SAGE_LOCAL undefined - exiting..."
    echo "Maybe run 'sage -sh'?"
    exit 1
fi

# unset RM since it messes with libtool
unset RM

mpfr_patch()
{
    # Apply a patch on Solaris, but only on the sun4v architecture
    # by default. On other Solaris systems, it can be overridden

    # The patch to the C code was developed by Paul Zimmermann, the patch
    # to the spkg-install by David Kirkby. See Ticket #6453

    if [ `uname` = "SunOS" ]; then
       # Add a patch to MPFR on Solaris if either:
       # 1) The machine is a sun4v architecture
       # 2) The environment variable INCLUDE_MPFR_PATCH is set to 1
       #    This will allow creating of binaries on a machine other than
       #    sun4v, which will run on sun4v.
       echo "\nThis computer is running Solaris on which some problems have been observed"
       echo "with the MPFR library running on a T2+ processor (sun4v architecture)."
       echo "See http://sagetrac.org/sage_trac/ticket/6453 A patch can be applied"
       echo "to bypass this problem. The problem has NEVER been seen on Solaris running x86"
       echo "or on sun4u (UltraSPARC II etc). To determine the architecture run:"
       echo "$ /usr/bin/arch -k\n"
       echo "If you experience MPFR test failures, or you wish to ensure the binary will run"
       echo "on a sun4v system, set the environment variable INCLUDE_MPFR_PATCH to 1, with:"
       echo "$ export INCLUDE_MPFR_PATCH=1\n"
       echo "If you specifically wish to exclude the patch, set INCLUDE_MPFR_PATCH to 0 with"
       echo "$ export INCLUDE_MPFR_PATCH=0\n"
       echo "By default, the patch will only be applied on sun4v systems (T1, T2 and T2+)"
       echo "processors but this can be over-ridden on other systems. Binaries for"
       echo "Solaris SPARC binaries should be built with INCLUDE_MPFR_PATCH set to 1"
       echo "unless you are 100% sure they will not be used on a sun4v system.\n"

       # Note, "/usr/bin/arch" will return "sun4" on any SPARC system
       # If given the '-k' option, aditional information will be displayed
       # to indicate if the system is sun4m (very old), sun4u or sun4v

       # Set the variable PATCH_MPFR to something other than 0 or 1"
       PATCH_MPFR="${INCLUDE_MPFR_PATCH-2}"
       if [ $PATCH_MPFR = "1" ] ; then
          echo "Since INCLUDE_MPFR_PATCH was set to 1, the MPFR library will be patched."
          echo "The binaries should be safe on any Solaris system"
          cp ../patches/mpn_exp.c mpn_exp.c
       elif [ $PATCH_MPFR = "0" ] ; then
          echo "Since INCLUDE_MPFR_PATCH was set to 0, the MPFR library will not"
          echo "be patched. You would be unwise to distribute SPARC binaries"
          echo "unless you are sure they will not be used on sun4v systems"
       elif [  $PATCH_MPFR = "2" -a `arch -k` = "sun4v" ] ; then
          echo "This is a sun4v system, so the MPFR library will be patched. The binaries"
          echo "should run correctly on any SPARC system whose operating system is"
          echo "no older than the system used to build the binaries."
          cp ../patches/mpn_exp.c mpn_exp.c
       elif [ $PATCH_MPFR = "2" -a `arch -k` != "sun4v" ] ; then
          echo "Since this is not a sun4v system, the MPFR binary will not"
          echo "be patched"
          # Issue a warning on SPARC, but not x86 systems.
          if [ `arch` = "sun4" ]; then
            echo "WARNING: Problems may occur if you try to run this SPARC"
            echo "binary on a sun4v system (T1, T2 or T2+ processors). Binaries created like"
            echo "this should not distributed unless you know the end users system will not"
            echo "be sun4v. Set INCLUDE_MPFR_PATCH to 1, to include the patch, if you are unsure."
          fi
       else
          echo "The environment variable INCLUDE_MPFR_PATCH was set incorrectly The MPFR"
          echo "library will be patched as a precaution."
          cp ../patches/mpn_exp.c mpn_exp.c
       fi
    fi

}

mpfr_get_upstream_selected_cflags() # Get MPFR's choice on empty CC and CFLAGS.
{
    if [ $# -ne 1 ]; then
        echo "Error: mpfr_get_upstream_selected_cflags() requires 'file' parameter."
        exit 1
    fi
    header_file=$1
    mpfr_cc_pat="s/^CC='\([^']*\)'/\1/p"
    mpfr_cflags_pat="s/^CFLAGS='\([^']*\)'/\1/p"
    if ! [ -f "$header_file" ]; then
        upstream_cc=""
        upstream_cflags=""
        return 1
    fi
    upstream_cc=`sed -n -e "$mpfr_cc_pat" "$header_file"`
    upstream_cflags=`sed -n -e "$mpfr_cflags_pat" "$header_file"`
    return 0
}

mpfr_configure()
{
    sage_cc=$CC # Save Sage CC, because we need to unset it later.
    user_cflags=$CFLAGS # Save them. 'sage-env' sets CC, but not CFLAGS.
    required_cflags="" # Additional mandatory settings required by Sage, accumulated below.
    default_cflags="" # Spkg defaults that can and might get overridden.

    if [ "$SAGE_DEBUG" = yes ]; then
        # Disable optimization, add debug symbols:
        required_cflags="$required_cflags -g -O0"
        echo "Warning: Building MPFR with SAGE_DEBUG=yes disables optimization."
    else
        # Add debug symbols by default, enable optimization, but do not (yet)
        # add processor-specific flags (these are eventually added later):
        default_cflags="$default_cflags -g -O3"
    fi

    if [ "$SAGE64" = "yes" ]; then
        echo "Building a 64-bit version of MPFR."
        default_cflags="$default_cflags -m64"
    else
        default_cflags="$default_cflags"
    fi

    SAGE_CONF_OPTS=--libdir="$SAGE_LOCAL/lib"
    if [ ! -f "$SAGE_LOCAL/include/gmp.h" ]; then
         SAGE_CONF_OPTS="$SAGE_CONF_OPTS --disable-static --enable-shared"
    fi

    if [ $UNAME = "CYGWIN" ]; then
         SAGE_CONF_OPTS="$SAGE_CONF_OPTS --disable-static --enable-shared"

    fi

    # Pre-configure MPFR to get the settings it would use if CC and CFLAGS were empty:
    echo "Checking what CC and CFLAGS MPFR would use if they were empty..."
    if (unset CC CFLAGS CPPFLAGS CXXFLAGS &&
        ./configure --with-gmp="$SAGE_LOCAL" $SAGE_CONF_OPTS $MPFR_EXTRA_OPTS) &>/dev/null;
    then
        if mpfr_get_upstream_selected_cflags config.status; then
            mpfr_cflags=$upstream_cflags
            mpfr_cc=$upstream_cc
            echo "Settings chosen by MPFR when configuring with CC and CFLAGS unset:"
            echo "  CC:      $mpfr_cc"
            echo "  CFLAGS:  $mpfr_cflags"
        else
            echo "Warning: Couldn't determine MPFR-selected CC and CFLAGS from 'mpfr.h'"
        fi
    else
        # We ignore errors in the first place, since we redirected all
        # messages to /dev/null. (The messages can be found in the 'config.log'
        # files if someone really wants to read them.)
        :;
    fi
    find . -name config.cache -o -name config.status -exec rm -f {} \;
    CC=$sage_cc

    echo "Settings required to properly build MPFR, taking into account SAGE_DEBUG etc.:"
    echo "  CFLAGS:  $required_cflags"
    echo "  LDFLAGS: $LDFLAGS" # Might be empty, or specified by the user.
    echo "  ABI:     $ABI" # Might be empty, or specified by the user.
    echo "Settings from the \"global\" environment:"
    echo "  CC:      $CC" # Set by Sage, maybe overridden by the user.
    echo "  CFLAGS:  $user_cflags"
    echo "  (CPPFLAGS, CXX and CXXFLAGS are listed below; these don't get modified.)"

    if [ -z "$user_cflags" ]; then
        # No CFLAGS specified by user => Use either MPFR's or our default ones,
        # plus those required by Sage for the package to build properly:
        if [ -n "$mpfr_cflags" ]; then
            # Fine. Use upstream settings.
            echo "Using MPFR's settings (plus mandatory ones)."
            CFLAGS="$mpfr_cflags $required_cflags"
        else # Use spkg's defaults.
            echo "Using the spkg's (i.e. Sage's) default (plus mandatory) settings."
            CFLAGS="$default_cflags $required_cflags"
        fi
    else
        # CFLAGS were specified by the user, so don't override them (unless
        # necessary).
        echo "Using user-specified settings (overriding defaults), with some additions."
        CFLAGS="$default_cflags $user_cflags $required_cflags"
    fi

    echo "Finally using the following settings:"
    echo "  CC=$CC"
    echo "  CFLAGS=$CFLAGS"
    echo "  CPPFLAGS=$CPPFLAGS"
    echo "  CXX=$CXX"
    echo "  CXXFLAGS=$CXXFLAGS"
    echo "  LDFLAGS=$LDFLAGS"
    echo "  ABI=$ABI"
    echo "(These settings may still get overridden by 'configure' or Makefiles.)"

    ###############################################################################
    # Now really configure MPFR with proper settings:
    ###############################################################################
    if [ -z "$MPFR_EXTRA_OPTS" ]; then
        echo "Configuring MPFR with the following options:"
        echo "    --prefix=\"$SAGE_LOCAL\" --with-gmp=\"$SAGE_LOCAL\" $SAGE_CONF_OPTS"
        echo "You can set MPFR_EXTRA_OPTS to pass additional parameters."
    else
        echo "Using additional 'configure' options as specified with" \
            "MPFR_EXTRA_OPTS:"
        echo "    $MPFR_EXTRA_OPTS"
        echo "Configuring MPFR with the following options:"
        echo "    --prefix=\"$SAGE_LOCAL\" --with-gmp=\"$SAGE_LOCAL\" $SAGE_CONF_OPTS $MPFR_EXTRA_OPTS"
    fi

    ./configure --prefix="$SAGE_LOCAL" --with-gmp="$SAGE_LOCAL" $SAGE_CONF_OPTS $MPFR_EXTRA_OPTS
}

mpfr_build()
{
    echo "Patching MPFR"
    mpfr_patch
    if [ $? -ne 0 ];  then
        echo >&2 "Error patching MPFR."
        exit 1
    fi

    echo "Configuring MPFR"
    mpfr_configure
    if [ $? -ne 0 ]; then
        echo >&2 "Error configuring MPFR."\
            "(See above for the options passed to it.)"
        exit 1
    fi

    echo "Building MPFR"
    $MAKE
    if [ $? -ne 0 ];  then
        echo >&2 "Error building MPFR."
        exit 1
    fi

    echo "Deleting old headers"
    rm -f "$SAGE_LOCAL"/include/*mpfr*
    # Do not delete old libraries as this causes gcc to break during
    # parallel builds.
    # rm -f "$SAGE_LOCAL"/lib/libmpfr.*

    echo "Installing MPFR"
    $MAKE install
    if [ $? -ne 0 ];  then
        echo >&2 "Error installing MPFR."
        exit 1
    fi
}

cd src

mpfr_build
