#!/usr/bin/env bash

###########################################
## GAP
###########################################

SPKG_ROOT=`pwd` # Save GAP's spkg build directory.

if [[ -z "$SAGE_LOCAL" ]]; then
    echo >&2 "SAGE_LOCAL undefined - exiting..."
    echo >&2 "Maybe run 'sage -sh'?"
    exit 1
fi

# Only unset CC and CXX if they contain spaces, which is what (is said to)
# currently would break the build:
# (Note that CC and CXX are always defined, since sage-env provides
# defaults in case they're not.)
if [[ "`echo $CC | wc -w`" -ne 1 ]]; then
    echo >&2 "WARNING: \$CC (=$CC) contains multiple words,"
    echo >&2 "  which currently breaks GAP's build scripts."
    echo >&2 "  To work around this, we therefore unset it!"
    echo >&2 "  (This may lead to other errors of course.)"
    unset CC
fi
if [[ "`echo $CXX | wc -w`" -ne 1 ]]; then
    echo >&2 "WARNING: \$CXX (=$CXX) contains multiple words,"
    echo >&2 "  which currently breaks GAP's build scripts."
    echo >&2 "  To work around this, we therefore unset it!"
    echo >&2 "  (This may lead to other errors of course.)"
    unset CXX
fi

# be sure to update this to the
VERSION=`grep AC_INIT $SPKG_ROOT/src/cnf/configure.in | cut -d '[' -f 3 | cut -d ']' -f 1`
GAP_DIR="gap-$VERSION"
INSTALL_DIR="$SAGE_LOCAL/gap/$GAP_DIR"

echo "spkg-install is using"
echo "VERSION = $VERSION"
echo "GAP_DIR = $GAP_DIR"
echo "INSTALL_DIR = $INSTALL_DIR"

if [[ "$SAGE64" = yes ]]; then
    if [[ -z $CFLAG64 ]]; then
        CFLAG64=-m64
    fi
    CFLAGS="$CFLAGS $CFLAG64"
    CXXFLAGS="$CXXFLAGS $CFLAG64"
    echo "Building a 64-bit version of GAP (with '$CFLAG64')."
fi

# Indicate that GAP has somehow been updated, which invalidates all workspaces:
touch "$SAGE_LOCAL/bin/gap_stamp"

# workaround for MPIR missing macro issue
CFLAGS="$CFLAGS -D__GMP_MP_RELEASE=50002"

# enable debug info if possible
# Note that -g3 allows you to use preprocessor macros in gdb which are widely used
if [ "$SAGE_DEBUG" == "yes" ] ; then
    export CFLAGS="-O0 -g3 -DDEBUG_MASTERPOINTERS -DDEBUG_GLOBAL_BAGS -DDEBUG_FUNCTIONS_BAGS"
fi

# Apply patches:
echo "Copying over patched GAP files..."
cd "$SPKG_ROOT"
cp patches/gap.shi src/
cp patches/testinstall.g src/tst/
if [[ $? -ne 0 ]]; then
    echo >&2 "Error copying over patched GAP files."
    exit 1
fi

echo "Configuring GAP..."
cd "$SPKG_ROOT/src"
./configure \
    --prefix="$SAGE_LOCAL" PREFIX="$SAGE_LOCAL" \
    --with-gmp="$SAGE_LOCAL" \
    CC="$CC" CXX="$CXX" CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS"
if [[ $? -ne 0 ]]; then
    echo >&2 "Error configuring GAP."
    exit 1
fi

# On Cygwin installations the GAP build creates a file 'gap.exe',
# and then tries to strip the file 'gap'.
# This broke the build on old Cygwin installations.
# On newer Cygwins, 'gap' is automatically "translated" to 'gap.exe'.
if [[ "$UNAME" = CYGWIN ]]; then
    echo "Creating a dummy 'gap.exe' in 'bin/i686-pc-cygwin-gcc'..."
    cd "$SPKG_ROOT/src"
    mkdir -p bin/i686-pc-cygwin-gcc &&
    cd bin/i686-pc-cygwin-gcc &&
    touch gap.exe
    if [[ $? -ne 0 ]]; then
        # Something really went wrong.
        echo >&2 "Error creating a dummy gap.exe file."
        exit 1
    fi
    # Check if 'gap' is automatically "translated" to 'gap.exe'.
    # If not, create a symbolic link from 'gap' to 'gap.exe'.
    if [[ ! -f gap ]]; then
        echo "Creating a symbolic link from 'gap' to 'gap.exe'..."
        ln -s gap.exe gap
        if [[ $? -ne 0 ]]; then
            # Something really went wrong.
            echo >&2 "Error creating the symbolic link."
            exit 1
        fi
    fi
fi

echo "Building GAP..."
cd "$SPKG_ROOT/src"
$MAKE -j1
if [[ $? -ne 0 ]]; then
    echo >&2 "Error building GAP."
    exit 1
fi
if [[ ! -f bin/gap.sh ]]; then
    echo "Error building GAP ('gap.sh' not found)."
    exit 1
fi

echo "Installing (copying) files..."
# gap has no notion of installing itself (similar to sage), copy everything
mkdir -p "$INSTALL_DIR" &&
cp -r "$SPKG_ROOT/src"/* "$INSTALL_DIR"
if [[ $? -ne 0 ]]; then
    echo >&2 "Error copying built GAP files."
    exit 1
fi

echo "Creating symlink to new GAP installation..."
cd "$SAGE_LOCAL/gap"
ln -sf "$GAP_DIR" latest

echo "Copying GAP startup script..."
rm -f "$SAGE_LOCAL/bin/gap"
cd "$SPKG_ROOT"
if [[ "$UNAME" = CYGWIN ]]; then
    cp patches/gap_cygwin "$SAGE_LOCAL/bin/gap"
else
    cp src/bin/gap.sh "$SAGE_LOCAL/bin/gap"
fi
if [[ $? -ne 0 ]]; then
    echo >&2 "Error copying customized GAP startup script."
    exit 1
fi

if [[ "$SAGE_SPKG_INSTALL_DOCS" = yes ]]; then
    # The (pre-built) HTML documentation is currently (GAP 4.4.12.p7)
    # included, so we don't have to /build/ it here.
    # echo "Now building GAP's documentation..."
    # <COMMAND TO BUILD THE [HTML] DOCUMENTATION>
    echo "Now copying GAP's (HTML) documentation..."
    cd "$SPKG_ROOT"
    mkdir -p "$SAGE_LOCAL/share/doc/gap" &&
    cp -r src/doc/ref src/doc/tut "$SAGE_LOCAL/share/doc/gap/"
    if [[ $? -ne 0 ]]; then
        echo >&2 "Error copying GAP's HTML documentation."
        exit 1
    fi
fi
