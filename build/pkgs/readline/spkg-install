#!/usr/bin/env bash
###########################################
## Readline 6.0
###########################################

if [ -z "$SAGE_LOCAL" ]; then
    echo "SAGE_LOCAL undefined ... exiting"
    echo "Maybe run 'sage -sh'?"
    exit 1
fi

set -e

# Add a sensible default optimisation flag. Change if necessary.
OPTIMIZATION_FLAGS="-O2"

# Most packages do not need all these set.
# But it is better to do them all each time, rather than omit
# a flag by mistake.

CFLAGS="$CFLAGS $OPTIMIZATION_FLAGS "
CXXFLAGS="$CXXFLAGS $OPTIMIZATION_FLAGS "
FCFLAGS="$FCFLAGS $OPTIMIZATION_FLAGS "
F77FLAGS="$F77FLAGS $OPTIMIZATION_FLAGS "
#CPPFLAGS="$CPPFLAGS -I$SAGE_LOCAL/include"
#LDFLAGS="$LDFLAGS -L$SAGE_LOCAL/lib"

# Compile for 64-bit if SAGE64 is set to 'yes' or '1'
if [ "x$SAGE64" = "xyes" ] || [ "x$SAGE64" = "x1" ]  ; then
   echo "Building a 64-bit version of Readline"
   CFLAGS="$CFLAGS -m64 "
   CXXFLAGS="$CXXFLAGS -m64 "
   FCFLAGS="$FCFLAGS -m64 "
   F77FLAGS="$F77FLAGS -m64 "
   # Some packages may need LDFLAGS and/or ABI set here.
   LDFLAGS="$LDFLAGS -m64 "
   # ABI=64
else
   echo "Building a 32-bit version of Readline"
fi

# If SAGE_DEBUG is set either unset (the default), or set to  'yes'
# then add debugging information.
# Since both the Sun and GNU compilers accept -g to give debugging information,
# there is no need to do anything specific to one compiler or the other.

if [ "x$SAGE_DEBUG" = "x" ] || [ "x$SAGE_DEBUG" = "xyes" ] ; then
   echo "Code will be built with debugging information present. Set 'SAGE_DEBUG' to 'no' if you don't want that."
   # Actually anything other than 'yes' or '1' will cause
   # no debugging information to be added.
   CFLAGS="$CFLAGS -g "
   CXXFLAGS="$CXXFLAGS -g "
   FCFLAGS="$FCFLAGS -g "
   F77FLAGS="$F77FLAGS -g "
else
   echo "No debugging information will be used during the build of this package."
   echo "Unset SAGE_DEBUG if you want debugging information present (-g added)."
fi

# Add appropriate flag(s) to show all warnings.
# This test of a compiler is not perfect by any means, but
# is better than nothing.
if "$CC" -flags > /dev/null 2>&1 ; then
   SUN_COMPILER=1
   # The Sun compilers are fussy, and adding extra
   # warnings will just show too many.
else
   # Assume gcc if not the Sun C compiler.
   # Add -Wall to show all warnings.
   CFLAGS="$CFLAGS -Wall "
   CXXFLAGS="$CXXFLAGS -Wall "
   FCFLAGS="$FCFLAGS -Wall "
   F77FLAGS="$F77FLAGS -Wall "
   GNU_COMPILER=1
fi

# Determine if the C++ compiler is the Sun or GNU compiler.
# Just to check we are not mixing GNU and non-GNU.
if "$CXX" -flags > /dev/null 2>&1 ; then
   SUN_COMPILER=1
else
   GNU_COMPILER=1
fi


# Determine if the Fortran compiler is the Sun or GNU compiler.
if [ -z "$SAGE_FORTRAN" ] ; then
   echo "No Fortran compiler has been defined. This is not normally a problem."
else
   if "$SAGE_FORTRAN" -flags > /dev/null 2>&1 ;  then
      SUN_COMPILER=1
   else
      GNU_COMPILER=1
   fi
fi

# Check if SAGE_FORTRAN_LIB is defined, that the file actually exists.
# SAGE_FORTRAN_LIB does not always need to be defined, but if it is defined, then
# the file should exist.

if [ -n "$SAGE_FORTRAN_LIB" ] &&  [ ! -e "$SAGE_FORTRAN_LIB" ]; then
   echo "SAGE_FORTRAN_LIB is defined as $SAGE_FORTRAN_LIB, but does not exist."
   exit 1
fi

# Checks that the user is not mixing the Sun and GNU compilers. This problem
# has been seen on code built with the aid of SCons, but in general could
# happen with any code if the user has specified a C compiler but not a C++ one.
# This problem is even more likely to occur with the Fortran compiler - I've done
# it myself when building Sage!

if [ "x$SUN_COMPILER" = "x1" ] && [ "x$GNU_COMPILER" = "x1" ] ; then
   echo "You are mixing the Sun and GNU C/C++/Fortran compilers."
   echo "Such a combination will lead to problems."
   echo "Check CC, CXX & SAGE_FORTRAN carefully."
   echo "Exiting ..."
   exit 1
fi

# These are all used by GNU to specify compilers.
echo "Using CC=$CC"
echo "Using CXX=$CXX"
echo "Using FC=$FC"
echo "Using F77=$F77"

# Used by Sage in connection with Fortran.
echo "Using SAGE_FORTRAN=$SAGE_FORTRAN"
echo "Using SAGE_FORTRAN_LIB=$SAGE_FORTRAN_LIB"

# Flags which may be set.
echo "The following environment variables will be exported."
echo "Using CFLAGS=$CFLAGS"
echo "Using CXXFLAGS=$CXXFLAGS"
echo "Using FCFLAGS=$FCFLAGS"
echo "Using F77FLAGS=$F77FLAGS"
echo "Using CPPFLAGS=$CPPFLAGS"
echo "Using LDFLAGS=$LDFLAGS"
echo "Using ABI=$ABI"
echo "configure scripts and/or makefiles might override these later"
echo " "

# export everything. Probably not necessary in most cases.
export CFLAGS
export CXXFLAGS
export FCFLAGS
export F77FLAGS
export CPPFLAGS
export LDFLAGS
export ABI

# End of pretty general spkg-install file.
# Now do the specific things needed for this package (Readline)


echo "Deleting old readline headers and libs"
rm -rf "$SAGE_LOCAL"/include/readline/
rm -rf "$SAGE_LOCAL"/lib/libreadline.*

# OVERWRITE_READLINE=false; export OVERWRITE_READLINE

set +e # We want the exit codes!

# First we check for OpenSUSE 11.x, since there bash is linked dynamically with a
# more recent readline such that bash crashes when we build Sage's readline, so
# we work around this for now by not building Sage's version and instead using
# the system's one.

if [ -f /etc/SuSE-release ]; then
    echo "OpenSuSE detected"
    # Note that "-q" doesn't work with Solaris' non-POSIX grep
    # in the default path, but we're certainly on Linux here:
    if grep -q 11\\. /etc/SuSE-release 2>/dev/null; then
        echo "OpenSuSE 11 detected"
        if [ -d /usr/include/readline/ ]; then
            echo "The development version of libreadline is installed -> copying"
            # Note that "cp -a" isn't POSIX, but again: We're on Linux.
            # ("uname -p" gives "unknown" on at least some Linuces, so we
            # better use the more portable "-m".)
            if [ "`uname -m`" = "x86_64" ]; then
                cp -af /lib64/libreadline.so.6* "$SAGE_LOCAL"/lib
            else
                cp -af /lib/libreadline.so.6* "$SAGE_LOCAL"/lib
            fi
            if [ $? -ne 0 ]; then
                echo "Error copying the system's libreadline"
                exit 1
            fi
            ln -snf libreadline.so.6 "$SAGE_LOCAL"/lib/libreadline.so
            if [ $? -ne 0 ]; then
                echo "Error creating symbolic link to libreadline.so.6"
                exit 1
            fi
            cp -rf /usr/include/readline "$SAGE_LOCAL"/include
            if [ $? -ne 0 ]; then
                echo "Error copying the system's readline header files"
                exit 1
            fi
            exit 0
        else
            echo "No readline headers found. Please install OpenSuSE's development"
            echo "version of libreadline 6.x since building the version currently"
            echo "shipped with Sage would break your shell (bash). Sorry."
            exit 1
	    # # This variable is only set to "true" on openSUSE 11.1.
            # OVERWRITE_READLINE="true"; export OVERWRITE_READLINE
        fi
    else
        echo "... but not OpenSuSE 11 -> building Sage's version of libreadline."
    fi
fi

# We also check for Arch Linux, since it crashes with "undefined symbol: PC".
# If anyone knows a better way to fix this, please do.

if [ -f /etc/arch-release ]; then
    echo "Arch Linux detected"
    if [ -f "/lib/libreadline.so.6" ]; then
        echo "Copying over system's libreadline (version 6.x)."
        cp -af /lib/libreadline.so.6* "$SAGE_LOCAL"/lib
        if [ $? -ne 0 ]; then
            echo "Error copying the system's libreadline"
            exit 1
        fi
        ln -snf libreadline.so.6 "$SAGE_LOCAL"/lib/libreadline.so
        if [ $? -ne 0 ]; then
            echo "Error creating symbolic link to libreadline.so.6"
            exit 1
        fi
        # We shouldn't have to copy the headers...
        # (On Arch Linux, these are installed by default.)
        exit 0
    elif [ -f "/lib/libreadline.so.5" ]; then
        # We might have only an older version of libreadline
        echo "Couldn't find a system copy of libreadline 6.x, only 5.x."
        echo "Building Sage's more recent version of libreadline."
    else
        echo "Could not find a system copy of libreadline 5.x or 6.x."
        echo "This is abnormal, so we better stop here..."
        exit 1
    fi
fi


cp patches/shobj-conf src/support/
if [ $? -ne 0 ]; then
    echo "Error copying patch over."
    exit 1
fi

cd src/

build()
{
    ./configure --prefix="$SAGE_LOCAL" $CONF_FLAGS
    if [ $? -ne 0 ]; then
        echo "Error configuring readline."
        exit 1
    fi
    make install
}

build
if [ $? -ne 0 ]; then
    echo "Error building and installing readline."
    exit 1
fi

set -e

if [ "$UNAME" = "Darwin" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.dylib
elif [ "$UNAME" = "CYGWIN" ]; then
  # It is of course very lame that readline names the file .dll.a, but that's what it does.
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.dll.a
elif [ "$UNAME" = "OpenBSD" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.so.6.0
elif [ "$UNAME" = "FreeBSD" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.so.6
elif [ "$UNAME" = "HP-UX" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.sl.6
else
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.so
fi

# # We only enter this block on openSUSE 11.1.
# if [ $OVERWRITE_READLINE = "true" ]; then
#   echo "Overwriting libreadline.so.6.0 with the system one."
#   rm -f $SAGE_LOCAL/lib/libreadline.so.6.0
#   if [ `uname -p` = "x86_64" ]; then
#     cp /lib64/libreadline.so.* $SAGE_LOCAL/lib
#   else
#     cp /lib/libreadline.so.* $SAGE_LOCAL/lib
#   fi
# fi

# Make sure that the install worked, despite whatever the error
# code of build was.
if [ -f "$DYLIB_NAME" -a -f "$SAGE_LOCAL"/lib/libreadline.a ]; then
  # Fix permissions.
  echo "Fixing permissions..."
  chmod 755 "$SAGE_LOCAL"/lib/libreadline.*
  chmod 755 "$SAGE_LOCAL"/lib/libhistory.*
  exit 0
else
  echo "Error: Readline's build claims to have finished, but files that should have been built weren't."
  exit 1
fi
