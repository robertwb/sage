#!/usr/bin/env bash

if [[ -z $SAGE_LOCAL ]]; then
    echo "SAGE_LOCAL undefined ... exiting"
    echo "Maybe run 'sage -sh'?"
    exit 1
fi

if [[ -z $CFLAG64 ]] ; then
   CFLAG64=-m64
fi

# Compile for 64-bit if SAGE64 is set to 'yes'
if [[ $SAGE64 = yes ]] ; then
   echo "Building a 64-bit version of Readline"
   CFLAGS="$CFLAGS $CFLAG64"
   CPPFLAGS="$CPPFLAGS $CFLAG64"
   # Some packages may need LDFLAGS and/or ABI set here.
   LDFLAGS="$LDFLAGS $CFLAG64"
fi

if [[ $SAGE_DEBUG = yes ]] ; then
   CFLAGS="$CFLAGS -g -O0"
else
   CFLAGS="-g -O2 $CFLAGS"
fi

# These are all used by GNU to specify compilers.
echo "Using CC=$CC"


# Flags which may be set.
echo "The following environment variables will be exported."
echo "Using CFLAGS=$CFLAGS"
echo "Using CPPFLAGS=$CPPFLAGS"
echo "Using LDFLAGS=$LDFLAGS"
echo "configure scripts and/or makefiles might override these later"
echo " "

export CFLAGS
export CPPFLAGS
export LDFLAGS

# End of pretty general spkg-install file.
# Now do the specific things needed for this package (Readline)

# OVERWRITE_READLINE=false; export OVERWRITE_READLINE

# First we check for OpenSUSE 11.x, since there bash is linked dynamically with a
# more recent readline such that bash crashes when we build Sage's readline, so
# we work around this for now by not building Sage's version and instead using
# the system's one.

if [ -f /etc/SuSE-release ]; then
    echo "OpenSuSE detected"
    # #11882: bypass this test for OpenSuSE.
    #
    # Note that "-q" doesn't work with Solaris' non-POSIX grep
    # in the default path, but we're certainly on Linux here:
    if false && grep -q 11\\. /etc/SuSE-release 2>/dev/null; then
        echo "OpenSuSE 11 detected"
        if [ -d /usr/include/readline/ ]; then
            echo "The development version of libreadline is installed -> copying"
            # Note that "cp -a" isn't POSIX, but again: We're on Linux.
            # ("uname -p" gives "unknown" on at least some Linuces, so we
            # better use the more portable "-m".)
            if [ "`uname -m`" = "x86_64" ]; then
                cp -af /lib64/libreadline.so.6* "$SAGE_LOCAL"/lib
            else
                cp -af /lib/libreadline.so.6* "$SAGE_LOCAL"/lib
            fi
            if [ $? -ne 0 ]; then
                echo "Error copying the system's libreadline"
                exit 1
            fi
            ln -snf libreadline.so.6 "$SAGE_LOCAL"/lib/libreadline.so
            if [ $? -ne 0 ]; then
                echo "Error creating symbolic link to libreadline.so.6"
                exit 1
            fi
            cp -rf /usr/include/readline "$SAGE_LOCAL"/include
            if [ $? -ne 0 ]; then
                echo "Error copying the system's readline header files"
                exit 1
            fi
            exit 0
        else
            echo "No readline headers found. Please install OpenSuSE's development"
            echo "version of libreadline 6.x since building the version currently"
            echo "shipped with Sage would break your shell (bash). Sorry."
            exit 1
	    # # This variable is only set to "true" on openSUSE 11.1.
            # OVERWRITE_READLINE="true"; export OVERWRITE_READLINE
        fi
    else
	# echo "... but not OpenSuSE 11 -> building Sage's version of libreadline."
	echo "Building Sage's version of readline 6.2 anyway..."
    fi
fi

# #11882: bypass this test for Arch Linux.
#
# We also check for Arch Linux, since it crashes with "undefined symbol: PC".
# If anyone knows a better way to fix this, please do.
if [ -f /etc/arch-release ]; then
    echo "Arch Linux detected"
fi
if false && [ -f /etc/arch-release ]; then
    if [ -f "/lib/libreadline.so.6" ]; then
        echo "Copying over system's libreadline (version 6.x)."
        cp -af /lib/libreadline.so.6* "$SAGE_LOCAL"/lib
        if [ $? -ne 0 ]; then
            echo "Error copying the system's libreadline"
            exit 1
        fi
        ln -snf libreadline.so.6 "$SAGE_LOCAL"/lib/libreadline.so
        if [ $? -ne 0 ]; then
            echo "Error creating symbolic link to libreadline.so.6"
            exit 1
        fi
        # We shouldn't have to copy the headers...
        # (On Arch Linux, these are installed by default.)
        exit 0
    elif [ -f "/lib/libreadline.so.5" ]; then
        # We might have only an older version of libreadline
        echo "Couldn't find a system copy of libreadline 6.x, only 5.x."
        echo "Building Sage's more recent version of libreadline."
    else
        echo "Could not find a system copy of libreadline 5.x or 6.x."
        echo "This is abnormal, so we better stop here..."
        exit 1
    fi
fi

cd src/

for patch in ../patches/*.patch; do
    patch -p1 <"$patch"
    if [ $? -ne 0 ]; then
        echo >&2 "Error applying '$patch'"
        exit 1
    fi
done

./configure --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib"
if [ $? -ne 0 ]; then
  echo "Error configuring readline."
  exit 1
fi

$MAKE
if [ $? -ne 0 ]; then
    echo "Error building readline."
    exit 1
fi

echo "'make' was successful.  Deleting old readline headers and libs"
echo "before running 'make install'..."
rm -rf "$SAGE_LOCAL"/include/readline/ "$SAGE_LOCAL"/lib/libreadline.*
if [ $? -ne 0 ]; then
    echo "Error removing old version of readline."
    exit 1
fi

$MAKE install
if [ $? -ne 0 ]; then
    echo "Error installing readline."
    exit 1
fi

if [ "$UNAME" = "Darwin" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.dylib
elif [ "$UNAME" = "CYGWIN" ]; then
  # It is of course very lame that readline names the file .dll.a, but that's what it does.
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.dll.a
elif [ "$UNAME" = "OpenBSD" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.so.6.2  # Untested. David Kirkby, 11th November 2010
elif [ "$UNAME" = "FreeBSD" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.so.6
elif [ "$UNAME" = "HP-UX" ]; then
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.sl.6
else
  DYLIB_NAME="$SAGE_LOCAL"/lib/libreadline.so
fi

# Make sure that the install worked, despite whatever the error
# code of build was.
if [ -f "$DYLIB_NAME" -a -f "$SAGE_LOCAL"/lib/libreadline.a ]; then
  # Fix permissions.
  echo "Fixing permissions..."
  chmod 755 "$SAGE_LOCAL"/lib/libreadline.*
  chmod 755 "$SAGE_LOCAL"/lib/libhistory.*
  exit 0
else
  echo "Error: Readline's build claims to have finished, but files that should have been built weren't."
  exit 1
fi
