#!/usr/bin/env bash
###########################################
## lcalc-20080205
###########################################

if [ -z "$SAGE_LOCAL" ] ; then
   echo "SAGE_LOCAL undefined ... exiting";
   echo "Maybe run 'sage -sh'?"
   exit 1
fi

set -e


# Add a sensible default optimisation flag. Change if necessary.
OPTIMIZATION_FLAGS="-O3"

# Most packages do not need all these set
# But it is better to do them all each time, rather than ommit
# a flag by mistake.

CFLAGS="$CFLAGS $OPTIMIZATION_FLAGS "
CXXFLAGS="$CXXFLAGS $OPTIMIZATION_FLAGS "
FCFLAGS="$FCFLAGS $OPTIMIZATION_FLAGS "
F77FLAGS="$F77FLAGS $OPTIMIZATION_FLAGS "
CPPFLAGS="$CPPFLAGS -I$SAGE_LOCAL/include"
LDFLAGS="$LDFLAGS -L$SAGE_LOCAL/lib"


# Compile for 64-bit if SAGE64 is set to 'yes'
if [ "x$SAGE64" = xyes ]  ; then
   echo "Building a 64-bit version of lcalc"

   # Both Sun and GNU compilers use -m64 to build 64-bit code,
   # but compilers from IBM (on AIX), and HP (on HP-UX)
   # do not. So allow the environment
   # variables CFLAG64 and CXXFLAG64 to set the flag to whatever
   # option the C and C++ compilers want for 64-bit code. If not default to -m64.

   if [ -z $CFLAG64 ] ; then
      CFLAG64=-m64
   fi

   if [ -z $CXXFLAG64 ] ; then
      CXXFLAG64=-m64
   fi
   export CFLAG64
   export CXXFLAG64

   CFLAGS="$CFLAGS $CFLAG64 "
   CXXFLAGS="$CXXFLAGS $CXXFLAG64 "
   FCFLAGS="$FCFLAGS $CXXFLAG64 "
   F77FLAGS="$F77FLAGS $CXXFLAG64 "
   # Some packages may need LDFLAGS and/or ABI set here.
   # LDFLAGS="$LDFLAGS -m64 "
   # ABI=64
   # Normally one would just add this to CXXFLAGS, but since the Makefile
   # does not import CXXFLAGS properly, and it would take a major change to
   # sort out the Makefile properly, the variable can just be added here,
   # and ${CXXFLAG64} added at the right point in the Makefile for 64-bit builds.
   export CXXFLAG64
fi

# If SAGE_DEBUG is set either unset (the default), or set to  'yes'
# Add debugging information.
# Since both the Sun and GNU compilers accept -g to give debugging information
# there is no need to do anything specific to one compiler or the other.

if [ "x$SAGE_DEBUG" = xyes ] ; then
   echo "Code will be built with debugging information present. Set 'SAGE_DEBUG' to 'no' if you don't want that."
   # Actually anything othe than 'yes' will cause
   # no debugging information to be added.
   CFLAGS="$CFLAGS -g "
   CXXFLAGS="$CXXFLAGS -g "
   FCFLAGS="$FCFLAGS -g "
   F77FLAGS="$F77FLAGS -g "
else
   echo "No debugging information will be used during the build of this package"
   echo "Unset SAGE_DEBUG if you want debugging information present (-g added)"
fi

# Add appropriate flag(s) to show all warnings.
# This test of a compiler is not perfect by any means, but
# is better than nothing.

if "$CC" -flags > /dev/null 2>&1 ; then
   SUN_COMPILER=1
   # The Sun compilers are fussy, and adding extra
   # warnings will just show too many.
else
   # Assume gcc if not the Sun C compiler.
   # Add -Wall to show all warnings.
   CFLAGS="$CFLAGS -Wall "
   CXXFLAGS="$CXXFLAGS -Wall "
   FCFLAGS="$FCFLAGS -Wall "
   F77FLAGS="$F77FLAGS -Wall "
   GNU_COMPILER=1
fi

# Determine if the C++ compiler is the Sun or GNU compiler
# Just to check we are not mising GNU and non-GNU.
if "$CXX" -flags > /dev/null 2>&1 ; then
   SUN_COMPILER=1
else
   GNU_COMPILER=1
fi

# Determine if the Fortran compiler is the Sun or GNU compiler
if [ -z "$SAGE_FORTRAN" ] ; then
   echo "No Fortran compiler has been defined. This is not normally a problem."
else
   if "$SAGE_FORTRAN" -flags > /dev/null 2>&1 ;  then
      SUN_COMPILER=1
   else
      GNU_COMPILER=1
   fi
fi


# Check if SAGE_FORTRAN_LIB is defined, that the file actually exists.
# SAGE_FORTRAN_LIB does not always need to be defined, but if it is defined, then
# the file should exist.
if [ -n "$SAGE_FORTRAN_LIB" ] &&  [ ! -e "$SAGE_FORTRAN_LIB" ]; then
   echo "SAGE_FORTRAN_LIB is defined as $SAGE_FORTRAN_LIB, but does not exist"
   exit 1
fi

# Checks that the user is not mixing the Sun and GNU compilers. This problem
# has been seen on code built with the aid of SCons, but in general could
# happen with any code if the user has specified a C compiler but not a C++ one.
# This problem is even more likely to occur with the Fortran compiler - I've done
# it myself when building Sage!

if [ "x$SUN_COMPILER" = "x1" ] && [ "x$GNU_COMPILER" = "x1" ] ; then
   echo "You are mixing the Sun and GNU C/C++/Fortran compilers"
   echo "Such a combination will lead to problems."
   echo "Check CC, CXX & SAGE_FORTRAN carefully."
   echo "Exiting ..."
   exit 1
fi

# These are all used by GNU to specify compilers.
echo "Using CC=$CC"
echo "Using CXX=$CXX"
echo "Using FC=$FC"
echo "Using F77=$F77"

# Used by Sage in connection with Fortran
echo "Using SAGE_FORTRAN=$SAGE_FORTRAN"
echo "Using SAGE_FORTRAN_LIB=$SAGE_FORTRAN_LIB"

# Flags which may be set.
echo "The following environment variables will be exported"
echo "Using CFLAG64=$CFLAG64"
echo "Using CXXFLAG64=$CXXFLAG64"
echo "Using CFLAGS=$CFLAGS"
echo "Using CXXFLAGS=$CXXFLAGS"
echo "Using FCFLAGS=$FCFLAGS"
echo "Using F77FLAGS=$F77FLAGS"
echo "Using CPPFLAGS=$CPPFLAGS"
echo "Using LDFLAGS=$LDFLAGS"
echo "Using ABI=$ABI"
echo "configure scripts and/or makefiles might override these later"
echo " "

# export everything. Probably not necessary in most cases.
export CFLAGS
export CXXFLAGS
export FCFLAGS
export F77FLAGS
export CPPFLAGS
export LDFLAGS
export ABI

# End of pretty general spkg-install file.
# Now do the specific things needed for this package (lcalc)

cd src/src

if [ "$UNAME" = "SunOS" ]; then
    LCALC_LIBS="-lpari -lmpfr -lgmpxx -lgmp -liberty"
else
    LCALC_LIBS="-lpari -lmpfr -lgmpxx -lgmp"
fi
export LCALC_LIBS
echo "Using LCALC_LIBS=$LCALC_LIBS"

# disable Cygwin build for now
if [ "$UNAME" = "CYGWIN" ]; then
#    cp patches/Lcommandline_elliptic.cc src/src/
    echo "Sorry, the lcalc build is currently broken"
    echo 1
fi

success() {
    set +e
    if [ $? -ne 0 ]; then
        echo "Error building lcalc '$1'"
        exit 1
    fi
    set -e
}

export DEFINES=""
cp ../../patches/Makefile.sage Makefile
set +e
make
success 'plain'

echo "Now copying over lcalc binary"
# Exit if the copy fails, by using set -e.
set -e
cp lcalc "$SAGE_LOCAL"/bin
echo "Now copying over lcalc library"
cp libLfunction.so $SAGE_LOCAL/lib/
if `test -d $SAGE_LOCAL/include/lcalc`; then
    rm -fr $SAGE_LOCAL/include/lcalc
    mkdir $SAGE_LOCAL/include/lcalc
    cp ../include/* $SAGE_LOCAL/include/lcalc
else
    mkdir $SAGE_LOCAL/include/lcalc
    cp ../include/* $SAGE_LOCAL/include/lcalc
fi




# since 'success' relies on an exit code, call set +e before running it.
set +e
success 'install'
