--- src/src/Lcommandline.cc	2010-01-31 16:16:45.000000000 +0100
+++ src/src/Lcommandline.cc	2011-05-10 17:22:10.000000000 +0200
@@ -31,6 +31,12 @@
 #include "Lcommandline.h"
 #include "cmdline.h"
 
+/* No-operation error recovery routine for PARI.  This is needed for
+ * allocatemem(), which calls the error recovery routine (because
+ * allocatemem() destroys the PARI stack).
+ */
+void pari_err_recover_nop(long errnum) {return;}
+
 int main (int argc, char *argv[])
 {
 
@@ -473,7 +479,13 @@
 
 #ifdef INCLUDE_PARI
         if(do_elliptic_curve){
-             allocatemoremem((int) N_terms*16+1000000); //XXXXXXXXX this should depend on whether we're double or long double or mpfr double
+             /* allocatemem() calls the callback function cb_pari_err_recover(),
+              * which we temporarily change to do nothing. */
+             void (*saved_err_recover)(long) = cb_pari_err_recover;
+             cb_pari_err_recover = pari_err_recover_nop;
+             allocatemem(N_terms*16 + 1000000); //XXXXXXXXX this should depend on whether we're double or long double or mpfr double
+             cb_pari_err_recover = saved_err_recover;
+
              if (my_verbose>0) cout << "Will precompute " << N_terms << " elliptic L-function dirichlet coefficients..." << endl;
              initialize_new_L(a1,a2,a3,a4,a6,N_terms); 
         }
--- src/src/Lcommandline_elliptic.cc	2010-01-31 16:16:45.000000000 +0100
+++ src/src/Lcommandline_elliptic.cc	2011-05-10 17:08:10.000000000 +0200
@@ -121,11 +121,11 @@
 
 
     F = cgetg(6, t_VEC);
-    F[1] = lgeti(BIGDEFAULTPREC);
-    F[2] = lgeti(BIGDEFAULTPREC);
-    F[3] = lgeti(BIGDEFAULTPREC);
-    F[4] = lgeti(BIGDEFAULTPREC);
-    F[5] = lgeti(BIGDEFAULTPREC);
+    F[1] = (long)cgeti(BIGDEFAULTPREC);
+    F[2] = (long)cgeti(BIGDEFAULTPREC);
+    F[3] = (long)cgeti(BIGDEFAULTPREC);
+    F[4] = (long)cgeti(BIGDEFAULTPREC);
+    F[5] = (long)cgeti(BIGDEFAULTPREC);
 
     //gaffsg(a1,(GEN) F[1]);
     //gaffsg(a2,(GEN) F[2]);
