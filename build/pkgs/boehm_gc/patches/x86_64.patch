--- src/libatomic_ops/src/atomic_ops/sysdeps/gcc/x86_64.h	2011-06-03 02:17:00.000000000 -0700
+++ src/libatomic_ops/src/atomic_ops/sysdeps/gcc/x86_64.h	2011-09-30 10:17:22.000000000 -0700
@@ -91,26 +91,37 @@
 #define AO_HAVE_int_fetch_and_add_full
 
 AO_INLINE void
-AO_or_full (volatile AO_t *p, AO_t incr)
+AO_and_full (volatile AO_t *p, AO_t value)
+{
+  __asm__ __volatile__ ("lock; andq %1, %0" :
+                        "=m" (*p) : "r" (value), "m" (*p) : "memory");
+}
+#define AO_HAVE_and_full
+
+AO_INLINE void
+AO_or_full (volatile AO_t *p, AO_t value)
 {
   __asm__ __volatile__ ("lock; orq %1, %0" :
-                        "=m" (*p) : "r" (incr), "m" (*p) : "memory");
+                        "=m" (*p) : "r" (value), "m" (*p) : "memory");
 }
 #define AO_HAVE_or_full
 
+AO_INLINE void
+AO_xor_full (volatile AO_t *p, AO_t value)
+{
+  __asm__ __volatile__ ("lock; xorq %1, %0" :
+                        "=m" (*p) : "r" (value), "m" (*p) : "memory");
+}
+#define AO_HAVE_xor_full
+
 AO_INLINE AO_TS_VAL_t
 AO_test_and_set_full(volatile AO_TS_t *addr)
 {
-# ifdef AO_XCHGB_RET_WORD
-    /* Workaround for a bug in LLVM v2.7 GAS.   */
-    unsigned oldval;
-# else
-    unsigned char oldval;
-# endif
+  unsigned char oldval;
   /* Note: the "xchg" instruction does not need a "lock" prefix */
   __asm__ __volatile__("xchgb %0, %1"
                 : "=q"(oldval), "=m"(*addr)
-                : "0"(0xff), "m"(*addr) : "memory");
+                : "0"((unsigned char)0xff), "m"(*addr) : "memory");
   return (AO_TS_VAL_t)oldval;
 }
 #define AO_HAVE_test_and_set_full
