B1;2000;0c#!/bin/sh
###########################################
## PARI
###########################################

TOP=`pwd`

# As of PARI 2.3.3, the compiler flag -fPIC is not added on Solaris, but it
# needs to be if using gcc. I assume the equivalent will be needed on
# other compilers.

if [ `uname` = "SunOS" ]; then
    sed 's/-fomit-frame-pointer/-fomit-frame-pointer -fPIC/g' src/config/get_cc > src/config/get_cc.$$
    mv src/config/get_cc.$$ src/config/get_cc
fi

cd src

# Extract the SEA data file in the appropriate place, so that the build pari will support
# fast point counting over finite fields.  Note that one has to download the seadata file
# from the PARI website and add it to src/.  This is the small version of that file -- there
# is also a huge version.
tar xf seadata.tar

#cp "$TOP"/patches/get_dlld config/

# mabshoff: This patch is to get around problem in PPC 32-bit Linux build
# (but it is ok on any other machine)
#cp "$TOP"/patches/get_dlcflags config/

# pjeremy: fix for FreeBSD: #7825
#cp "$TOP"/patches/get_kernel config/

# cwitty: disable -rpath
#cp "$TOP"/patches/get_ld config/

# cwitty: disable TeX; allow bz2 compression
#cp "$TOP"/patches/gphelp.in doc/

# Minh Van Nguyen: copy over patched get_cc (see ticket #7092). It's
# reported that 32-bit Fedora 11 would fail to build otherwise.
#if [ `uname` = "Linux" ]; then
#    cp "$TOP"/patches/get_cc config/get_cc
#fi

# This is needed or there are weird locale problems involving rpath
# with building Sage.
LC_ALL=C
export LC_ALL
LANG=C
export LANG

build()
{
    #  add the proper flags for 64-bit build mode on OS X and Open Solaris x64
    if [ "x$SAGE64" = xyes ]; then
	CFLAGS="-g -m64 " && export CFLAGS
    fi

    CUR=`pwd`

    # On my systems PARI does *not* build correctly with these set! (and
    # they are set by sage-env).  It builds, but doesn't run.  Something
    # about missing _start symbol.
    unset LD
    unset AR
    unset AS

    if [ "$PARI_EXTRA_OPTS" = "" ]; then
        PARI_EXTRA_OPTS=" --graphic=none "
    fi

    ./Configure $PARI_EXTRA_OPTS --prefix=$SAGE_LOCAL --with-readline=$SAGE_LOCAL --with-gmp=$SAGE_LOCAL --kernel=gmp --graphic=none

    if [ $? -ne 0 ]; then
        echo "ERROR - configure PARI with readline and gmp failed."
        exit 1
    fi

    if [ ! -f Makefile ]; then
        echo "Unable to configure PARI."
        exit 1
    fi

    echo "Building and install PARI"
    if [ "$UNAME" = "CYGWIN" ]; then
        # There are weird bugs in PARI's build process on Windows XP
        # under Cygwin.
        # Passing in this extra flag gets around the bug.
        $MAKE GMPINCLUDE=-I$SAGE_LOCAL/include EXTRADLLDFLAGS=-lgmp gp
    else
        $MAKE gp
    fi

    if [ $? -ne 0 ]; then
        echo "Error building GP"
        exit 1
    fi

    cp -f gp "$SAGE_LOCAL/bin/"    # avoid "make install"

    # Install documentation source (compressed), for use by gphelp.
    mkdir -p "$SAGE_LOCAL/share/pari/doc/"
    cp -f doc/usersch*.tex "$SAGE_LOCAL/share/pari/doc/"
    bzip2 -9 -f "$SAGE_LOCAL/share/pari/doc/"usersch*.tex
    cp -f doc/translations "$SAGE_LOCAL/share/pari/doc/"

    # And install gphelp.
    cp -f doc/gphelp "$SAGE_LOCAL/bin/"

    $MAKE install-lib-sta

    if [ $? -ne 0 ]; then
        echo "Error installing PARI static library"
        exit 1
    fi

    # Instead of "make install" we do the following, to avoid building
    # the PARI documentation (which requires latex; or more precisely,
    # *hangs* under a default cygwin with latex, since some fonts are missing).
    cd `config/objdir`
    $MAKE install-include

    if [ $? -ne 0 ]; then
        echo "Error installing PARI include files"
        exit 1
    fi

    cp -f libpari* $SAGE_LOCAL/lib/
    cd "$CUR"

    # On CYGWIN, need the dll for PARI to be in the same
    # directory as the gp binary, or it doesn't find it.
    # Note that just using a symlink doesn't work.
    if [ $UNAME = "CYGWIN" ]; then
        CUR="`pwd`"
        cd "$SAGE_LOCAL"/bin/
        cp -f "$SAGE_LOCAL"/lib/*pari*.dll .
        cd "$CUR"
    fi

    # The following is a hack to get the library installed correctly
    # on OS X.
    if [ $UNAME = "Darwin" ]; then
	echo "MAC OS X hack -- delete and reinstall libpari.a"
	rm -f Odarwin-ppc/*lib*
	$MAKE install-lib-sta

        if [ $? -ne 0 ]; then
            echo "Error Re-installing PARI static libraries (OS X trick)"
            exit 1
        fi

        cd `config/objdir`
        cp -f libpari* "$SAGE_LOCAL"/lib
        cd "$CUR"

        # Also another patch since paripriv.h won't compile right on OS X
        # when used by client Sage code.  So we replace it by a slightly
        # modified version.
	cp -pf "$TOP"/patches/paripriv.h "$SAGE_LOCAL"/include/pari/paripriv.h
	cp -pf "$TOP"/patches/paridecl.h "$SAGE_LOCAL"/include/pari/paridecl.h
    fi
    # Like on OS X (see above), the Sage library would not build
    # without some changes. Though on Solaris the changes are much simpler than
    # on OS X.
    if [ `uname` = "SunOS" ]; then
       set -e
       echo "Patching include/pari/paripriv.h so it works on Solaris"
       echo "The changes are much smaller than needed on OS X"
       cp  "$TOP"/patches/paripriv.h $SAGE_LOCAL/include/pari/paripriv.h
       set +e
    elif [ "$UNAME" = "CYGWIN" ]; then
       # We need to the same thing on Cygwin that we have to do on Solaris
       cp  "$TOP"/patches/paripriv.h $SAGE_LOCAL/include/pari/paripriv.h
    fi

    echo "Installing extra Galois groups data."
    make install-data
    if [ $? -ne 0 ]; then
        echo "Error installing extra galois groups data."
        exit 1
    fi
}

build

if [ $? -ne 0 ]; then
    echo "Error building PARI."
    exit 1
fi

if [ $UNAME="Darwin" -a -f $SAGE_LOCAL/lib/libpari.dylib ]; then
    exit 0
fi

if [ -f $SAGE_LOCAL/lib/libpari.so ]; then
    exit 0
fi

if [ $? -ne 0 ]; then
    echo "Error building PARI."
    exit 1
fi
