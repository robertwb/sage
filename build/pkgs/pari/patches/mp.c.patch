Index: src/kernel/gmp/mp.c
===================================================================
--- a/src/kernel/gmp/mp.c	(revision 13151)
+++ b/src/kernel/gmp/mp.c	(working copy)
@@ -45,18 +45,8 @@
 /*We need PARI invmod renamed to invmod_pari*/
 #define INVMOD_PARI
 
-static void *gmp_realloc(void *ptr, size_t old_size, size_t new_size) {
-  (void)old_size; return (void *) pari_realloc(ptr,new_size);
-}
-
-static void gmp_free(void *ptr, size_t old_size){
-  (void)old_size; pari_free(ptr);
-}
-
 int pari_kernel_init(void)
 {
-  /* Use pari_malloc instead of malloc */
-  mp_set_memory_functions((void *(*)(size_t)) pari_malloc, gmp_realloc, gmp_free);
   return 0;
 }
 
@@ -1036,7 +1026,16 @@
 
 /* EXACT INTEGER DIVISION */
 
-#if 1 /* use undocumented GMP interface */
+#ifndef PARI_DONT_USE_GMP_INTERNALS /* Use GMP/MPIR internals */
+/* 
+ * Note: This refers to directly accessing ("private") members of
+ *       GMP's mpz_t / __mpz_struct types, which are defined in gmp.h.
+ *       This is in fact (at least) compatible with both
+ *        - GMP (<= 5.0.1) *and*
+ *        - MPIR (<= 2.1.2),
+ *       so we *don't* disable the use by default.
+ */
+
 static void
 GEN2mpz(mpz_t X, GEN x)
 {
@@ -1095,7 +1094,7 @@
     mpz2GEN(z, Z); return z;
   }
 }
-#else
+#else /* Don't use GMP/MPIR internals */
 /* assume y != 0 and the division is exact */
 GEN
 diviuexact(GEN x, ulong y)
