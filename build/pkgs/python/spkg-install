#!/usr/bin/env bash
###########################################
## Python
###########################################

CUR=`pwd`

if [ -z "$SAGE_LOCAL" ]; then
    echo >&2 "SAGE_LOCAL undefined ... exiting"
    echo >&2 "Maybe run 'sage -sh'?"
    exit 1
fi

cd src

# PATCH
for patch in ../patches/*.patch; do
    patch -p1 <"$patch"
    if [ $? -ne 0 ]; then
        echo >&2 "Error: Patch \"$patch\" failed to apply."
        exit 1
    fi
done

# We are setting LDFLAGS and CPPFLAGS so that we pick up Sage's readline
LDFLAGS="-L$SAGE_LOCAL/lib $LDFLAGS"
export LDFLAGS

CPPFLAGS="-I$SAGE_LOCAL/include $CPPFLAGS"
export CPPFLAGS

# pymalloc screws with valgrind, so let's disable it
if [ "$SAGE_VALGRIND" = "yes" ]; then
    echo "Building Python without pymalloc"
    EXTRAFLAGS="--without-pymalloc"; export EXTRAFLAGS
fi

# Program around weird bug in build process:
#      Apparently if you have this:
#         export DISTUTILS_DEBUG=1
#      in your environment variables, the build craps out.  No idea why this
#       is.
#       -- Yi Qiang
#
# This bug was fixed in Python, but not yet in Python 2.7.2. So this fix
# can be removed the next time we upgrade our version of Python. See
#
#   http://bugs.python.org/issue6954
#
# for the fix.
#
unset DISTUTILS_DEBUG



build()
{
    rm -f "$SAGE_LOCAL"/lib/libpython*

    EXTRAFLAGS="$EXTRAFLAGS --enable-shared"; export EXTRAFLAGS

    if [ `uname` = "Darwin" ]; then
        if [ "x$SAGE64" = xyes ]; then
            echo "64 bit OSX build enabled"
            OPT="-g -O3 -m64 -Wall -Wstrict-prototypes"; export OPT
            ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib" \
	    --enable-unicode=ucs4 --with-gcc="gcc -m64" --disable-toolbox-glue
        else
            ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib" \
	    --enable-unicode=ucs4 --disable-toolbox-glue
        fi
    elif [ `uname` = "SunOS" ]; then
        if [ "x$SAGE64" = xyes ]; then
            echo "64 bit Open Solaris build enabled"
            OPT="-g -O3 -m64 -Wall -Wstrict-prototypes"; export OPT
            ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL"  --libdir="$SAGE_LOCAL/lib" \
            --enable-unicode=ucs4 --with-gcc="gcc -m64"
        else
            ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL"  --libdir="$SAGE_LOCAL/lib" \
            --enable-unicode=ucs4
        fi
    else
        ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL" --libdir="$SAGE_LOCAL/lib"  --enable-unicode=ucs4 \
            CC="$CC $CFLAGS" CXX="$CXX $CXXFLAGS"
    fi


    if [ $? -ne 0 ]; then
        echo >&2 "Error configuring Python."
        exit 1
    fi

    $MAKE
    if [ $? -ne 0 ]; then
        echo >&2 "Error building Python."
        exit 1
    fi

    # Running 'make install' in parallel is a bad idea, so we use
    # only 1 job.
    # The "-i" option to ignore errors is crucial, especially in the
    # case of a major upgrade.
    $MAKE -i -j1 install
    if [ $? -ne 0 ]; then
        echo >&2 "Error installing Python."
        exit 1
    fi
}


build

cd "$SAGE_LOCAL/lib"

# If we are upgrading from Python-2.6, remove compiled Python files.
# We do not care about still older Python versions, since upgrades
# from such old Sage versions are not supported anyway.
if [ -d python2.6 ]; then
    rm -rf "$SAGE_ROOT"/devel/sage-*/build
fi

# Make symbolic link (after removing old link first)
rm -f python
ln -s python2.7 python
if [ $? -ne 0 ]; then
    echo >&2 "Error creating symbolic link"
    exit 1
fi

# Remove previous Python installs
rm -rf python2.6


# Make sure extension modules were built correctly.
# All these modules are important and if any one
# fails to build, Sage will not work.

echo "Testing importing of various modules..."
import_errors=false
for module in math hashlib crypt ; do
   "$SAGE_LOCAL/bin/python" -c "import $module"
   if [ $? -eq 0 ] ; then
      echo "$module module imported OK"
   else
      echo >&2 "$module module failed to import"
      import_errors=true
      # exit 1 # not yet
   fi
done

if $import_errors; then
    echo >&2 "Error: One or more modules failed to import."
    # Check if we are on Debian or one of its derivatives:
    if { command -v dpkg && ! command -v dpkg-architecture; } >/dev/null; then
        echo >&2 "You may have to install 'dpkg-architecture'"
        echo >&2 "which is part of the Debian package 'dpkg-dev'."
        echo >&2 "Try installing it by typing"
        echo >&2 "    sudo apt-get install dpkg-dev"
        echo >&2 "and rerun 'make'."
    fi
    exit 1
fi
