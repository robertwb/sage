#!/usr/bin/env bash
###########################################
## Python
###########################################

CUR=`pwd`

if [ "$SAGE_LOCAL" = "" ]; then
   echo "SAGE_LOCAL undefined ... exiting";
   echo "Maybe run 'sage -sh'?"
   exit 1
fi

# This tells Bash to exit the script if any statement returns a non-true
# value.
set -e

# PATCH

cp patches/ctypes__init__.py src/Lib/ctypes/__init__.py
if [ $? -ne 0 ]; then
    echo "Error copying patched ctypes"
    exit 1
fi

cp patches/locale.py src/Lib/
if [ $? -ne 0 ]; then
    echo "Error copying patched locale.py"
    exit 1
fi

cp patches/pkgutil.py src/Lib/pkgutil.py
if [ $? -ne 0 ]; then
    echo "Error copying patched pkgutil.py"
    exit 1
fi

cp patches/sdist.py src/Lib/distutils/command/sdist.py
if [ $? -ne 0 ]; then
    echo "Error copying patched sdist.py"
    exit 1
fi

cp patches/socket.py src/Lib/socket.py
if [ $? -ne 0 ]; then
    echo "Error copying patched socket.py"
    exit 1
fi

# Readline patch: http://bugs.python.org/file14599/python-2.6-readline.patch
cp patches/readline.c-spacebug src/Modules/readline.c
if [ $? -ne 0 ]; then
    echo "Error copying patched readline.c"
    exit 1
fi


# We are setting LDFLAGS and CPPFLAGS so that we pick up Sage's readline
LDFLAGS="-L$SAGE_LOCAL/lib $LDFLAGS"
export LDFLAGS

CPPFLAGS="-I$SAGE_LOCAL/include $CPPFLAGS"
export CPPFLAGS

# pymalloc screws with valgrind, so let's disable it
if [ "$SAGE_VALGRIND" = "yes" ]; then
    echo "Building Python without pymalloc"
    EXTRAFLAGS="--without-pymalloc"; export EXTRAFLAGS
fi

# Program around weird bug in build process:
#      Apparently if you have this:
#         export DISTUTILS_DEBUG=1
#      in your environment variables, the build craps out.  No idea why this
#       is.
#       -- Yi Qiang

unset DISTUTILS_DEBUG


cd src

touch Include/*

patch()
{
    # The following patch for fixing broken readline behavior on
    # Itanium Linux definitely does *not* work on anything else.
    if [ "`uname -m`" = "ia64" -a "`uname`" = "Linux" ]; then
        echo "Updating readline.c for Linux/Itanium"
	cp ../patches/readline.c-Itanium-fix Modules/readline.c
    fi
}

build()
{
    # do *not* put --enable-shared here!  this breaks building
    # shared extension modules, at least in Python 2.5.
    rm -f "$SAGE_LOCAL"/lib/libpython*

    if [ `uname` = "Darwin" ]; then
        if [ "$SAGE64" = "yes" ]; then
            echo "64 bit OSX 10.5 build enabled"
            OPT="-g -O3 -m64 -Wall -Wstrict-prototypes"; export OPT
            ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL" --without-libpng --enable-unicode=ucs4 \
            --with-gcc="gcc -m64" --disable-toolbox-glue
        else
            ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL" --without-libpng --enable-unicode=ucs4 \
            --disable-toolbox-glue
        fi
    else
        ./configure $EXTRAFLAGS --prefix="$SAGE_LOCAL" --without-libpng --enable-unicode=ucs4
    fi


    if [ $? -ne 0 ]; then
        echo "Error configuring Python."
        exit 1
    fi

    $MAKE
    if [ $? -ne 0 ]; then
        echo "Error building Python."
        exit 1
    fi

    # running 'make install' in parallel is a bad, bad idea
    MAKE=make; export MAKE
    # the "-i" is crucial, esp., in the case of a major upgrade
    make -i install
    if [ $? -ne 0 ]; then
        echo "Error installing Python."
        exit 1
    fi
}

patch

# Do not exit script if there is an error, but instead print an
# informative error message. This is helps in determining why the
# configuration, compilation or installation failed. So put this before the
# build() function.
set +e

build

# This tells Bash to exit the script if any statement returns a non-true
# value.
set -e

cd $SAGE_LOCAL/lib

if [ -d python2.5/site-packages ]; then
   mv python2.5/site-packages python2.6/site-packages-old
fi

rm -rf python/python2.6 python/python2.5 python/python python python2.4 python2.5
ln -s python2.6 python

# Sleeping for three seconds so that parallel 'make install' catches up
# with the following test.
echo "Sleeping for three seconds before testing python"
sleep 3

# Make sure sufficient crypto support is available in the built python.
# This is critical.
python -c "import hashlib"

if [ $? -eq 0 -a -f "$SAGE_LOCAL/bin/python" ]; then
    echo "hashlib module imported"
    exit 0
else
    echo "hashlib module failed to import"
    exit 1
fi
