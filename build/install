#!/usr/bin/env bash

########################################################################
# Set various environment variables
########################################################################

# Assume current directory is SAGE_ROOT/spkg
SAGE_ROOT=`cd .. && pwd -P`
SAGE_LOCAL="$SAGE_ROOT/local"
SAGE_LOGS="$SAGE_ROOT/spkg/logs"
PATH="$SAGE_ROOT/spkg/bin:$SAGE_LOCAL/bin:$PATH"
PYTHONPATH="$SAGE_LOCAL"
PKGDIR=standard
export SAGE_ROOT SAGE_LOCAL SAGE_LOGS PATH PYTHONPATH

mkdir -p "$SAGE_LOGS"

# Storing the start time of the build process. The time is stored in
# seconds since 1970-01-01 in a hidden file called
# "SAGE_ROOT/.BUILDSTART". See ticket #6744.
echo `date -u "+%s"` > "$SAGE_ROOT/.BUILDSTART"

########################################################################
# Fixes for upgraded Sage versions
########################################################################
# The script 'pipestatus' used to be autogenerated by this file.  It
# should be present in any version of Sage starting with 4.5.  In
# #11073, the autogeneration was removed, so we just check to see if
# the file is missing.
if [ ! -f pipestatus ]; then
    cat >&2 <<EOF
Error: the script 'pipestatus' is missing.  If you are trying to
upgrade, your original version of Sage is too old, so upgrading to a
5.x version of Sage won't work.  Your options are:
 - Upgrading first to sage-4.8 and then upgrading again to sage-5.x.
 - Downloading a new binary version of Sage.
 - Building a new source version from scratch.

EOF
    exit 2
fi

###############################################################################
# Make upgrading work: If this script is called from sage-upgrade,
# either sage-upgrade has set SAGE_UPGRADING to "yes",
# or we have an old version of sage-upgrade that doesn't contain
# the string "SAGE_UPGRADING".
# If SAGE_UPGRADING is not set to "yes", or sage-upgrade does not (yet)
# exist, do the usual build (without setting SAGE_SPKG_OPTS).
###############################################################################
if [ -f "$SAGE_LOCAL/bin/sage-upgrade" ] && \
    ! grep SAGE_UPGRADING "$SAGE_LOCAL/bin/sage-upgrade" >/dev/null; then
    SAGE_UPGRADING=yes
fi
if [ "$SAGE_UPGRADING" = yes ]; then
    # We're doing an upgrade.
    # Let the Makefile (spkg/standard/deps) call sage-spkg with "-f"
    # to force rebuilding dependent packages, too:
    export SAGE_SPKG_OPTS="-f"
fi

###############################################################################
# Create $SAGE_ROOT/spkg/Makefile starting from spkg/standard/deps
###############################################################################

exec 3>Makefile

cat >&3 <<EOF
#==============================================================================
# This file has been automatically generated by
#   $SAGE_ROOT/spkg/install
# You should not edit it by hand
#==============================================================================

EOF

# If the user (or the Makefile) has set SAGE_PARALLEL_SPKG_BUILD=no,
# then turn off parallel building: disable just building multiple
# packages at the same time.   Individual packages can still be built
# in parallel by specifying '-j' in $MAKE.
if [ "${SAGE_PARALLEL_SPKG_BUILD:-yes}" = no ]; then
    echo ".NOTPARALLEL:" >&3
    echo "" >&3
fi

# Usage: newest_version_base $pkg
# Print version number of latest (according to modification time)
# base package $pkg
newest_version_base() {
    PKG=$1
    # As a fallback, we also look at the latest installed package.
    for FILE in `{ ls -1t base/$PKG-*-install; ls -1t installed/$PKG-*; } 2>/dev/null`
    do
        ANS=`echo "$FILE" | sed 's|.*/||; s|-install||'`
        if [ -n "$ANS" ]; then
            echo "$ANS"
            return 0
        fi
    done

    echo >&2 "Cannot determine latest version of $PKG."
    echo "$PKG"
    return 1
}

# Usage: newest_version $pkg
# Print version number of latest (according to modification time)
# standard or optional package $pkg
newest_version() {
    PKG=$1
    # First find the most recent spkg.  We also look for *optional*
    # packages since downloaded packages arrive in spkg/optional.
    # As a fallback, we also look at the latest installed package.
    for FILE in `{ ls -1t standard/$PKG-*.spkg optional/$PKG-*.spkg; ls -1t installed/$PKG-*; } 2>/dev/null`
    do
        ANS=`echo "$FILE" | sed 's|.*/||; s|\.spkg||'`
        if [ -n "$ANS" ]; then
            echo "$ANS"
            return 0
        fi
    done

    echo >&2 "Cannot determine latest version of $PKG."
    echo "$PKG"
    return 1
}

cat >&3 <<EOF
# Base packages
DIR=`newest_version_base dir`
PREREQ=`newest_version_base prereq`

# Standard packages
ATLAS=`newest_version atlas`
BLAS=`newest_version blas`
BOEHM_GC=`newest_version boehm_gc`
BOOST_CROPPED=`newest_version boost-cropped`
BZIP2=`newest_version bzip2`
CDDLIB=`newest_version cddlib`
CEPHES=`newest_version cephes`
CLIQUER=`newest_version cliquer`
CONWAY=`newest_version conway_polynomials`
CVXOPT=`newest_version cvxopt`
CYTHON=`newest_version cython`
DOCUTILS=`newest_version docutils`
ECL=`newest_version ecl`
ECLIB=`newest_version eclib`
ECM=`newest_version ecm`
ELLIPTIC_CURVES=`newest_version elliptic_curves`
EXTCODE=`newest_version extcode`
FLINT=`newest_version flint`
FLINTQS=`newest_version flintqs`
FORTRAN=`newest_version fortran`
FPLLL=`newest_version libfplll`
FREETYPE=`newest_version freetype`
GAP=`newest_version gap`
GD=`newest_version gd`
GDMODULE=`newest_version gdmodule`
GENUS2REDUCTION=`newest_version genus2reduction`
GFAN=`newest_version gfan`
GIVARO=`newest_version givaro`
GLPK=`newest_version glpk`
GNUTLS=`newest_version gnutls`
GRAPHS=`newest_version graphs`
GSL=`newest_version gsl`
ICONV=`newest_version iconv`
IML=`newest_version iml`
IPYTHON=`newest_version ipython`
JINJA2=`newest_version jinja2`
LAPACK=`newest_version lapack`
LCALC=`newest_version lcalc`
LIBGCRYPT=`newest_version libgcrypt`
LIBGPG_ERROR=`newest_version libgpg_error`
LIBPNG=`newest_version libpng`
LINBOX=`newest_version linbox`
M4RI=`newest_version libm4ri`
M4RIE=`newest_version libm4rie`
MATPLOTLIB=`newest_version matplotlib`
MAXIMA=`newest_version maxima`
MERCURIAL=`newest_version mercurial`
MOIN=`newest_version moin`
MPFI=`newest_version mpfi`
MPFR=`newest_version mpfr`
MPIR=`newest_version mpir`
MPMATH=`newest_version mpmath`
NETWORKX=`newest_version networkx`
NTL=`newest_version ntl`
NUMPY=`newest_version numpy`
OPENCDK=`newest_version opencdk`
PALP=`newest_version palp`
PARI=`newest_version pari`
PATCH=`newest_version patch`
PEXPECT=`newest_version pexpect`
PIL=`newest_version pil`
POLYBORI=`newest_version polybori`
POLYTOPES_DB=`newest_version polytopes_db`
PPL=`newest_version ppl`
PYCRYPTO=`newest_version pycrypto`
PYGMENTS=`newest_version pygments`
PYNAC=`newest_version pynac`
PYTHON=`newest_version python`
PYTHON_GNUTLS=`newest_version python_gnutls`
R=`newest_version r`
RATPOINTS=`newest_version ratpoints`
READLINE=`newest_version readline`
RUBIKS=`newest_version rubiks`
SAGE=`newest_version sage`
SAGENB=`newest_version sagenb`
SAGETEX=`newest_version sagetex`
SAGE_ROOT_REPO=`newest_version sage_root`
SAGE_SCRIPTS=`newest_version sage_scripts`
SCIPY=`newest_version scipy`
SCONS=`newest_version scons`
SETUPTOOLS=`newest_version setuptools`
SINGULAR=`newest_version singular`
SPHINX=`newest_version sphinx`
SQLALCHEMY=`newest_version sqlalchemy`
SQLITE=`newest_version sqlite`
SYMMETRICA=`newest_version symmetrica`
SYMPOW=`newest_version sympow`
SYMPY=`newest_version sympy`
TACHYON=`newest_version tachyon`
TERMCAP=`newest_version termcap`
TWISTED=`newest_version twisted`
ZLIB=`newest_version zlib`
ZNPOLY=`newest_version zn_poly`
ZODB=`newest_version zodb3`

EOF

# Copy spkg/standard/deps
cat >&3 <<EOF

#==============================================================================
# What follows now is a copy of
#   $SAGE_ROOT/spkg/standard/deps
#==============================================================================

EOF

cat standard/deps >&3

# Close the Makefile
exec 3>&-

# Skip the rest if nothing to do (i.e., to [re]build).
# * If "make" doesn't understand the -q option (although we require
#   GNU make, which supports it), it should exit with a non-zero status
#   which is not a problem.
# * Only do this check if spkg/bin/sage-spkg exists, as that means we
#   are running sage-5.x and sage-spkg understands MAKEFLAGS.
#   If we are upgrading, we might have a pre-4.8 version of sage-spkg
#   which doesn't check MAKEFLAGS.
#   See Trac #12248 and also #12016.
if [ -f "$SAGE_ROOT/spkg/bin/sage-spkg" ]; then
    if ${MAKE:-make} -q $1; then
        echo "Nothing to (re)build / all up-to-date."
        exit 0
    fi
fi

# Dump environment for debugging purposes:
echo "*** ALL ENVIRONMENT VARIABLES BEFORE BUILD: ***"
env | sort
echo "***********************************************"

###############################################################################
# NOW do the actual build:
###############################################################################
time ${MAKE:-make} $1
if [ $? -ne 0 ]; then
    echo >&2 "Error building Sage."
    exit 1
fi

# Build succeeded.
echo "Sage build/upgrade complete!"

if [ "$1" = "all" ]; then
    echo
    echo "To install small scripts to directly run Sage's versions of GAP,"
    echo "the PARI/GP interpreter, Maxima, or Singular etc. (by typing e.g."
    echo "just 'gap' or 'gp') into a standard 'bin' directory, start Sage"
    echo "by typing 'sage' (or './sage') and enter something like"
    echo
    echo "    install_scripts('/usr/local/bin')"
    echo
    echo "at the Sage command prompt ('sage:')."
    echo
    echo "If you issued 'make', 'make all', or a similar command, then the"
    echo "HTML version of the documentation will be built right now."
    echo "Otherwise, if you want to (re)build the HTML documentation,"
    echo "run 'make doc'.  To build the PDF version, run 'make doc-pdf'."
    echo
fi
