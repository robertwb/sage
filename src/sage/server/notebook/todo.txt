TODO:

[] rename workbook -- really workbooks should just be files
   on the computer that can be anywhere -- while working with them
   they are stored in the local notebook directory, but they should
   be save-able / load-able from anywhere on the computer / network.

[] (Note that the fact that tab completion doesn't currently
complete, but only lists completions, is a NotImplementedError
and nothing else.)

[] I'll make control-up and control-down move between input boxes
(instead of tab).

[] output should update only the end, not the whole thing every time.

[] And the plan is that the notebook should be usable mouse free with,
at least, no less functionality than one has in the command line.
(I.e., the mouse may give you more functionality than the command
line, but you won't loose functionality that you had on the command
line.  Right now this isn't the case, e.g., there's no reverse search
or history scroll yet.)

BUGS:
 [] restart doesn't reset the output box in which it occurs.
 [] attached files list doesn't get updated
 [] fails if load a deleted worksheet.
 [] fails if worksheet 0 is deleted.
 [] put the output in nowrap, then
    import time
    for i in range(100):
       time.sleep(1)
       print i

IDEAS:
[] Make it so tracebacks in output can be toggled between showing
the inside of the traceback and not via some javascript, with the
default not showing the traceback (just the first and last line).

[] Ability to load a plain text file log, e.g.,

 sage:  k=linbox.GFq(2,8,GF(2**8).polynomial())
 sage:  R.<x,y>=PolynomialRing(k,2)
 sage:  f=k.random_element()*x^3+x*y*k.random_element()+k.random_element();f
  _3 = 118 + 50*x*y + 183*x^3
 sage:  time for i in range(1000): _ = f*f

and have it appear immediately as if it were a worksheet.
(Other direction is basically done now.)

[] SAJAX -- ajax terminal -- make it embedded somehow (?) into
   the notebook, e.g., as another tab.

 [] tabbed worksheets.

[] >   In an xterm, I can copy and paste input and output to e-mail
>   an example session to someone.  I can't make firefox copy
>   multiple boxes.

That's because currently the input boxes are all "text areas"
even the non-active ones.  If I change them to be <pre>'s when
they aren't selected then you will be able to copy everything
except the box you're currently typing into.


[] restart should start on same worksheet as before.

[] quit function should do something

[] workbooks -- link

[] keyboard access to variable.

[] undelete -- with a countdown that is interruptable.

[] i need to rethink the design of having multiple worksheets at once:
    possibilities:
        xx have multiple worksheet div's all in the html, each
           with an id.  have a way to "close" a worksheet, i.e.,
           button in upper right (Maybe a close link like the Help, etc. links).
           the update function has to tell about *all* the worksheets
           rather than just one:
               update contains:
                    number of worksheets with data
                    worksheet number <data>  ...
                    worksheet number <data>  ...
               and the worksheet data will allow us to set the color
               on the the worksheets tab on the left.
    (all html downloaded at once; so switching done entirely in js)
     -- new
     -- switching
     -- deleting

[] So to indent lines, seems like the spacebar is the only option.

[] It'll be nice to record the history of commands like in a shell.

[] HTML cells in addition to SAGE code cells; or just better typesetting
   support and way to hide the input (!)

[] print -- javascript button, which displays the whole page as one page
   (no scrolling, etc.), etc., and calls print.

[] click on variable and get a download

[] easy user override of css elements.

[] should be able to download/upload complete worksheets as a single file
   and move them in/out of other notebooks.  How?
     1. an sobj defines the worksheet, and a tarball the data and graphs,
        so tarball it up with the sobj.
     2. interface -- when you mouse over a worksheet, a menu appears with
        the option to download it to a file.
     3. Also, there's an upload link in the worksheets list.

[] good support for a "presentation" mode.

[] Markup mode?:
   If the input box begins in %html then the output is in html instead
   of plain text, and the input box gets shrunk.  This would allow for
   sophisticated markup.

[] favicon

[] os.sytem('pydoc -k <...>')  -- interesting

[] debugger -- some way to enter pdb and use it from web interface

[] when eval: always insert a new cell after the current one???
     mathematica does *not* do this, but word processors do.

[] save all objects in a session to a single variable:
     - a button in the variables pane -- asks for var name.
       OR drag variables pane to worksheets (?).


OLD TODO:
   [] restart (with confirm) button -- lets you restart the
      client SAGE interpreter that is being run by the web server.
      This way you don't have to keep restarting the web server
      when doing code development.  Have button that can also
      save session, restart, and load session!
(not needed)
   [] ability to select any subset of the cells, e.g., by
      checking on a button next to each or something and do
      each of the following ops:
          delete them
          export them as another worksheet
      Also, should be able to insert a worksheet between two cells.
      Basically, copy, paste, and delete with bits of worksheets.
      Should also be able to reorganize them.
(not really needed)
   [x] way to time how long a computation takes.
   [x] word wrap -- default on, but toggle on/off on a cell-by-cell basis
      (will require ajax to do the wrapped/non-wrapped computation, or
      store both versions in the html... so will work offline)
   [x] input one form shouldn't delete data from any other forms;
       e.g., you could be editing one form and submit another!
   [x] The whole interface needs to be slimmed down so bunches of single
      line input (and output) will work.
   [] Ability to switch from one log (=worksheet) to another via
      the web interface.
   [] Add text annotation that is not evaluated
      between blocks (maybe in html?)
   [] Ability to interrupt running calculations directly
      from the web interface (no console access)
   [] Nice animation while a computation is proceeding.
   [] Some way to show output as it is computed.
   [] Option to delete blocks
   [] Make block expand if enter a lot of text into it.
   [] Evaluate the entire worksheet
   [] Theme-able / skin-able
   [] Downloading and access to exact log of IO to client SAGE process
   [] Saving and loading of all objects in a session
   [] Save session objects as to log objects so don't have to re-eval?
   [] The entire page is resent/updated every time you hit shift-enter;
      using 'AJAX' this flicker/lag could be completely eliminated.
   [] When pressing shift-enter a line feed is inserted temporarily
      into the inbox, which is unnerving.
   [] Add authentication
   [] Embed the log object in the html file, so server session
      can be restared directly using the html file!  E.g., embed
      pickled Log object in a comment at end of the .html file.
   [] Ability to upload and download source files (to be run)
      via web interface; maybe ability to edit them too, via some
      'rich' code editing javascript 'widget'.
   [] rewrite tables using CSS
   [] load and attaching scripts.
   [] a way to interactively watch the output of a running computation
      (in verbose mode).
   [] undo -- have infinite undo and redo of the SAGE *log*, i.e.,
      text I/O (and possibly graphics).  does not save *state* of
      the "sage kernel".
   [] switch into mode where the whole input box is parsed by
      another system, e.g., Maxima.

DONE
   [x] Saving and loading of individual objects: -- should be trivial,
       but is very tedious right now.
       (maybe all relative paths for save/load should be redirected
        to sage_server directory?!)
   [x] The "move to the current input box" javascript *only* works
      with firefox (not opera, not konqueror); also this should
      just keep the page position where it is rather than move it.
      Moving to a more AJAX-ish model would alternatively fix this, maybe.
   [x] A. Clemesha: shrink/expand input/output blocks
   [x] A. Clemesha: When hit shift-enter the next text box should be made
      into focus.
   [x] Embedded graphics from plots;
       also embed png from latexing of math objects (so they look nice).


DONE:
[x] save_session broken.



[x] Manipulating cell list:
     -- add new cell (automatic at end)
     -- add cell between two existing cells
     -- delete cell

[x] Saved objects:
     -- info: load/save

[x] SAGE restart (with confirmation alert)

[x] interrupt -- should add (interrupted) to top of all output

[x] interrupt -- red only when comp running!!

[x] Fix worksheet area so it doesn't scroll horizontally

[x] Separate the variables / scripts panes from the worksheets / objects panes.

[x] Variables:
     -- info:
     -- change typeface of "type" of variable, e.g., in parens and dimmer,
        but variable name in bold.

[x] Introspection:
      Tab completion / search / help -- bring in from before.

[x] bug: when backspace away a cell, get taken to next -- should get taken to previous.

[x] another idea:
     where to comps get run?  they could all be run from
     an explicitly given directory when the notebook is
     started.  Then new files are copied to their cell
     directories.    another possibility:
       define a variable "HOME" in all sage0's,
       which is the directory
       from which SAGE was started.   Then users
       can load by using HOME + ...


[x] fix variables pane

[x] support for .sage/init.sage

[x] '\n' alone on a line breaks it.  If it isn't the last line it's ok.

[x] preparser fix -- triple quoted strings in middle of loaded files should be ignored

[x] Scripts: way to load/attach via web interface.

[] some "magic":
 done    - attach   # will work from DIR if not abs path.
 done    - load     # will work from DIR if not abs path.
 done    - save_session -- saves to objects dir

 done    - %gp: at the top of a block and it gets executed in pari.

[] latex -- support for embedding in output?, e.g.,
        view(x)
   embeds latex repn.

[x] todo: make the saved state file backup the last safe state, to
   avoid the potential for corruption if the server Python process is
   killed while saving state.  Also, this could easily allow for a
   sophisticated undo function; design ideas welcome...

[] variables: easy way to save any variable to a var with the same name
   in the common saved objects store.
   xxx -- no save session good enough...

[] worksheets list -- could have status information, e.g.,
   if a comp is running, could make the entry redish until
   it is done.

 [x] fix that this happens:
    s() if not __x__ in __SAGENB__globals and __x__[0] != "_" and str(type(globals( )[__x__])) != "function"]) ' ()
