"""
Relative Number Field Ideals

AUTHOR:
   -- Steven Sivek (2005-05-16)
   -- William Stein (2007-09-06)
   -- Nick Alexander (2009-01)

EXAMPLEES:
    sage: K.<a,b> = NumberField([x^2 + 1, x^2 + 2])
    sage: A = K.absolute_field('z')
    sage: I = A.factor(3)[0][0]
    sage: from_A, to_A = A.structure()
    sage: G = [from_A(z) for z in I.gens()]; G
    [3, (-2*b - 1)*a + b - 1]
    sage: K.fractional_ideal(G)
    Fractional ideal ((-b + 1)*a - b - 2)
    sage: K.fractional_ideal(G).absolute_ideal().norm().factor()
    3^2
"""

#*****************************************************************************
#       Copyright (C) 2007 William Stein <wstein@gmail.com>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#
#    This code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    General Public License for more details.
#
#  The full text of the GPL is available at:
#
#                  http://www.gnu.org/licenses/
#*****************************************************************************

from number_field_ideal import NumberFieldFractionalIdeal, convert_from_zk_basis

import sage.rings.rational_field as rational_field
QQ = rational_field.RationalField()

class NumberFieldFractionalIdeal_rel(NumberFieldFractionalIdeal):
    """
    An ideal of a relative number field.

    EXAMPLES:
        sage: K.<a> = NumberField([x^2 + 1, x^2 + 2]); K
        Number Field in a0 with defining polynomial x^2 + 1 over its base field
        sage: i = K.ideal(38); i
        Fractional ideal (38)

    WARNING: Ideals in relative number fields are broken:
        sage: K.<a0, a1> = NumberField([x^2 + 1, x^2 + 2]); K
        Number Field in a0 with defining polynomial x^2 + 1 over its base field
        sage: i = K.ideal([a0+1]); i # random
        Fractional ideal (-a1*a0)
        sage: (g, ) = i.gens_reduced(); g # random
        -a1*a0
        sage: (g / (a0 + 1)).is_integral()
        True
        sage: ((a0 + 1) / g).is_integral()
        True
    """
    def pari_rhnf(self):
        """
        Return PARI's representation of this relative ideal in Hermite
        normal form.

        EXAMPLES:

        """
        try:
            return self.__pari_rhnf
        except AttributeError:
            nf = self.number_field().absolute_field('a').pari_nf()
            rnf = self.number_field().pari_rnf()
            L_hnf = self.absolute_ideal().pari_hnf()
            self.__pari_rhnf = rnf.rnfidealabstorel(nf.getattr('zk')*L_hnf)
            return self.__pari_rhnf

    def absolute_ideal(self):
        """
        If this is an ideal in the extension L/K, return the ideal with
        the same generators in the absolute field L/Q.

        EXAMPLES:
            sage: x = ZZ['x'].0
            sage: K.<b> = NumberField(x^2 - 2)
            sage: L.<c> = K.extension(x^2 - b)
            sage: F = L.absolute_field('a')

            Let's check an inert ideal first:

            sage: P = F.factor(13)[0][0]; P
            Fractional ideal (13)
            sage: J = L.ideal(13)
            sage: J.absolute_ideal()
            Fractional ideal (13)

            Now how about a non-trivial ideal in L, but one that is
            actually principal in the subfield K:

            sage: J = L.ideal(b); J
            Fractional ideal (b)
            sage: J.absolute_ideal()
            Fractional ideal (a^2)
            sage: J.norm()
            Fractional ideal (2)
            sage: J.norm().norm()
            4
            sage: J.absolute_ideal().norm()
            4

            Now an ideal not generated by an element of K:

            sage: J = L.ideal(c); J
            Fractional ideal (c)
            sage: J.absolute_ideal()
            Fractional ideal (a)
            sage: J.absolute_ideal().norm()
            2
            sage: J.ideal_below()
            Fractional ideal (b)
            sage: J.ideal_below().norm()
            2
        """
        try:
            return self.__absolute_ideal
        except AttributeError:
            L = self.number_field().absolute_field('a')
            genlist = [ L( x.polynomial() ) for x in self.gens() ]
            self.__absolute_ideal = L.ideal(genlist)
            return self.__absolute_ideal

    def _from_absolute_ideal(self, id):
        r"""
        Convert the absolute ideal id to a relative number field ideal.

        Assumes id.number_field() == self.absolute_field('a').

        WARNING:  This is an internal helper function.

        TESTS:
            sage: L.<a, b> = QQ.extension([x^2 + 71, x^3 + 2*x + 1])
            sage: (2*a + b).norm()
            22584817
            sage: J = L.ideal(2*a + b); J
            Fractional ideal (22584817, a - b - 120132)
            sage: (2*a + b) in J
            True
            sage: (- b - 120132).minpoly()
            x + b + 120132
            sage: J.norm().norm()
            22584817
            sage: J.absolute_ideal()
            Fractional ideal (188/812911*a^5 - 1/812911*a^4 + 45120/812911*a^3 - 56/73901*a^2 + 3881638/812911*a + 50041/812911)
            sage: J.absolute_ideal().norm()
            22584817

            sage: J._from_absolute_ideal(J.absolute_ideal()) == J
            True
        """
        L = self.number_field()
        K = L.absolute_field('a')
        K_to_L, L_to_K = K.structure()
        rnf = L.pari_rnf()
        nf_zk = id.number_field().pari_nf().getattr('zk')
        gens_in_K = [ QQ['x'](x) for x in nf_zk * id.pari_hnf()]
        # each gen is now a polynomial giving an element of the absolute number field
        gens_in_L = [ L(K(x)) for x in gens_in_K ]
        return L.ideal( gens_in_L )

    def free_module(self):
        return self.absolute_ideal().free_module()

    def gens_reduced(self):
        try:
            return self.__reduced_generators
        except AttributeError:
            L = self.number_field()
            K = L.base_field()
            R = L.polynomial().parent()
            S = L['x']
            gens = L.pari_rnf().rnfidealtwoelt(self.pari_rhnf())
            gens = [ L(R(x.lift().lift())) for x in gens ]

            # pari always returns two elements, even if only one is needed!
            if gens[1] in L.ideal([ gens[0] ]):
                gens = [ gens[0] ]
            elif gens[0] in L.ideal([ gens[1] ]):
                gens = [ gens[1] ]
            self.__reduced_generators = tuple(gens)
            return self.__reduced_generators

    def __invert__(self):
        """
        Return the multiplicative inverse of self.  Call with ~self.

        EXAMPLES:
            sage: K.<a,b> = NumberField([x^2 + 1, x^2 + 2])
            sage: I = K.fractional_ideal(4)
            sage: I^(-1)
            Fractional ideal (1/4)
            sage: I * I^(-1)
            Fractional ideal (1)
        """
        if self.is_zero():
            raise ZeroDivisionError
        return self._from_absolute_ideal( self.absolute_ideal().__invert__() )

    def is_principal(self):
        return self.absolute_ideal().is_principal()

    def is_zero(self):
        zero = self.number_field().pari_rnf().rnfidealhnf(0)
        return self.pari_rhnf() == zero

    def norm(self):
        """
        Compute the relative norm of this extension L/K as an ideal of K.

        EXAMPLE:
            sage: R.<x> = QQ[]
            sage: K.<a> = NumberField(x^2+6)
            sage: L.<b> = K.extension(K['x'].gen()^4 + a)
            sage: N = L.ideal(b).norm(); N
            Fractional ideal (-a)
            sage: N.parent()
            Monoid of ideals of Number Field in a with defining polynomial x^2 + 6
            sage: N.ring()
            Number Field in a with defining polynomial x^2 + 6
        """
        L = self.number_field()
        K = L.base_field()
        R = K.polynomial().parent()
        hnf = L.pari_rnf().rnfidealnormrel(self.pari_rhnf())
        return K.ideal([ K(R(x)) for x in convert_from_zk_basis(K, hnf) ])

    def ideal_below(self):
        """
        Compute the ideal of K below this ideal of L.

        EXAMPLE:
            sage: R.<x> = QQ[]
            sage: K.<a> = NumberField(x^2+6)
            sage: L.<b> = K.extension(K['x'].gen()^4 + a)
            sage: N = L.ideal(b)
            sage: M = N.ideal_below(); M == K.ideal([-a])
            True
            sage: Np = L.ideal( [ L(t) for t in M.gens() ])
            sage: Np.ideal_below() == M
            True
            sage: M.parent()
            Monoid of ideals of Number Field in a with defining polynomial x^2 + 6
            sage: M.ring()
            Number Field in a with defining polynomial x^2 + 6
            sage: M.ring() is K
            True

            This example concerns an inert ideal:

            sage: K = NumberField(x^4 + 6*x^2 + 24, 'a')
            sage: K.factor(7)
            Fractional ideal (7)
            sage: K0, K0_into_K, _ = K.subfields(2)[0]
            sage: K0
            Number Field in a0 with defining polynomial x^2 - 6*x + 24
            sage: L = K.relativize(K0_into_K, 'c'); L
            Number Field in c0 with defining polynomial x^2 + a0 over its base field
            sage: L.base_field() is K0
            True
            sage: L.ideal(7)
            Fractional ideal (7)
            sage: L.ideal(7).ideal_below()
            Fractional ideal (7)
            sage: L.ideal(7).ideal_below().number_field() is K0
            True

            This example concerns an ideal that splits in the quadratic field
            but each factor ideal remains inert in the extension:

            sage: len(K.factor(19))
            2
            sage: K0 = L.base_field(); a0 = K0.gen()
            sage: len(K0.factor(19))
            2
            sage: w1 = -a0 + 1; P1 = K0.ideal([w1])
            sage: P1.norm().factor(), P1.is_prime()
            (19, True)
            sage: L_into_K, K_into_L = L.structure()
            sage: L.ideal(K_into_L(K0_into_K(w1))).ideal_below() == P1
            True

            The choice of embedding of quadratic field into quartic field
            matters:

            sage: rho, tau = K0.embeddings(K)
            sage: L1 = K.relativize(rho, 'b')
            sage: L2 = K.relativize(tau, 'b')
            sage: L1_into_K, K_into_L1 = L1.structure()
            sage: L2_into_K, K_into_L2 = L2.structure()
            sage: a = K.gen()
            sage: P = K.ideal([a^2 + 5])
            sage: K_into_L1(P).ideal_below() == K0.ideal([-a0 + 1])
            True
            sage: K_into_L2(P).ideal_below() == K0.ideal([-a0 + 5])
            True
            sage: K0.ideal([-a0 + 1]) == K0.ideal([-a0 + 5])
            False
        """
        L = self.number_field()
        K = L.base_field()
        R = K.polynomial().parent()
        hnf = L.pari_rnf().rnfidealdown(self.pari_rhnf())
        return K.ideal([ K(R(x)) for x in convert_from_zk_basis(K, hnf) ])

    def factor(self):
        raise NotImplementedError
    def integral_basis(self):
        raise NotImplementedError
    def integral_split(self):
        raise NotImplementedError
    def is_maximal(self):
        raise NotImplementedError
    def is_prime(self):
        raise NotImplementedError
    def ramification(self):
        raise NotImplementedError
    def residue_class_degree(self):
        raise NotImplementedError
    def smallest_integer(self):
        raise NotImplementedError
    def valuation(self):
        raise NotImplementedError

def is_NumberFieldFractionalIdeal_rel(x):
    """
    Return True if x is a fractional ideal of a relative number field.

    EXAMPLES:
        sage: from sage.rings.number_field.number_field_ideal_rel import is_NumberFieldFractionalIdeal_rel
        sage: from sage.rings.number_field.number_field_ideal import is_NumberFieldFractionalIdeal
        sage: is_NumberFieldFractionalIdeal_rel(2/3)
        False
        sage: is_NumberFieldFractionalIdeal_rel(ideal(5))
        False
        sage: k.<a> = NumberField(x^2 + 2)
        sage: I = k.ideal([a + 1]); I
        Fractional ideal (a + 1)
        sage: is_NumberFieldFractionalIdeal_rel(I)
        False
        sage: R.<x> = QQ[]
        sage: K.<a> = NumberField(x^2+6)
        sage: L.<b> = K.extension(K['x'].gen()^4 + a)
        sage: I = L.ideal(b); I
        Fractional ideal (b)
        sage: is_NumberFieldFractionalIdeal_rel(I)
        True
        sage: N = I.norm(); N
        Fractional ideal (-a)
        sage: is_NumberFieldFractionalIdeal_rel(N)
        False
        sage: is_NumberFieldFractionalIdeal(N)
        True
    """
    return isinstance(x, NumberFieldFractionalIdeal_rel)
