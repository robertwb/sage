#!/bin/sh

usage() {
    echo "-----------------------------------------------------------"
    echo "| SAGE: Software for Algebra and Geometry Experimentation |"
    echo "-----------------------------------------------------------"
    echo " Optional arguments:"
    echo "  -h            -- print this help message"
    echo "  -notebook [options] -- start the SAGE notebook (options are"
    echo "                   the same as to the notebook command in SAGE)"
    echo "  -i [packages] -- install the given SAGE packages"
    echo "  -optional     -- list all optional packages that can be downloaded"
    echo "  -t <files|dir>-- test examples in .py, .pyx, .sage or .tex files"
    echo "  -upgrade      -- download, build and install latest non-optional SAGE packages"
    echo "  -advanced     -- list more options"
    echo "  file.[sage|py|spyx] [options] -- run given .sage, .py or .spyx files"
    echo "  -c cmd        -- Evaluates cmd as sage code"
    exit 1
}

usage_advanced() {
    echo "-----------------------------------------------------------"
    echo "| SAGE: Software for Algebra and Geometry Experimentation |"
    echo "-----------------------------------------------------------"
    echo "  no options below    -- start interactive session, passing options to ipython"
    echo "  filename.sage -- run the given file using SAGE"
    echo "  -b [branch]   -- switch to and build SAGE branch in devel/sage-branch"
    echo "  -br [branch]  -- switch to, build, and run SAGE branch in devel/sage-branch"
    echo "  -ba [branch]  -- switch to, rebuild all Sagex code, and run SAGE branch in devel/sage-branch"
    echo "  -bdist VER    -- build a binary distribution of SAGE"
    echo "  -clisp [...]  -- run Common Lisp"
    echo "  -clone [new branch] -- clone and run a new branch of the SAGE library from current branch"
    echo "  -gap <..>     -- run SAGE's Gap with given arguments"
    echo "  -gdb          -- run SAGE under the control of gdb"
    echo "  -gp <..>      -- run SAGE's GP (Pari) with given arguments"
    echo "  -f [packages] -- force build of the given SAGE package (even if already installed)"
    echo "  -grep <string>-- grep through all the SAGE library code for string"
    echo "  -h, -?        -- print help message"
    echo "  -i [packages] -- install the given SAGE packages"
    echo "                   if no packages given, print a list of all installed"
    echo "  -i -s [packages] -- install the given SAGE packages, not deleting their spkg/build directories."
    echo "  -ipython <...> -- run SAGE's Ipython using the default environment (not SAGE), passing additional options to Ipython"
    echo "  -kash <..>    -- run SAGE's Kash with given arguments"
    #echo "  -ldist VER    -- build a library SAGE distribution (for install into existing Python)"
    echo "  -lisp [...]   -- run Lisp interpreter included with SAGE"
    echo "  -log          -- add entry to <SAGE_ROOT>/changelog.txt"
    echo "  -maxima <..>  -- run SAGE's Maxima with given arguments"
    echo "  -M2 <..>      -- run SAGE's Macaulay2 with given arguments"
    echo "  -mpl          -- run with matplotlib support (requires optional matplotlib package)"
    echo "  -mwrank <..>  -- run SAGE's mwrank with given arguments"
    echo "  -np           -- run with no output prompts (useful for making doctests)"
    echo "  -optional     -- list all optional packages that can be downloaded"
    echo "  -pkg <dir>    -- create SAGE package dir.spkg from a give directory (bzip2 compression)"
    echo "  -pkg_nc <dir> -- create SAGE package dir.spkg from a give directory (no compression)"
    echo "  -preparse <file.sage> -- produce corresponding file.sage.py "
    echo "  -python       -- run the python interpreter"
    echo "  -q            -- quiet; start with no banner"
    echo "  -sdist VER    -- build a source distribution of SAGE"
    echo "  -singular <..>-- run SAGE's singular with given arguments"
    echo "  -t [-optional] [-verbose] [-long] <files|dir> -- test examples in .py, .pyx, .sage or .tex files"
    echo "                           -optional -- include examples with 'optional' and 'package'"
    echo "                           -long     -- include lines with the phrase 'long time'"
    echo "                           -verbose  -- print debuging output during the test"
    echo "  -tnew ...     -- like -t above, but only tests files modified since last commit"
    echo "  -tsage        -- test latex document via sage (pexpect) interface"
    echo "  -testall      -- test all source, docs, and examples in your SAGE distro."
    echo "  -update       -- download latest non-optional SAGE packages (do not build them)"
    echo "  -update-build -- build and install all downloaded non-optional SAGE packages"
    echo "  -upgrade      -- download, build and install latest non-optional SAGE packages"
    echo ""
    echo "You can also use -- before a long option, e.g., 'sage --optional'."
    echo ""
    exit 1
}

. $SAGE_ROOT/local/bin/sage-env   1>/dev/null 2>/dev/null

if [ $? -ne 0 ]; then
   echo "Error setting environment variables by running $SAGE_ROOT/local/bin/sage-env; possibly contact wstein@gmail.com."
fi

# SAGE startup script passes some funny options, which are
# best ignored.
if [ $# -eq 3 ]; then
   if [ $1 = '-i' -a $2 = '-colors' ]; then
       shift
       shift
       shift
   fi
fi

if [ $# -gt 0 ]; then
  if [ $1 = '-h' -o $1 = '-?' -o $1 = '-help' -o $1 = '-help' ]; then
     usage
  fi
  if [ $1 = "-advanced" -o $1 = "--advanced" ]; then
     usage_advanced
  fi
fi


LOGFILE="$SAGE_ROOT/sage.log"
LOGOPT=""
SAGE_EXE=sage.bin

matplotlib_setup() {
    MATPLOTLIBRC="$DOT_SAGE/" && export MATPLOTLIBRC
    if [ ! -f "$MATPLOTLIBRC/matplotlibrc" ]; then
        mkdir -p "$DOT_SAGE"
        cp "$SAGE_ROOT/matplotlibrc" "$DOT_SAGE/"
    fi
}

sage_setup() {
    # Display the startup banner
    cat "$SAGE_LOCAL/bin/sage-banner"

    # Check to see if the whole SAGE install tree has moved.
    # If so, regenerate .pyc files.
    "$SAGE_ROOT/local/bin/"sage-location

    cd "$SAGE_ROOT/local/bin"
    IPYTHONDIR="$DOT_SAGE/ipython" && export IPYTHONDIR
    IPYTHONRC="ipythonrc" && export IPYTHONRC
    if [ ! -d "$IPYTHONDIR" ]; then
        mkdir -p "$DOT_SAGE"
        cp -r "$SAGE_ROOT/ipython" "$DOT_SAGE/"
    fi
    matplotlib_setup
    sage-cleaner &
}


# Below the command
# _=sage.misc.interpreter.do_prefilter_paste('',False)

# It is very important in the following assignments
# that there is no whitespace after the backslashes.

########################################################
# Regarding printing the branch below:
#   We print a message with the library branch that
#   SAGE is currently being run from. If they are using
#   main branch, we print nothing, otherwise users get
#   very confused about what branch they are using.
########################################################

SAGE_STARTUP_COMMAND="
import sage.misc.misc; print \
sage.misc.misc.branch_current_hg_notice(sage.misc.misc.branch_current_hg()); \
from sage.all_cmdline import *;\
import os; os.chdir(\"$CUR\");\
import sage.misc.interpreter;\
from sage.misc.interpreter import attached_files;\
_=sage.misc.interpreter.load_startup_file(\"$SAGE_STARTUP_FILE\");
"

export SAGE_STARTUP_COMMAND

if [ $# -gt 0 ]; then
    if [ $1 = "-np" ]; then
       LOGOPT="-prompt_out=\\r $LOGOPT"
       shift
    fi
fi

sage() {
    sage_setup
    sage-ipython -c "$SAGE_STARTUP_COMMAND;"  "$@"
}

if [ $# -eq 0 ]; then
    sage
    exit $?
fi

if [ $1 = '-cleantmp' -o $1 = '--cleantmp' ]; then
    sage-cleaner
    exit $?
fi

#####################################################################
# Run SAGE's versions of the standard Algebra/Geometry etc. software
#####################################################################

if [ $1 = '-axiom' -o $1 = '--axiom' ]; then
    cd "$CUR"
    shift
    axiom "$@"
    exit $?
fi

if [ $1 = '-gap' -o $1 = '--gap' ]; then
    cd "$CUR"
    shift
    gap "$@"
    exit $?
fi

if [ $1 = '-gp'  -o $1 = '--gp' ]; then
    cd "$CUR"
    shift
    gp "$@"
    exit $?
fi

if [ $1 = '-singular'  -o $1 = '--singular' ]; then
    cd "$CUR"
    shift
    singular "$@"
    exit $?
fi

if [ $1 = '-clisp'  -o $1 = '--clisp' ]; then
    cd "$CUR"
    shift
    clisp "$@"
    exit $?
fi

if [ $1 = '-lisp'  -o $1 = '--lisp' ]; then
    cd "$CUR"
    shift
    lisp "$@"
    exit $?
fi

if [ $1 = '-kash'  -o $1 = '--kash' ]; then
    cd "$CUR"
    shift
    kash "$@"
    exit $?
fi

if [ $1 = '-fixdoctests' -o $1 = '--fixdoctests' ]; then
    cd "$CUR"
    shift
    sage-fixdoctests "$@"
    exit $?
fi

if [ $1 = '-maxima'  -o $1 = '--maxima' ]; then
    cd "$CUR"
    shift
    maxima "$@"
    exit $?
fi

if [ $1 = '-mwrank'  -o $1 = '--mwrank' ]; then
    cd "$CUR"
    shift
    mwrank "$@"
    exit $?
fi

if [ $1 = '-M2'  -o $1 = '--M2' ]; then
    cd "$CUR"
    shift
    M2 "$@"
    exit $?
fi

if [ $1 = '-python'  -o $1 = '--python' ]; then
    cd "$CUR"
    shift
    python "$@"
    exit $?
fi

if [ $1 = '-ipython'  -o $1 = '--ipython' ]; then
    cd "$CUR"
    shift
    ipython "$@"
    exit $?
fi

if [ $1 = '-darcs'  -o $1 = '--darcs' ]; then
    cd "$CUR"
    shift
    darcs "$@"
    exit $?
fi

if [ $1 = '-hg'  -o $1 = '--hg' ]; then
    cd "$CUR"
    shift
    hg "$@" # XXX
    exit $?
fi

if [ $1 = '-hgmerge'  -o $1 = '--hgmerge' ]; then
    ## NEED in SAGE Environment under OS X
    unset LIBRARY_PATH
    unset LD_LIBRARY_PATH
    unset DYLD_LIBRARY_PATH

    cd "$CUR"
    shift
    hgmerge $*
    exit $?
fi

#####################################################################
# Run SAGE's versions of the standard Algebra/Geometry etc. software
#####################################################################

if [ $1 = "-server1" -o $1 = "-server" -o $1 = "--server" ]; then
   cd "$CUR"
   shift
   sage-server "$@"
   exit $?
fi

if [ $1 = "-notebook"  -o $1 = '--notebook' ]; then
   cd "$CUR"
   shift
   sage-cleaner &
   sage-notebook "$@"
   exit $?
fi

if [ $1 = "-wiki"  -o $1 = '--wiki' ]; then
   cd "$CUR"
   shift
   sage-wiki "$@"
   exit $?
fi

if [ $1 = "-log" -o $1 = "--log" ]; then
   sage-log
   exit 0
fi

if [ $1 = '-grep' -o $1 = "--grep" ]; then
   sage_setup
   shift
   sage-grep "$@"
   exit 0
fi

if [ $1 = '-q' ]; then
   sage_setup
   shift
   sage-ipython  $LOGOPT -rcfile="$IPYTHONRC" -c "$SAGE_STARTUP_COMMAND" "$@"
   exit $?
fi

if [ $1 = '-b' ]; then
   shift
   time sage-build "$@"
   exit $?
fi

if [ $1 = '-br' -o $1 = "--br" ]; then
   shift
   sage-build "$@" && sage
   exit $?
fi

if [ $1 = '-ba' ]; then
   shift
   sage-build -b "$@" && sage
   exit $?
fi

if [ $1 = '-clone' -o $1 = "--clone" ]; then
   shift
   time sage-clone "$@"
   exit $?
fi

if [ $1 = '-t' ]; then
   cd "$CUR"
   shift
   sage-test "$@"
   exit $?
fi

if [ $1 = '-tnew' ]; then
   cd "$CUR"
   shift
   sage-test-new "$@"
   exit $?
fi

if [ $1 = '-tsage' -o $1 = "--tsage" ]; then
   cd "$CUR"
   shift
   sage-test -sage "$@"
   exit $?
fi

if [ $1 = '-testall' -o $1 = "--testall" ]; then
   shift
   sage-testall "$@"
   exit $?
fi

if [ $1 = '-c' ]; then
   cd "$CUR"
   shift
   sage-eval $*
   exit $?
fi

install() {
   cd "$SAGE_ROOT/spkg"
   if [ $# -lt 2 ]; then
       sage-spkg
       exit $?
   fi
   OPT="$1"
   shift
   if [ $1 = '-m' -o $1 = '-s' ]; then
       OPT=$OPT" "$1
       shift
   fi
   for PKG in "$@"
   do
       echo "Calling sage-spkg on $PKG"
       sage-spkg $OPT "$CUR/$PKG" 2>&1 | tee -a ../install.log

       if [ $? -ne 0 ]; then
          exit 1
       fi
       shift
   done
   exit $?
}

if [ $1 = '-optional' -o $1 = "--optional" ]; then
   sage-list-optional
   exit 0
fi

if [ $1 = '-i' ]; then
   shift
   echo "Installing $@"
   install " " "$@"
fi

if [ $1 = '-f' ]; then
   shift
   echo "Force installing $@"
   install -f "$@"
fi

if [ "$1" = '-pkg' -o "$1" = '-spkg' -o $1 = "--pkg" -o $1 = "--spkg" ]; then
   cd "$CUR"
   shift
   for PKG in "$@"
   do
      echo "Creating SAGE package $PKG"
      sage-pkg "$PKG"
      if [ $? -ne 0 ]; then
         exit 1
      fi
   done
   exit $?
fi

if [ $1 = '-pkg_nc' -o $1 = "--pkg_nc" ]; then
   cd "$CUR"
   shift
   for PKG in "$@"
   do
      echo "Creating SAGE package $PKG with no compression"
      sage-pkg-nocompress "$PKG"
      if [ $? -ne 0 ]; then
         exit 1
      fi
   done
   exit $?
fi

if [ $1 = '-mpl' -o $1 = "--mpl" ]; then
   sage_setup
   shift
   ipython  $LOGOPT -pylab -rcfile="$IPYTHONRC" -c "$SAGE_STARTUP_COMMAND;"
   exit $?
fi




if [ $1 = '-sdist' -o $1 = "--sdist" ]; then
   if [ $# -ne 2 ]; then
       echo "** MISSING VERSION NUMBER! ** "
   fi
   sage-sdist $2 "$SAGE_ROOT"
   exit $?
fi

if [ $1 = '-ldist' -o $1 = "--ldist" ]; then
   echo "sage -ldist currently disabled"
   echo "To work on it, remove the exit after this message in SAGE_ROOT/local/bin/sage-sage"
   exit 1
   if [ $# -ne 2 ]; then
       echo "** MISSING VERSION NUMBER! ** "
   fi
   sage-sdist $2 "$SAGE_ROOT"
   if [ $? -ne 0 ]; then
       echo "Error building source distribution"
       exit 1
   fi
   cd "$SAGE_ROOT"/dist/
   if [ $? -ne 0 ]; then
       echo "Error changing to source distribution directory"
       exit 1
   fi
   "$SAGE_ROOT"/local/bin/sage-libdist sage-$2.tar
   exit $?
fi

if [ $1 = '-bdist' -o $1 = "--bdist" ]; then
   if [ $# -ne 2 ]; then
       echo "** MISSING VERSION NUMBER! ** "
   fi
   sage-bdist $2 "$SAGE_ROOT"
   exit $?
fi

if [ $1 = '-update' ]; then
    sage-update
    exit $?
fi

if [ $1 = '-update-build' -o $1 = "--update-build" ]; then
    sage-update-build
    sage-update-build
    exit $?
fi

if [ $1 = '-upgrade' -o $1 = "--upgrade" ]; then
    # Do it twice since when installing sage-scripts and a running
    # script changes, it gets confused and exits with an error.
    # Running again (with the script replaced) then fixes the problem.
    sage-upgrade
    sage-upgrade
    exit $?
fi

if [ $1 = '-gdb' -o $1 = "--gdb" ]; then
    sage_setup
    sage-gdb
    exit $?
fi

if [ $1 = '-preparse' -o $1 = "--preparse" ]; then
    shift
    cd "$SAGE_LOCAL/bin/"
    sage-preparse "$CUR" "$@"
    exit $?
fi

if [ $1 = '-pyrex' -o $1 = "--pyrex" ]; then
    shift
    cd "$CUR"
    pyrexc "$@"
    exit $?
fi

if [ $# -ge 1 ]; then
   matplotlib_setup
   T=`echo "$1" | sed -e "s/.*\.//"`
   if [ "$T " = "spkg " ]; then
       install "" "$@"
       exit $?
   fi
   cd "$SAGE_LOCAL/bin/"
   sage-run "$CUR" "$@"
   exit $?
fi
