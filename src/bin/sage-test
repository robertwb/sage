#!/usr/bin/env python

import os, signal, sys, time

####################################

argv = sys.argv

try:
    i = argv.index('-sage')
    del argv[i]
    use_sage_only = True
except ValueError:
    use_sage_only = False

opts = ' '.join([X for X in argv if X[0] == '-'])
argv = [X for X in argv if X[0] != '-']

t0 = time.time()

def abspath(x):
    return strip_automount_prefix(os.path.abspath(x))

def strip_automount_prefix(filename):
    """
    Strip prefixes added on automounted filesystems in some cases,
    which make the absolute path appear hidden.

    AUTHOR:
        -- Kate Minola
    """
    str = filename.split("/",2)
    new = "/" + str[2]
    if os.path.exists(new):
        inode1 = os.stat(filename)[1]
        inode2 = os.stat(new)[1]
        if inode1 == inode2:
            filename = new
    return filename

CUR = abspath(os.curdir)

def abs(f):
    return "sage -t %s %s"%(opts, abspath(f)[len(CUR)+1:])

def skip(F):
    G = abspath(F)
    i = G.rfind('/')
    if os.path.exists('%s/nodoctest.py'%G[:i]):
        print "%s (skipping) -- nodoctest.py file in directory"%abs(F)
        return True

    if G == "all.py" or "__init__.py" in G \
          or G[0] == '.' or '/.' in G or \
          'nodoctest' in open(G).read():
        return True

    sys.stdout.write("%-60s"%abs(F))
    sys.stdout.flush()
    return False

failed = []

SAGE_ROOT=os.environ['SAGE_ROOT']
TMP=SAGE_ROOT + "/tmp/test/"
if not os.path.exists(TMP):
    os.makedirs(TMP)

def test(F, cmd):
    t = time.time()
    if skip(F):
        return 0
    try:
        s = "%s/local/bin/sage-%s %s"%(SAGE_ROOT, cmd, F)
        err = os.system(s)   # need to catch control c by writing to a file and looking at it??
    except KeyboardInterrupt:
        print "Keyboard Interrupt"
        print "Aborting further tests."
        sys.exit(1)
    if err != 0:
        failed.append(abs(F))
    os.system("mv -f __test* %s 2>/dev/null"%(TMP))
    print "\t [%.1f s]"%(time.time() - t)
    return err


def test_file(F):
    global CUR
    os.chdir(CUR)
    if not os.path.exists(F):
        if F[:6] != "__test" and not F.endswith('.png'):
            print "ERROR: File %s/%s is missing"%(os.curdir,F)
            failed.append('%s/%s'%(os.curdir,F))
        return 1
    if os.path.isfile(F):
        dir, file = os.path.split(F)
        if dir != '':
            os.chdir(dir)
            F = file

    base, ext = os.path.splitext(F)
    if use_sage_only or ext == '.sage':
        return test(F, 'doctest_tex ' + opts)
    elif ext in ['.py', '.pyx', '.tex']:
        return test(F, 'doctest '+opts)
    elif os.path.isdir(F) and not (F[:1] == '.') \
            and not '#' in F and not '/notes' in F:
        ld = os.listdir(F)
        if not ('__nodoctest__' in ld):
            for L in ld:
                k = test_file('%s/%s'%(F,L))
    return 0

files = argv[1:]
if len(files) == 0:
    files = os.listdir('.')

files.sort()

for F in files:
    e = test_file(F)
    if e:
        print "exit code: %s"%e
    #    sys.exit(1)

print " "
print "-"*int(70)

if len(failed) == 0:
    print "All tests passed!"
else:
    print "The following tests failed:\n"
    print "\n\t" + "\n\t".join(failed)

print "Total time for all tests: %.1f seconds"%(time.time() - t0)
