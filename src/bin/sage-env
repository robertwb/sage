#!/usr/bin/env bash

###########################################################################
#
#  Set environment variables for building and/or running Sage.
#  You must source this; see below!
#
#  AUTHORS:   William Stein                            2005-12
#             David Kirkby <david.kirkby@onetel.net>   2009-12-29
#
###########################################################################

##########################################################################
#
#  If you want to set all environment variables for your shell like
#  they are during the build of Sage packages, type
#
#             source local/bin/sage-env
#
#  from the SAGE_ROOT directory.   To do the same from a /bin/bash
#  script use ". local/bin/sage-env".
#
##########################################################################

# GUESS SAGE_ROOT from pwd
SAVEDIR="`pwd`"
if [ -f sage -a -d spkg ]; then
    GUESSED_SAGE_ROOT="`pwd`"
else
    if [ -f ../../sage -a -d ../../spkg ]; then
        cd ../../
        GUESSED_SAGE_ROOT="`pwd`"
    else
        GUESSED_SAGE_ROOT=""
    fi
fi
cd "$SAVEDIR"


if [ "$SAGE_ROOT" = "" ]; then
    if [ "$GUESSED_SAGE_ROOT" = "" ]; then
        echo "Error: You must set the SAGE_ROOT environment"
        echo "variable or run this script from the SAGE_ROOT or "
        echo "SAGE_ROOT/local/bin/ directory."
        exit 1
    else
        SAGE_ROOT="$GUESSED_SAGE_ROOT"
        export SAGE_ROOT
    fi
else
    if [ -f "$SAGE_ROOT"/sage -a -d "$SAGE_ROOT"/spkg ]; then
        # SAGE_ROOT points to a sage installation as expected
        if [ "$SAGE_ROOT" != "$GUESSED_SAGE_ROOT" ]; then
            echo "Warning: Attempted to overwrite SAGE_ROOT environment variable"
        fi
    else
        echo "Error: The SAGE_ROOT environment variable is set to"
        echo "a bad value. You must correct it or erase it and"
        echo "run this script from the SAGE_ROOT or"
        echo "SAGE_ROOT/local/bin/ directory."
        exit 1
    fi
fi


if [ "x$SAGE_PRINT_ENVIRONMENT" = "xyes" ] ; then
    echo "The following environment variables can be set by the user"
    echo "but unfortunately, not all packages use them, so you can not"
    echo "rely on them working as intended. "
    echo "AR          The archiver (e.g. ar, /usr/ccs/bin/ar or /usr/bin/ar)"
    echo "AS          The assembler (e.g. as, /usr/ccs/bin/as or /usr/bin/as)"
    echo "CC          The C compiler (e.g cc, /opt/SUNWspro/bin/cc or /usr/bin/gcc)"
    echo "CFLAGS      Flag(s) for the C compiler"
    echo "CXX         The C++ compiler (e.g g++, /opt/SUNWspro/bin/CC or /usr/local/bin/g++)"
    echo "CXXFLAGS    Flag(s) for the C++ compiler"
    echo "LD          The linker (e.g. ld, /usr/ccs/bin/ld or /usr/bin/ld)"
    echo "LDFLAGS     Linker flag(s) (e.g. -D token)"
    echo "MAKE        The make program (e.g. make, /usr/bin/make or /usr/local/bin/gmake)"
    echo "MAKEFLAGS   Flag(s) to make (e.g. -j4)."
    echo "RANLIB      Archiver ranlib (e.g. ranlib, /usr/ccs/bin/ranlib etc)"
    echo "SAGE64      Set to \"yes\" to build a 64-bit binary"
    echo "SAGE_DEBUG  Set to \"no\" if you do not want debugging information"
    echo "We attempt to set this to sensible values, but check below to"
    echo "ensure they are OK. If you wish to override any then please use:"
    echo "setenv NAME_OF_ENVIROMENT_VARIABLE value_of_environment_variable"
    echo "(if you use tcsh, csh or a similar shell) or"
    echo "NAME_OF_ENVIROMENT_VARIABLE=value_of_environment_variable"
    echo "export NAME_OF_ENVIROMENT_VARIABLE"
    echo "if you use sh, bash or a similar shell"
fi

# Setting Sage-related location environment variables.
BUILD=build
SAGE_PACKAGES="$SAGE_ROOT/spkg" && export SAGE_PACKAGES
SAGE_LOCAL="$SAGE_ROOT/local"   && export SAGE_LOCAL
SAGE_DATA="$SAGE_ROOT/data"     && export SAGE_DATA
SAGE_DOC="$SAGE_ROOT/devel/sage/doc" && export SAGE_DOC
PATH="$SAGE_ROOT:$SAGE_LOCAL/bin:$PATH" && export PATH

# We offer a toolchain option, so if $SAGE_LOCAL/toolchain/toolchain-env exists source it.
# Since the user might do something crazy we do not do any checks, but hope for the best.
# source is not portable - use a dot instead.
if [ -f $SAGE_LOCAL/toolchain/toolchain-env ]; then
  . $SAGE_LOCAL/toolchain/toolchain-env
fi

# For a framework Python build on OS X, Python's bin directory is not local/bin
if [ `uname` = "Darwin" ]; then
    PATH="$SAGE_LOCAL/Frameworks/Python.framework/Versions/2.5/bin:$PATH" && export PATH
fi

if [ "$LIBRARY_PATH" != "" ]; then
    LIBRARY_PATH="$SAGE_LOCAL/lib/:$LIBRARY_PATH"
else
    LIBRARY_PATH="$SAGE_LOCAL/lib/"
fi
export LIBRARY_PATH

GP_DATA_DIR="$SAGE_LOCAL/share/pari" && export GP_DATA_DIR
GPHELP="$SAGE_LOCAL/bin/gphelp" && export GPHELP
GPDOCDIR="$SAGE_LOCAL/share/pari/doc" && export GPDOCDIR

SINGULARPATH="$SAGE_LOCAL/share/singular" && export SINGULARPATH

if [ "$SAGE_SERVER" = "" ]; then
    SAGE_SERVER="http://www.sagemath.org/"
    export SAGE_SERVER
fi

if [ "$DOT_SAGE" = "" ]; then
    DOT_SAGE="$HOME/.sage/"
    export DOT_SAGE
fi

if [ "$SAGE_STARTUP_FILE" = "" ]; then
    SAGE_STARTUP_FILE="$DOT_SAGE/init.sage"
    export SAGE_STARTUP_FILE
fi

if [ -d "$SAGE_ROOT/local/lib/python" ]; then
    PYTHONPATH="$SAGE_PATH:$SAGE_ROOT/local/lib/python"   && export PYTHONPATH
    PYTHONHOME="$SAGE_ROOT/local" && export PYTHONHOME
fi

if [ -z "${SAGE_ORIG_LD_LIBRARY_PATH_SET}" ]; then
    SAGE_ORIG_LD_LIBRARY_PATH=$LD_LIBRARY_PATH && export SAGE_ORIG_LD_LIBRARY_PATH
    SAGE_ORIG_LD_LIBRARY_PATH_SET=True && export SAGE_ORIG_LD_LIBRARY_PATH_SET
fi

if [ -z "$SAGE_TESTDIR" ]; then
    SAGE_TESTDIR="$DOT_SAGE"/tmp && export SAGE_TESTDIR
fi

LD_LIBRARY_PATH="$SAGE_ROOT/local/lib/:$LD_LIBRARY_PATH" && export LD_LIBRARY_PATH
# The following is needed for openmpi:
LD_LIBRARY_PATH="$SAGE_ROOT/local/lib/openmpi:$LD_LIBRARY_PATH" && export LD_LIBRARY_PATH
# The following is needed for R (in case the Sage install is moved):
LD_LIBRARY_PATH="$SAGE_ROOT/local/lib/R/lib:$LD_LIBRARY_PATH" && export LD_LIBRARY_PATH
# The following is needed for OS X (especially for the
# Singular install).
if [ `uname` = "Darwin" ]; then
    if [ -z "${SAGE_ORIG_DYLD_LIBRARY_PATH_SET}" ]; then
        SAGE_ORIG_DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH && export SAGE_ORIG_DYLD_LIBRARY_PATH
        SAGE_ORIG_DYLD_LIBRARY_PATH_SET=True && export SAGE_ORIG_DYLD_LIBRARY_PATH_SET
    fi
    DYLD_LIBRARY_PATH="$LD_LIBRARY_PATH:$DYLD_LIBRARY_PATH:$SAGE_LOCAL/lib/R/lib" && export DYLD_LIBRARY_PATH
fi

if [ "$1" = "-short" ]; then
    exit 0
fi

if [ -z "$RHOME" ]; then
    RHOME="$SAGE_LOCAL/lib/R" && export RHOME
fi


############ compilation flags

# Setting Sage-related compilation flags.
# This could be used in code to make special changes only when
# code is being built as part of Sage.
__sage__="" && export __sage__
# Set the default compiler to gcc if the environment variable
# CC is not set.
if [ "$CC" = "" ]; then
     CC="gcc"         && export CC
fi
 # Set the default C++ compiler to g++ if the environment variable
# CXX is not set.
if [ "$CXX" = "" ]; then
    CXX="g++"         && export CXX
fi

if [ "$LD" = "" ]; then
    LD="ld"  && export LD
fi
if [ "$AR" = "" ]; then
    AR="ar"  && export AR
fi
if [ "$AS" = "" ]; then
    AS="as"  && export AS
fi

UNAME=`uname`
if [ `uname | sed -e 's/WIN.\+/WIN/'` = "CYGWIN" ]; then
    UNAME="CYGWIN"
fi

if [ "$LDFLAGS" = "" ]; then
    LDFLAGS=""          && export LDFLAGS
fi

if [ "$SAGE64" = "" ]; then
    SAGE64="no" && export SAGE64
fi

if [ "$SAGE64" != "yes" -a "$SAGE64" != "no" ]; then
    echo "The environment variable SAGE64 (=$SAGE64) must be either unset, yes or no."
    exit 1
fi

# In case SAGE64 has been set to yes before re-inject it into the environment
# This is only done on OSX and Solaris since those are the only real multi lib
# arches we support. Eventually Linux PPC on the PS3 might need to be added here
# Although not supported by Sage, both the HP-UX and AIX operating systems
# can have both 32 and 64 bit code on the same system
. $SAGE_LOCAL/bin/sage-check-64 2> /dev/null
export SAGE64

# Make use of the scripts on Trac #7505 to determine the correct
# compiler options. One of the following will be output by the
# the scripts testcc.sh and testcxx.sh
#  * GCC
#  * Sun_Studio
#  * HP_on_Tru64
#  * HP_on_Alpha_Linux
#  * HP_on_HP-UX
#  * IBM_on_AIX
#  * Unknown

# In each case, I've called the flag as similar as
# possible to the GNU names, to make it easier to change code.
# i.e. the flag for generating position independent code is called
# FPIC_FLAG, as the option with gcc is -fPIC.
# The option for generating shared libraries is called
# SHARED_FLAG, as the option for gcc is -shared.
# Likewise for SONAME_FLAG, WHOLE_ARCHIVE_FLAG and NO_WHOLE_ARCHIVE_FLAG

# If all instances of -fPIC in Sage were replaced by $FPIC_FLAG
# Sage would be a lot more portable than it currently is.
# Likewise, for several other options which depend on the compiler.
if  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xGCC" ] ; then
    # These are the names of the environment variables, and their GCC
    # name. They are not appended to CFLAGS, CXXFLAGS or FCFLAGS as they
    # are not always needed.
    FPIC_FLAG="-fPIC"
    SHARED_FLAG="-shared"
    SONAME_FLAG="-soname"
    WHOLE_ARCHIVE_FLAG="--whole-archive"
    NO_WHOLE_ARCHIVE_FLAG="--no-whole-archive"

    # Enable warnings on gcc.
    CFLAGS="$CFLAGS -Wall"
    CXXFLAGS="$CXXFLAGS -Wall"
    FCFLAGS="$FCFLAGS -Wall"
elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xSun_Studio" ] ; then
    # -xcode=pic32 is valid on 64-bit too, despite the name.
    # It is equivalent to the obsolete -KPIC on SPARC and -kPIC on x86
    # These flags for Solaris should work in most circumstances.
    # Identical flags have been used to build a 32-bit version of Sage
    # on SPARC.
    FPIC_FLAG="-xcode=pic32"
    SHARED_FLAG="-G"
    SONAME_FLAG="-h"
    WHOLE_ARCHIVE_FLAG="-z allextract"
    NO_WHOLE_ARCHIVE_FLAG="-z defaultextract"

    # The Sun C++ compiler is supplied with two standard libraries.
    # http://developers.sun.com/solaris/articles/cmp_stlport_libCstd.html
    # The default library is based on an old version of the C++ standard
    # and is not compatible with the latest standard. This line forces the
    # use of the new library with: -library=stlport4.
    CXXFLAGS="$CXXFLAGS -library=stlport4"

    # The Sun compiler is quite fussy by default (much
    # more so than the GNU ones, so adding more warnings will
    # be too much)
elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xHP_on_HP-UX" ] ; then
    # HP's C++ compiler creates position independent code by default, but
    # I assume the C compiler does not.
    FPIC_FLAG="-b"       # HP's C++ compiler creates position independent code by default.
    SHARED_FLAG="-b"     # I'm not 100% sure of this.
    SONAME_FLAG=""
    WHOLE_ARCHIVE_FLAG=""
    NO_WHOLE_ARCHIVE_FLAG=""

    # Like the Sun compiler, the HP compiler has an old and a new library
    # and by default uses the old library. To use a newer library, which
    # is closer to the current C++ standard, the option -AA must be given.
    # Unlike most other compilers, by default it does no optimization at
    # all, which is undesirable, so -O is added.
    CFLAGS="$CFLAGS -O"
    CXXFLAGS="$CXXFLAGS -AA -O"
    FCFLAGS="$FCFLAGS -O"
elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xIBM_on_AIX" ] ; then
    echo "Warning: Some compiler options when using HP's compiler"
    echo "on HP-UX are in the file sage-env. These might"
    echo "not be correct and so will need adjusting."
    echo "It is suggested that you try to build Sage with"
    echo "GCC first, as that is more likely to work, as the"
    echo "compiler flags used by GCC are the same, irrespective"
    echo "of the operating system. "
    FPIC_FLAG="-qpic"
    SHARED_FLAG=""
    SONAME_FLAG=""
    WHOLE_ARCHIVE_FLAG=""
    NO_WHOLE_ARCHIVE_FLAG=""
elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xHP_on_Tru64" ] ; then
    echo "Warning: Some compiler options when using HP's compiler"
    echo "on Tru64 are in the file sage-env. These might"
    echo "not be correct and so will need adjusting."
    echo "It is suggested that you try to build Sage with"
    echo "GCC first, as that is more likely to work, as the"
    echo "compiler flags used by GCC are the same, irrespective"
    echo "of the operating system. "
    FPIC_FLAG=""
    SHARED_FLAG=""
    SONAME_FLAG=""
    WHOLE_ARCHIVE_FLAG=""
    NO_WHOLE_ARCHIVE_FLAG=""
elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xHP_on_Alpha_Linux" ] ; then
    echo "Warning: Some compiler options when using HP's compiler"
    echo "on Alpha Linux are in the file sage-env. These might"
    echo "not be correct and so will need adjusting."
    echo "It is suggested that you try to build Sage with"
    echo "GCC first, as that is more likely to work, as the"
    echo "compiler flags used by GCC are the same, irrespective"
    echo "of the operating system. "
    FPIC_FLAG=""
    SHARED_FLAG=""
    SONAME_FLAG=""
    WHOLE_ARCHIVE_FLAG=""
    NO_WHOLE_ARCHIVE_FLAG=""
elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xUnknown" ] ; then
    echo "Your compiler type is unknown. So suitable compiler"
    echo "options are unknown. The flags will be set to the names"
    echo "used by GCC, but these are probably wrong"
    echo "Please advise on the sage-support mailing list what"
    echo "compiler you are using, and someone will help you"
    FPIC_FLAG="-fPIC"
    SHARED_FLAG="-shared"
    SONAME_FLAG="-soname"
    WHOLE_ARCHIVE_FLAG="--whole-archive"
    NO_WHOLE_ARCHIVE_FLAG="--no-whole-archive"
    CFLAGS = "$CFLAGS -Wall"
    CXXFLAGS = "$CXXFLAGS -Wall"
    FCFLAGS = "$FCFLAGS -Wall"
fi

# Add debugging option (-g) unless SAGE_DEBUG is set to "no".

if [  "x$SAGE_DEBUG" != "xno"  ] ; then
   CFLAGS="$CFLAGS -g"
   CXXFLAGS="$CXXFLAGS -g"
   FCFLAGS="$FCFLAGS -g"
fi


# Add the appropate options to CFLAGS, CXXFLAGS and FCFLAGS to
# produce a 64-bit binary. Doing this once, and only once in
# sage-env is preferable to setting it in virtually all
# .spkg files. If its wrong, it can be changed here.

# It is possible that -m64 or the appropiate option might be
# needed for linking in some places, so it is also exported
# as a variable itself, though I doubt it would be needed
# often. Flint will need this, and so does ECL I believe.

if [ "x$SAGE64" = "xyes" ] ; then
   if  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xGCC" ] ; then
      # Flags for a 64-bit build.
      CFLAG64="-m64"
      CXXFLAG64="-m64"
      FCFLAG64="-m64"
   elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xSun_Studio" ] ; then
      CFLAG64="-m64"
      CXXFLAG64="-m64"
      FCFLAG64="-m64"
   elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xIBM_on_AIX" ] ; then
      # http://www-01.ibm.com/support/docview.wss?uid=swg27012860&aid=1
      # The appropriate 64-bit option for IBM's C++ and Fortran
      # compilers are assumed to be the same as the
      # C compiler. This has not been checked
      # Adding -q64 to generate 64-bit code
      CFLAG64="-q64"
      CXXFLAG64="-q64"
      FCFLAG64="-q64"
   elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xHP_on_HP-UX" ] ; then
      # Two sort of processors are used on HP-UX machines - the older
      # PA-RISC and the newer Itanium. The 'model' command is the preffered
      # way to get this information, rather than 'uname', as HP might in future
      # use model numbers which are incompatible with the 'uname' command.
      # This is documented in the 'model' man page.
      if [ `model | grep 9000` ] ; then
         # Adding compiler flags for PA-RISC 2.0 architecture.
         CFLAG64="+DA2.0W"
         CXXFLAG64="+DA2.0W"
         FCFLAG64="+DA2.0W"
      elif [ `model | grep ia64` ]  ; then
         # Itanium.
         CFLAG64="+DD64"
         CXXFLAG64="+DD64"
         FCFLAG64="+DD64"
      fi
   elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xHP_on_Tru64" ] ; then
      # 64-bit is the default on Tru64, so no options needed to build
      # http://h30097.www3.hp.com/docs/porting/tru64-to-hpux/TITLE.HTM
      CFLAG64=""
      CXXFLAG64=""
      FCFLAG64=""
   elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xHP_on_Alpha_Linux" ] ; then
      # I've not carefully checked the Tru64 or Alpha Linux documentation
      # but it can be found at http://h30097.www3.hp.com/cplus/
      # I'll add the correct flags at a later date, but this is not urgent
      # as there is nobody porting Sage to Tru64 yet.
      CFLAG64="-HP_on_Alpha_Linux_option-to-build-64-bit-code"
      CXXFLAG64="-HP_on_Alpha_Linux_option-to-build-64-bit-code"
      FCFLAG64="-HP_on_Alpha_Linux_option-to-build-64-bit-code"
   elif  [ "x`$SAGE_LOCAL/bin/testcc.sh $CC`" = "xUnknown" ] ; then
      echo "Warning: Since the compiler type is unknown, the"
      echo "compiler option to generate 64-bit code is unknown. The -m64"
      echo "option, which is used by GCC will be added, but this"
      echo "is probably wrong. Without knowing the compiler, it's"
      echo "impossible to know the right flags to use"
      CFLAG64="-m64"
      CXXFLAG64="-m64"
      FCFLAG64="-m64"
   fi
   CFLAGS="$CFLAGS $CFLAG64"
   CXXFLAGS="$CXXFLAGS $CXXFLAG64"
   FCFLAGS="$FCFLAGS $FCFLAG64"
fi

if [ "$CXXFLAGS" = "" ]; then
   CXXFLAGS="$CFLAGS"
fi

if [ "$CP" = "" ]; then
    CP="cp"  && export CP
fi

if [ "$MV" = "" ]; then
    MV="mv"  && export MV
fi

if [ "$MAKE" = "" ]; then
    MAKE="make"         && export MAKE
fi

if [ "$RM" = "" ]; then
    RM="rm"  && export RM
fi

if [ "$RANLIB" = "" ]; then
    RANLIB="ranlib"  && export RANLIB
fi

if [ "$LN" = "" ]; then
    LN="ln"  && export LN
fi

if [ "$MKDIR" = "" ]; then
    MKDIR="mkdir"  && export MKDIR
fi

if [ "$CHMOD" = "" ]; then
    CHMOD="chmod"  && export CHMOD
fi

if [ "$TOUCH" = "" ]; then
    TOUCH="touch"  && export TOUCH
fi

if [ "$MAKEFLAGS" != "" ]; then
    MFLAGS="$MAKEFLAGS"  && export MFLAGS
fi

# See trac 7186 -- this is needed if ecl is moved
ECLDIR="$SAGE_LOCAL/lib/ecl/" && export ECLDIR

# Set a variable SHARED_LIBRARY_EXTENSION equal to the extension (without the dot)
# used on shared libraries. Lots of bits of code in Sage have differenent excepts for
# OS X and Cygwin, but a lot of this could be cleared up using
if [ "x$UNAME" = "xAIX" ] ; then
    SHARED_LIBRARY_EXTENSION="a"
elif [ "x$UNAME" = "xCYGWIN" ] ; then
    SHARED_LIBRARY_EXTENSION="dll"
elif [ "x$UNAME" = "xDarwin" ] ; then
    SHARED_LIBRARY_EXTENSION="dylib"
elif [ "x$UNAME" = "xHP-UX" ] ; then
    SHARED_LIBRARY_EXTENSION="sl"
else
    SHARED_LIBRARY_EXTENSION="so"
fi

# Export variable names.
export CC
export CFLAG64
export CFLAGS
export CXXFLAG64
export CXXFLAGS
export FCFLAG64
export FCFLAGS
export FPIC_FLAG
export NO_WHOLE_ARCHIVE_FLAG
export SAGE_DEBUG
export SHARED_FLAG
export SHARED_LIBRARY_EXTENSION
export SONAME_FLAG
export UNAME
export WHOLE_ARCHIVE_FLAG

# Print environment variables if the variable SAGE_PRINT_ENVIRONMENT
# is exported to 'yes'
if [ "x$SAGE_PRINT_ENVIRONMENT" = "xyes" ] ; then
   echo "The environment for Sage will be as follows. If any"
   echo "variables are wrong, you may be able to change them"
   echo "by setting a variable."
   echo "AR=$AR"
   echo "AS=$AS"
   echo "CC=$CC"
   echo "CFLAG64=$CFLAG64  - Used by C compiler to build 64-bit code (-m64 for gcc)"
   echo "CFLAGS=$CFLAGS"
   echo "CP=$CP"
   echo "CXX=$CXX"
   echo "CXXFLAG64=$CXXFLAG64  - Used by C++ compiler to build 64-bit code (-m64 for g++)"
   echo "CXXFLAGS=$CXXFLAGS"
   echo "ECLDIR=$ECLDIR"
   echo "FCFLAG64=$FCFLAG64 flag used by Fortran compiler to build 64-bit code (-m64 for gfortran)"
   echo "FCFLAGS=$FCFLAGS"
   echo "FPIC_FLAG=$FPIC_FLAG  - Used to produce position independent code"
   echo "LD=$LD"
   echo "LDFLAGS=$LDFLAGS"
   echo "MAKE=$MAKE"
   echo "MAKEFLAGS=$MAKEFLAGS (MFLAGS will be exported the same too)"
   echo "RANLIB=$RANLIB"
   echo "SAGE64=$SAGE64"
   echo "SHARED_FLAG=$SHARDED_FLAG  - used to build a shared library"
   echo "SHARED_LIBRARY_EXTENSION=$SHARED_LIBRARY_EXTENSION  - sl, so, dll etc"
   echo "SONAME_FLAG="$SONAME_FLAG"
   echo "WHOLE_ARCHIVE_FLAG="$WHOLE_ARCHIVE_FLAG"
   echo "NO_WHOLE_ARCHIVE_FLAG=$NO_WHOLE_ARCHIVE_FLAG"
fi
